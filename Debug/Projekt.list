
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005764  08005764  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800576c  0800576c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  080057d0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080057d0  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011327  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234c  00000000  00000000  000313f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00033748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c18  00000000  00000000  000346c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b9  00000000  00000000  000352d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123e0  00000000  00000000  0005b691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bbd  00000000  00000000  0006da71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000460c  00000000  00000000  0015e630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056bc 	.word	0x080056bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080056bc 	.word	0x080056bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	xyz++;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800057e:	701a      	strb	r2, [r3, #0]
	if(htim->Instance== TIM16){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d104      	bne.n	8000594 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800058a:	2120      	movs	r1, #32
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 ffbc 	bl	800150c <HAL_GPIO_TogglePin>
	}
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001ad 	.word	0x200001ad
 80005a0:	40014400 	.word	0x40014400

080005a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
		HAL_UART_Transmit_IT(&huart2, buffer, sizeof(buffer));
 80005ae:	2214      	movs	r2, #20
 80005b0:	4903      	ldr	r1, [pc, #12]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x20>)
 80005b4:	f003 faa2 	bl	8003afc <HAL_UART_Transmit_IT>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000198 	.word	0x20000198
 80005c4:	20000110 	.word	0x20000110

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb94 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f83a 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f988 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f956 	bl	8000888 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005dc:	f000 f886 	bl	80006ec <MX_TIM2_Init>
  MX_TIM16_Init();
 80005e0:	f000 f8dc 	bl	800079c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <main+0x68>)
 80005e6:	f002 fb3b 	bl	8002c60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0x6c>)
 80005ec:	f002 fb38 	bl	8002c60 <HAL_TIM_Base_Start_IT>
  sprintf(buffer,"Button pressed\r\n");
 80005f0:	4911      	ldr	r1, [pc, #68]	; (8000638 <main+0x70>)
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0x74>)
 80005f4:	f004 fbbe 	bl	8004d74 <siprintf>
  while (1)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  //HAL_Delay(1000);

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== 0){
 80005f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <main+0x78>)
 80005fe:	f000 ff55 	bl	80014ac <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10e      	bne.n	8000626 <main+0x5e>
			 HAL_Delay(5);
 8000608:	2005      	movs	r0, #5
 800060a:	f000 fbf1 	bl	8000df0 <HAL_Delay>
			 button=1;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <main+0x7c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
			 while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000614:	bf00      	nop
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <main+0x78>)
 800061c:	f000 ff46 	bl	80014ac <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f7      	beq.n	8000616 <main+0x4e>
		  }
		  button=0;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <main+0x7c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== 0){
 800062c:	e7e4      	b.n	80005f8 <main+0x30>
 800062e:	bf00      	nop
 8000630:	20000078 	.word	0x20000078
 8000634:	200000c4 	.word	0x200000c4
 8000638:	080056d4 	.word	0x080056d4
 800063c:	20000198 	.word	0x20000198
 8000640:	48000800 	.word	0x48000800
 8000644:	200001ac 	.word	0x200001ac

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fbac 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f000 ff8d 	bl	800158c <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 f9a4 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 13;
 8000696:	230d      	movs	r3, #13
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 ffc4 	bl	8001638 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b6:	f000 f985 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fb8c 	bl	8001df0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f971 	bl	80009c4 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_TIM2_Init+0xac>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_TIM2_Init+0xac>)
 800071a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800071e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_TIM2_Init+0xac>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM2_Init+0xac>)
 8000728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM2_Init+0xac>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM2_Init+0xac>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_TIM2_Init+0xac>)
 800073c:	f002 fb00 	bl	8002d40 <HAL_TIM_OC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000746:	f000 f93d 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_TIM2_Init+0xac>)
 800075a:	f003 f85d 	bl	8003818 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f92e 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_TIM2_Init+0xac>)
 8000780:	f002 fc38 	bl	8002ff4 <HAL_TIM_OC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800078a:	f000 f91b 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078

0800079c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b092      	sub	sp, #72	; 0x48
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	222c      	movs	r2, #44	; 0x2c
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 faf9 	bl	8004db4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007c4:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <MX_TIM16_Init+0xe8>)
 80007c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3999;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007ca:	f640 729f 	movw	r2, #3999	; 0xf9f
 80007ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <MX_TIM16_Init+0xe4>)
 80007f2:	f002 f9dd 	bl	8002bb0 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80007fc:	f000 f8e2 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000800:	481f      	ldr	r0, [pc, #124]	; (8000880 <MX_TIM16_Init+0xe4>)
 8000802:	f002 fa9d 	bl	8002d40 <HAL_TIM_OC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800080c:	f000 f8da 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_TIM16_Init+0xe4>)
 8000836:	f002 fbdd 	bl	8002ff4 <HAL_TIM_OC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000840:	f000 f8c0 	bl	80009c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_TIM16_Init+0xe4>)
 8000868:	f003 f85e 	bl	8003928 <HAL_TIMEx_ConfigBreakDeadTime>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000872:	f000 f8a7 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3748      	adds	r7, #72	; 0x48
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000c4 	.word	0x200000c4
 8000884:	40014400 	.word	0x40014400

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008cc:	f003 f8c8 	bl	8003a60 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f875 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000110 	.word	0x20000110
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0xd4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0xd4>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xd4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_GPIO_Init+0xd4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fdb9 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000970:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000982:	f000 fbe9 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f000 fbda 	bl	8001158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2028      	movs	r0, #40	; 0x28
 80009aa:	f000 fb20 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	; 0x28
 80009b0:	f000 fb39 	bl	8001026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	48000800 	.word	0x48000800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a28:	d113      	bne.n	8000a52 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_TIM_OC_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_TIM_OC_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_TIM_OC_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 fad1 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f000 faea 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_TIM_Base_MspInit+0x44>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d113      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 faad 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a94:	2019      	movs	r0, #25
 8000a96:	f000 fac6 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40014400 	.word	0x40014400
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0ac      	sub	sp, #176	; 0xb0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2288      	movs	r2, #136	; 0x88
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 f971 	bl	8004db4 <memset>
  if(huart->Instance==USART2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <HAL_UART_MspInit+0xc0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d143      	bne.n	8000b64 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fba5 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af4:	f7ff ff66 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b02:	6593      	str	r3, [r2, #88]	; 0x58
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0xc4>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b40:	2307      	movs	r3, #7
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fb02 	bl	8001158 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2026      	movs	r0, #38	; 0x26
 8000b5a:	f000 fa48 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5e:	2026      	movs	r0, #38	; 0x26
 8000b60:	f000 fa61 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	37b0      	adds	r7, #176	; 0xb0
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8f6 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bce:	f002 f90e 	bl	8002dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000c4 	.word	0x200000c4

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f002 f904 	bl	8002dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000078 	.word	0x20000078

08000bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART2_IRQHandler+0x10>)
 8000bf6:	f002 ffdf 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000110 	.word	0x20000110

08000c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c0c:	f000 fc98 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f004 f8be 	bl	8004dc4 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20018000 	.word	0x20018000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200001b0 	.word	0x200001b0
 8000c7c:	20000300 	.word	0x20000300

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f004 f87d 	bl	8004dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc77 	bl	80005c8 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ce8:	08005774 	.word	0x08005774
  ldr r2, =_sbss
 8000cec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cf0:	20000300 	.word	0x20000300

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_Init+0x3c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f962 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f80f 	bl	8000d38 <HAL_InitTick>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d26:	f7ff fe53 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f96d 	bl	8001042 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f937 	bl	8000fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200001b4 	.word	0x200001b4

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001b4 	.word	0x200001b4

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d008      	beq.n	8001084 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2204      	movs	r2, #4
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e022      	b.n	80010ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 020e 	bic.w	r2, r2, #14
 8001092:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	f003 021c 	and.w	r2, r3, #28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d005      	beq.n	80010fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e029      	b.n	800114e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 020e 	bic.w	r2, r2, #14
 8001108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f003 021c 	and.w	r2, r3, #28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    }
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e17f      	b.n	8001468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8171 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d118      	bne.n	8001238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80ac 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_GPIO_Init+0x330>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	; 0x60
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001322:	4a5a      	ldr	r2, [pc, #360]	; (800148c <HAL_GPIO_Init+0x334>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x242>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x22a>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x244>
 800139a:	2300      	movs	r3, #0
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013de:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae78 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	48001800 	.word	0x48001800
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e001      	b.n	80014ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43d9      	mvns	r1, r3
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	400b      	ands	r3, r1
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f820 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_PWREx_GetVoltageRange+0x18>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40007000 	.word	0x40007000

0800158c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159a:	d130      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a8:	d038      	beq.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d0:	e002      	b.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e4:	d102      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f2      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	d110      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e00f      	b.n	800161e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160a:	d007      	beq.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83

08001638 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3ca      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4b97      	ldr	r3, [pc, #604]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001654:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80e4 	beq.w	8001834 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_RCC_OscConfig+0x4a>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	f040 808b 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8087 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001682:	4b89      	ldr	r3, [pc, #548]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x62>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e3a2      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_RCC_OscConfig+0x7c>
 80016aa:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b2:	e005      	b.n	80016c0 <HAL_RCC_OscConfig+0x88>
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d223      	bcs.n	800170c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd55 	bl	8002178 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e383      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b73      	ldr	r3, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a72      	ldr	r2, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4968      	ldr	r1, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e025      	b.n	8001758 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170c:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4960      	ldr	r1, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	495b      	ldr	r1, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd15 	bl	8002178 <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e343      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001758:	f000 fc4a 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	4950      	ldr	r1, [pc, #320]	; (80018ac <HAL_RCC_OscConfig+0x274>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_RCC_OscConfig+0x278>)
 8001776:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001778:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fadb 	bl	8000d38 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d052      	beq.n	8001832 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	e327      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d032      	beq.n	80017fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb18 	bl	8000dd8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ac:	f7ff fb14 	bl	8000dd8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e310      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a36      	ldr	r2, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4931      	ldr	r1, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	492c      	ldr	r1, [pc, #176]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e01a      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800180a:	f7ff fae5 	bl	8000dd8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001812:	f7ff fae1 	bl	8000dd8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2dd      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x1da>
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001832:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d074      	beq.n	800192a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x21a>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d10e      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d064      	beq.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d160      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e2ba      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x24a>
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e026      	b.n	80018d0 <HAL_RCC_OscConfig+0x298>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x280>
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x298>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	080056e8 	.word	0x080056e8
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004
 80018b8:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a9f      	ldr	r2, [pc, #636]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a9c      	ldr	r2, [pc, #624]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa7e 	bl	8000dd8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fa7a 	bl	8000dd8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e276      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2a8>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fa6a 	bl	8000dd8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fa66 	bl	8000dd8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e262      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d0>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d060      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x310>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d119      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x328>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e23f      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	4973      	ldr	r1, [pc, #460]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001974:	e040      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d023      	beq.n	80019c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fa25 	bl	8000dd8 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fa21 	bl	8000dd8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e21d      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	495f      	ldr	r1, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a5c      	ldr	r2, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa01 	bl	8000dd8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f9fd 	bl	8000dd8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1f9      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f9dc 	bl	8000dd8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f9d8 	bl	8000dd8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1d4      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4c:	4a3b      	ldr	r2, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff f9bf 	bl	8000dd8 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9bb 	bl	8000dd8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1b7      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a6 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_RCC_OscConfig+0x508>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d118      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_OscConfig+0x508>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_RCC_OscConfig+0x508>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f982 	bl	8000dd8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad8:	f7ff f97e 	bl	8000dd8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e17a      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x508>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4d8>
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e029      	b.n	8001b64 <HAL_RCC_OscConfig+0x52c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x50c>
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <HAL_RCC_OscConfig+0x504>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x52c>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
 8001b44:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	4a9b      	ldr	r2, [pc, #620]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b54:	4b98      	ldr	r3, [pc, #608]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	4a97      	ldr	r2, [pc, #604]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f934 	bl	8000dd8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f930 	bl	8000dd8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e12a      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ed      	beq.n	8001b74 <HAL_RCC_OscConfig+0x53c>
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f91d 	bl	8000dd8 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f919 	bl	8000dd8 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e113      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb8:	4b7f      	ldr	r3, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ed      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a79      	ldr	r2, [pc, #484]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80fe 	beq.w	8001dde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	f040 80d0 	bne.w	8001d8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bec:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d130      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d127      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d11f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c2c:	2a07      	cmp	r2, #7
 8001c2e:	bf14      	ite	ne
 8001c30:	2201      	movne	r2, #1
 8001c32:	2200      	moveq	r2, #0
 8001c34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d06e      	beq.n	8001d40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d069      	beq.n	8001d3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0ad      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c90:	f7ff f8a2 	bl	8000dd8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f89e 	bl	8000dd8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e09a      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb6:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x784>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc6:	3a01      	subs	r2, #1
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cd0:	0212      	lsls	r2, r2, #8
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd8:	0852      	lsrs	r2, r2, #1
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0552      	lsls	r2, r2, #21
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	0652      	lsls	r2, r2, #25
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cf0:	0912      	lsrs	r2, r2, #4
 8001cf2:	0452      	lsls	r2, r2, #17
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	4930      	ldr	r1, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2d      	ldr	r2, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d14:	f7ff f860 	bl	8000dd8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f85c 	bl	8000dd8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e058      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3a:	e050      	b.n	8001dde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e04f      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d148      	bne.n	8001dde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d64:	f7ff f838 	bl	8000dd8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f834 	bl	8000dd8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e030      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x734>
 8001d8a:	e028      	b.n	8001dde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d023      	beq.n	8001dda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_RCC_OscConfig+0x780>)
 8001d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f81b 	bl	8000dd8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da4:	e00c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff f817 	bl	8000dd8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d905      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e013      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_OscConfig+0x7b0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ec      	bne.n	8001da6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x7b0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	4905      	ldr	r1, [pc, #20]	; (8001de8 <HAL_RCC_OscConfig+0x7b0>)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x7b4>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e001      	b.n	8001dde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	feeefffc 	.word	0xfeeefffc

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0e7      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0207 	bic.w	r2, r3, #7
 8001e1a:	4970      	ldr	r1, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0cf      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d908      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4960      	ldr	r1, [pc, #384]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d04c      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d121      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0a6      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8e:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d115      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e09a      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e08e      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e086      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4943      	ldr	r1, [pc, #268]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe ff7e 	bl	8000dd8 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe ff7a 	bl	8000dd8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e06e      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d010      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d208      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	492b      	ldr	r1, [pc, #172]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d210      	bcs.n	8001f66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0207 	bic.w	r2, r3, #7
 8001f4c:	4923      	ldr	r1, [pc, #140]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_ClockConfig+0x1ec>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e036      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4910      	ldr	r1, [pc, #64]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa4:	f000 f824 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	490b      	ldr	r1, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1fc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe feb5 	bl	8000d38 <HAL_InitTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	080056e8 	.word	0x080056e8
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x34>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d121      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d11e      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e005      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d102      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_GetSysClockFreq+0x110>)
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	e004      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d101      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_RCC_GetSysClockFreq+0x114>)
 8002076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d134      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0xa6>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d003      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0xac>
 8002094:	e005      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_GetSysClockFreq+0x110>)
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	e005      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_GetSysClockFreq+0x114>)
 800209e:	617b      	str	r3, [r7, #20]
      break;
 80020a0:	e002      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	617b      	str	r3, [r7, #20]
      break;
 80020a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	0e5b      	lsrs	r3, r3, #25
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	3301      	adds	r3, #1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e8:	69bb      	ldr	r3, [r7, #24]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08005700 	.word	0x08005700
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_RCC_GetHCLKFreq+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000000 	.word	0x20000000

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002124:	f7ff fff0 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	080056f8 	.word	0x080056f8

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002150:	f7ff ffda 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	080056f8 	.word	0x080056f8

08002178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002190:	f7ff f9ee 	bl	8001570 <HAL_PWREx_GetVoltageRange>
 8002194:	6178      	str	r0, [r7, #20]
 8002196:	e014      	b.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	4a24      	ldr	r2, [pc, #144]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6593      	str	r3, [r2, #88]	; 0x58
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b0:	f7ff f9de 	bl	8001570 <HAL_PWREx_GetVoltageRange>
 80021b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d10b      	bne.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d919      	bls.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2ba0      	cmp	r3, #160	; 0xa0
 80021d4:	d902      	bls.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021d6:	2302      	movs	r3, #2
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e013      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021dc:	2301      	movs	r3, #1
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e010      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d902      	bls.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021e8:	2303      	movs	r3, #3
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e00a      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d102      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e004      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d101      	bne.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0207 	bic.w	r2, r3, #7
 800220c:	4909      	ldr	r1, [pc, #36]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	40022000 	.word	0x40022000

08002238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002240:	2300      	movs	r3, #0
 8002242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002244:	2300      	movs	r3, #0
 8002246:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002250:	2b00      	cmp	r3, #0
 8002252:	d041      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800225c:	d02a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800225e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002262:	d824      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002268:	d008      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800226a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800226e:	d81e      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002278:	d010      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800227a:	e018      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a85      	ldr	r2, [pc, #532]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002288:	e015      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fabb 	bl	800280c <RCCEx_PLLSAI1_Config>
 8002296:	4603      	mov	r3, r0
 8002298:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800229a:	e00c      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3320      	adds	r3, #32
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fba6 	bl	80029f4 <RCCEx_PLLSAI2_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ac:	e003      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	74fb      	strb	r3, [r7, #19]
      break;
 80022b2:	e000      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ca:	4973      	ldr	r1, [pc, #460]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022d2:	e001      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d041      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022ec:	d02a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022f2:	d824      	bhi.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022f8:	d008      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022fe:	d81e      	bhi.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d010      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800230a:	e018      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002316:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002318:	e015      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa73 	bl	800280c <RCCEx_PLLSAI1_Config>
 8002326:	4603      	mov	r3, r0
 8002328:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232a:	e00c      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3320      	adds	r3, #32
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fb5e 	bl	80029f4 <RCCEx_PLLSAI2_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233c:	e003      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	74fb      	strb	r3, [r7, #19]
      break;
 8002342:	e000      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800234c:	4b52      	ldr	r3, [pc, #328]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800235a:	494f      	ldr	r1, [pc, #316]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002362:	e001      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a0 	beq.w	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800238a:	2300      	movs	r3, #0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b8:	f7fe fd0e 	bl	8000dd8 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023be:	e009      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7fe fd0a 	bl	8000dd8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	74fb      	strb	r3, [r7, #19]
        break;
 80023d2:	e005      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d15c      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01f      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d019      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fcc9 	bl	8000dd8 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002448:	e00b      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fcc5 	bl	8000dd8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d902      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	74fb      	strb	r3, [r7, #19]
            break;
 8002460:	e006      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ec      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002486:	4904      	ldr	r1, [pc, #16]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800248e:	e009      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
 8002494:	e006      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a4:	7c7b      	ldrb	r3, [r7, #17]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	4a9d      	ldr	r2, [pc, #628]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c2:	4b98      	ldr	r3, [pc, #608]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f023 0203 	bic.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	4994      	ldr	r1, [pc, #592]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e4:	4b8f      	ldr	r3, [pc, #572]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 020c 	bic.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	498c      	ldr	r1, [pc, #560]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002506:	4b87      	ldr	r3, [pc, #540]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4983      	ldr	r1, [pc, #524]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002528:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	497b      	ldr	r1, [pc, #492]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	4972      	ldr	r1, [pc, #456]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800256c:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	496a      	ldr	r1, [pc, #424]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	4961      	ldr	r1, [pc, #388]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b0:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	4959      	ldr	r1, [pc, #356]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	4950      	ldr	r1, [pc, #320]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f4:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	4948      	ldr	r1, [pc, #288]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002616:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	493f      	ldr	r1, [pc, #252]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d028      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002646:	4937      	ldr	r1, [pc, #220]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002656:	d106      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	60d3      	str	r3, [r2, #12]
 8002664:	e011      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266e:	d10c      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	2101      	movs	r1, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f8c8 	bl	800280c <RCCEx_PLLSAI1_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	491f      	ldr	r1, [pc, #124]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c0:	60d3      	str	r3, [r2, #12]
 80026c2:	e011      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f899 	bl	800280c <RCCEx_PLLSAI1_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02b      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002712:	d109      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a02      	ldr	r2, [pc, #8]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
 8002720:	e014      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002730:	d10c      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2101      	movs	r1, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f867 	bl	800280c <RCCEx_PLLSAI1_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02f      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002766:	4928      	ldr	r1, [pc, #160]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002776:	d10d      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	2102      	movs	r1, #2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f844 	bl	800280c <RCCEx_PLLSAI1_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d014      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
 8002792:	e011      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3320      	adds	r3, #32
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f925 	bl	80029f4 <RCCEx_PLLSAI2_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d2:	490d      	ldr	r1, [pc, #52]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f6:	4904      	ldr	r1, [pc, #16]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281a:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d10d      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
       ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
       ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d047      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e044      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d018      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x86>
 8002860:	2b03      	cmp	r3, #3
 8002862:	d825      	bhi.n	80028b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <RCCEx_PLLSAI1_Config+0x62>
 8002868:	2b02      	cmp	r3, #2
 800286a:	d009      	beq.n	8002880 <RCCEx_PLLSAI1_Config+0x74>
 800286c:	e020      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11d      	bne.n	80028b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287e:	e01a      	b.n	80028b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002880:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e013      	b.n	80028ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002892:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ae:	e006      	b.n	80028be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e004      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	430b      	orrs	r3, r1
 80028dc:	4944      	ldr	r1, [pc, #272]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d17d      	bne.n	80029e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fa70 	bl	8000dd8 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028fc:	f7fe fa6c 	bl	8000dd8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
        break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002910:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ef      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d160      	bne.n	80029e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	0211      	lsls	r1, r2, #8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	0912      	lsrs	r2, r2, #4
 8002940:	0452      	lsls	r2, r2, #17
 8002942:	430a      	orrs	r2, r1
 8002944:	492a      	ldr	r1, [pc, #168]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	610b      	str	r3, [r1, #16]
 800294a:	e027      	b.n	800299c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d112      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800295a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	0211      	lsls	r1, r2, #8
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6912      	ldr	r2, [r2, #16]
 8002968:	0852      	lsrs	r2, r2, #1
 800296a:	3a01      	subs	r2, #1
 800296c:	0552      	lsls	r2, r2, #21
 800296e:	430a      	orrs	r2, r1
 8002970:	491f      	ldr	r1, [pc, #124]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	610b      	str	r3, [r1, #16]
 8002976:	e011      	b.n	800299c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6892      	ldr	r2, [r2, #8]
 8002988:	0211      	lsls	r1, r2, #8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6952      	ldr	r2, [r2, #20]
 800298e:	0852      	lsrs	r2, r2, #1
 8002990:	3a01      	subs	r2, #1
 8002992:	0652      	lsls	r2, r2, #25
 8002994:	430a      	orrs	r2, r1
 8002996:	4916      	ldr	r1, [pc, #88]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fa16 	bl	8000dd8 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ae:	e009      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b0:	f7fe fa12 	bl	8000dd8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	73fb      	strb	r3, [r7, #15]
          break;
 80029c2:	e005      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	4904      	ldr	r1, [pc, #16]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a02:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d10d      	bne.n	8002a3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
       ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a26:	4b61      	ldr	r3, [pc, #388]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
       ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d047      	beq.n	8002aca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e044      	b.n	8002aca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d018      	beq.n	8002a7a <RCCEx_PLLSAI2_Config+0x86>
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d825      	bhi.n	8002a98 <RCCEx_PLLSAI2_Config+0xa4>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d002      	beq.n	8002a56 <RCCEx_PLLSAI2_Config+0x62>
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d009      	beq.n	8002a68 <RCCEx_PLLSAI2_Config+0x74>
 8002a54:	e020      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a56:	4b55      	ldr	r3, [pc, #340]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11d      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a66:	e01a      	b.n	8002a9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e013      	b.n	8002aa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a7a:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a96:	e006      	b.n	8002aa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e004      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	4939      	ldr	r1, [pc, #228]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d167      	bne.n	8002ba0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a35      	ldr	r2, [pc, #212]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002adc:	f7fe f97c 	bl	8000dd8 <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ae2:	e009      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ae4:	f7fe f978 	bl	8000dd8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	73fb      	strb	r3, [r7, #15]
        break;
 8002af6:	e005      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ef      	bne.n	8002ae4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d14a      	bne.n	8002ba0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d111      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6892      	ldr	r2, [r2, #8]
 8002b20:	0211      	lsls	r1, r2, #8
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68d2      	ldr	r2, [r2, #12]
 8002b26:	0912      	lsrs	r2, r2, #4
 8002b28:	0452      	lsls	r2, r2, #17
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	491f      	ldr	r1, [pc, #124]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	614b      	str	r3, [r1, #20]
 8002b32:	e011      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6912      	ldr	r2, [r2, #16]
 8002b4a:	0852      	lsrs	r2, r2, #1
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	0652      	lsls	r2, r2, #25
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4916      	ldr	r1, [pc, #88]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f938 	bl	8000dd8 <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b6a:	e009      	b.n	8002b80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b6c:	f7fe f934 	bl	8000dd8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d902      	bls.n	8002b80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b7e:	e005      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4904      	ldr	r1, [pc, #16]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e049      	b.n	8002c56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd ff42 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f000 faa2 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e04f      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01d      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d018      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x76>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d115      	bne.n	8002d02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d015      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0xb4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d011      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	e008      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e000      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	40013400 	.word	0x40013400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	00010007 	.word	0x00010007

08002d40 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e049      	b.n	8002de6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fe56 	bl	8000a18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 f9da 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01b      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f06f 0202 	mvn.w	r2, #2
 8002e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f95f 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002e3e:	e005      	b.n	8002e4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f951 	bl	80030e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f962 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01b      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0204 	mvn.w	r2, #4
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f939 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f92b 	bl	80030e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f93c 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01b      	beq.n	8002eea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0208 	mvn.w	r2, #8
 8002eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f913 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002ed6:	e005      	b.n	8002ee4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f905 	bl	80030e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f916 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01b      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0210 	mvn.w	r2, #16
 8002f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8ed 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002f22:	e005      	b.n	8002f30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8df 	bl	80030e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8f0 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0201 	mvn.w	r2, #1
 8002f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fd fb09 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fd5d 	bl	8003a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fd55 	bl	8003a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8af 	bl	8003124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00c      	beq.n	8002fea <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0220 	mvn.w	r2, #32
 8002fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fd1d 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_TIM_OC_ConfigChannel+0x1e>
 800300e:	2302      	movs	r3, #2
 8003010:	e066      	b.n	80030e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b14      	cmp	r3, #20
 800301e:	d857      	bhi.n	80030d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	0800307d 	.word	0x0800307d
 800302c:	080030d1 	.word	0x080030d1
 8003030:	080030d1 	.word	0x080030d1
 8003034:	080030d1 	.word	0x080030d1
 8003038:	0800308b 	.word	0x0800308b
 800303c:	080030d1 	.word	0x080030d1
 8003040:	080030d1 	.word	0x080030d1
 8003044:	080030d1 	.word	0x080030d1
 8003048:	08003099 	.word	0x08003099
 800304c:	080030d1 	.word	0x080030d1
 8003050:	080030d1 	.word	0x080030d1
 8003054:	080030d1 	.word	0x080030d1
 8003058:	080030a7 	.word	0x080030a7
 800305c:	080030d1 	.word	0x080030d1
 8003060:	080030d1 	.word	0x080030d1
 8003064:	080030d1 	.word	0x080030d1
 8003068:	080030b5 	.word	0x080030b5
 800306c:	080030d1 	.word	0x080030d1
 8003070:	080030d1 	.word	0x080030d1
 8003074:	080030d1 	.word	0x080030d1
 8003078:	080030c3 	.word	0x080030c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f8f2 	bl	800326c <TIM_OC1_SetConfig>
      break;
 8003088:	e025      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f97b 	bl	800338c <TIM_OC2_SetConfig>
      break;
 8003096:	e01e      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f9fe 	bl	80034a0 <TIM_OC3_SetConfig>
      break;
 80030a4:	e017      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa7f 	bl	80035b0 <TIM_OC4_SetConfig>
      break;
 80030b2:	e010      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fae2 	bl	8003684 <TIM_OC5_SetConfig>
      break;
 80030c0:	e009      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fb3f 	bl	800374c <TIM_OC6_SetConfig>
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	75fb      	strb	r3, [r7, #23]
      break;
 80030d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <TIM_Base_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d00f      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <TIM_Base_SetConfig+0x118>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <TIM_Base_SetConfig+0x11c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <TIM_Base_SetConfig+0x120>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3a      	ldr	r2, [pc, #232]	; (800325c <TIM_Base_SetConfig+0x124>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2f      	ldr	r2, [pc, #188]	; (800324c <TIM_Base_SetConfig+0x114>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d01b      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <TIM_Base_SetConfig+0x118>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d017      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <TIM_Base_SetConfig+0x11c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <TIM_Base_SetConfig+0x120>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a29      	ldr	r2, [pc, #164]	; (800325c <TIM_Base_SetConfig+0x124>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <TIM_Base_SetConfig+0x128>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <TIM_Base_SetConfig+0x130>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <TIM_Base_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <TIM_Base_SetConfig+0x124>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <TIM_Base_SetConfig+0x128>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <TIM_Base_SetConfig+0x130>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 0201 	bic.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <TIM_OC1_SetConfig+0x10c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00f      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	; (800337c <TIM_OC1_SetConfig+0x110>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <TIM_OC1_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a29      	ldr	r2, [pc, #164]	; (8003384 <TIM_OC1_SetConfig+0x118>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a28      	ldr	r2, [pc, #160]	; (8003388 <TIM_OC1_SetConfig+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <TIM_OC1_SetConfig+0x10c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1a      	ldr	r2, [pc, #104]	; (800337c <TIM_OC1_SetConfig+0x110>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <TIM_OC1_SetConfig+0x114>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <TIM_OC1_SetConfig+0x118>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <TIM_OC1_SetConfig+0x11c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0210 	bic.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <TIM_OC2_SetConfig+0x100>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x6c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_OC2_SetConfig+0x104>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <TIM_OC2_SetConfig+0x100>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <TIM_OC2_SetConfig+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <TIM_OC2_SetConfig+0x108>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <TIM_OC2_SetConfig+0x10c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <TIM_OC2_SetConfig+0x110>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d113      	bne.n	8003464 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	621a      	str	r2, [r3, #32]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <TIM_OC3_SetConfig+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x6a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <TIM_OC3_SetConfig+0xfc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <TIM_OC3_SetConfig+0x104>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <TIM_OC3_SetConfig+0x108>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <TIM_OC3_SetConfig+0x10c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d113      	bne.n	8003576 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <TIM_OC4_SetConfig+0xc0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <TIM_OC4_SetConfig+0xc4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <TIM_OC4_SetConfig+0xc8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <TIM_OC4_SetConfig+0xcc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <TIM_OC4_SetConfig+0xd0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d109      	bne.n	8003648 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <TIM_OC5_SetConfig+0xb4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <TIM_OC5_SetConfig+0xb8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <TIM_OC5_SetConfig+0xbc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <TIM_OC5_SetConfig+0xc0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <TIM_OC5_SetConfig+0xc4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d109      	bne.n	8003712 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	621a      	str	r2, [r3, #32]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40013400 	.word	0x40013400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800

0800374c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	051b      	lsls	r3, r3, #20
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <TIM_OC6_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC6_SetConfig+0xbc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC6_SetConfig+0xc0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <TIM_OC6_SetConfig+0xc4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC6_SetConfig+0xc8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d109      	bne.n	80037dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800

08003818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800382c:	2302      	movs	r3, #2
 800382e:	e068      	b.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800386a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d018      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10c      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40013400 	.word	0x40013400
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40014000 	.word	0x40014000

08003928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003940:	2302      	movs	r3, #2
 8003942:	e065      	b.n	8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d115      	bne.n	80039fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	051b      	lsls	r3, r3, #20
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40013400 	.word	0x40013400

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f812 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fe48 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb8d 	bl	80041cc <UART_SetConfig>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e01b      	b.n	8003af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fec7 	bl	8004880 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b08b      	sub	sp, #44	; 0x2c
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d147      	bne.n	8003ba2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit_IT+0x22>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e040      	b.n	8003ba4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d107      	bne.n	8003b66 <HAL_UART_Transmit_IT+0x6a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <HAL_UART_Transmit_IT+0xb4>)
 8003b62:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b64:	e002      	b.n	8003b6c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_UART_Transmit_IT+0xb8>)
 8003b6a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e6      	bne.n	8003b6c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	372c      	adds	r7, #44	; 0x2c
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	08004c4b 	.word	0x08004c4b
 8003bb4:	08004b93 	.word	0x08004b93

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	; 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003be6:	4013      	ands	r3, r2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 82ae 	beq.w	8004172 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      }
      return;
 8003c1e:	e2a8      	b.n	8004172 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8117 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 810a 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8214 	beq.w	8004176 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fe7f 	bl	8004a9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_UART_IRQHandler+0x29c>)
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f961 	bl	80010d6 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9b8 	bl	80041a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9b4 	bl	80041a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9b0 	bl	80041a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e48:	e195      	b.n	8004176 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e193      	b.n	8004176 <HAL_UART_IRQHandler+0x5be>
 8003e4e:	bf00      	nop
 8003e50:	04000120 	.word	0x04000120
 8003e54:	08004b67 	.word	0x08004b67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 814e 	bne.w	80040fe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8147 	beq.w	80040fe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8140 	beq.w	80040fe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	f040 80b8 	bne.w	8004006 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8167 	beq.w	800417a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 815f 	bcs.w	800417a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8086 	bne.w	8003fe4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1da      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e1      	bne.n	8003f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e4      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f83b 	bl	800105a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8d8 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004004:	e0b9      	b.n	800417a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004012:	b29b      	uxth	r3, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80ab 	beq.w	800417e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a6 	beq.w	800417e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
 8004056:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800405a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	623b      	str	r3, [r7, #32]
   return(result);
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800408c:	633a      	str	r2, [r7, #48]	; 0x30
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e3      	bne.n	8004068 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	617b      	str	r3, [r7, #20]
   return(result);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e4      	bne.n	80040b4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f85c 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040fc:	e03f      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <HAL_UART_IRQHandler+0x570>
 800410a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800411e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fe1c 	bl	8004d5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004126:	e02d      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01c      	beq.n	8004182 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
    }
    return;
 8004150:	e017      	b.n	8004182 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_UART_IRQHandler+0x5cc>
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fdcd 	bl	8004d0a <UART_EndTransmit_IT>
    return;
 8004170:	e008      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004172:	bf00      	nop
 8004174:	e006      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
      return;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
      return;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004182:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004184:	37e8      	adds	r7, #232	; 0xe8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop

0800418c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b08a      	sub	sp, #40	; 0x28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4ba4      	ldr	r3, [pc, #656]	; (800448c <UART_SetConfig+0x2c0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004204:	430b      	orrs	r3, r1
 8004206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a99      	ldr	r2, [pc, #612]	; (8004490 <UART_SetConfig+0x2c4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	4313      	orrs	r3, r2
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a90      	ldr	r2, [pc, #576]	; (8004494 <UART_SetConfig+0x2c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d126      	bne.n	80042a4 <UART_SetConfig+0xd8>
 8004256:	4b90      	ldr	r3, [pc, #576]	; (8004498 <UART_SetConfig+0x2cc>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0xd0>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0xa0>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428d 	.word	0x0800428d
 8004274:	08004285 	.word	0x08004285
 8004278:	08004295 	.word	0x08004295
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e116      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e112      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e10e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e10a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e106      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7c      	ldr	r2, [pc, #496]	; (800449c <UART_SetConfig+0x2d0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d138      	bne.n	8004320 <UART_SetConfig+0x154>
 80042ae:	4b7a      	ldr	r3, [pc, #488]	; (8004498 <UART_SetConfig+0x2cc>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d82d      	bhi.n	8004318 <UART_SetConfig+0x14c>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0xf8>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004301 	.word	0x08004301
 80042e8:	08004319 	.word	0x08004319
 80042ec:	08004319 	.word	0x08004319
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004311 	.word	0x08004311
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e0d8      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004300:	2302      	movs	r3, #2
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e0d4      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e0d0      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0cc      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e0c8      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a5e      	ldr	r2, [pc, #376]	; (80044a0 <UART_SetConfig+0x2d4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d125      	bne.n	8004376 <UART_SetConfig+0x1aa>
 800432a:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <UART_SetConfig+0x2cc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d016      	beq.n	8004366 <UART_SetConfig+0x19a>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d818      	bhi.n	800436e <UART_SetConfig+0x1a2>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d00a      	beq.n	8004356 <UART_SetConfig+0x18a>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d814      	bhi.n	800436e <UART_SetConfig+0x1a2>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <UART_SetConfig+0x182>
 8004348:	2b10      	cmp	r3, #16
 800434a:	d008      	beq.n	800435e <UART_SetConfig+0x192>
 800434c:	e00f      	b.n	800436e <UART_SetConfig+0x1a2>
 800434e:	2300      	movs	r3, #0
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004354:	e0ad      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004356:	2302      	movs	r3, #2
 8004358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435c:	e0a9      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800435e:	2304      	movs	r3, #4
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004364:	e0a5      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004366:	2308      	movs	r3, #8
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436c:	e0a1      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800436e:	2310      	movs	r3, #16
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004374:	e09d      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <UART_SetConfig+0x2d8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d125      	bne.n	80043cc <UART_SetConfig+0x200>
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <UART_SetConfig+0x2cc>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d016      	beq.n	80043bc <UART_SetConfig+0x1f0>
 800438e:	2bc0      	cmp	r3, #192	; 0xc0
 8004390:	d818      	bhi.n	80043c4 <UART_SetConfig+0x1f8>
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d00a      	beq.n	80043ac <UART_SetConfig+0x1e0>
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d814      	bhi.n	80043c4 <UART_SetConfig+0x1f8>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <UART_SetConfig+0x1d8>
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d008      	beq.n	80043b4 <UART_SetConfig+0x1e8>
 80043a2:	e00f      	b.n	80043c4 <UART_SetConfig+0x1f8>
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e082      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e07e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e07a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e076      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e072      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <UART_SetConfig+0x2dc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d12a      	bne.n	800442c <UART_SetConfig+0x260>
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d01a      	beq.n	800441c <UART_SetConfig+0x250>
 80043e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ea:	d81b      	bhi.n	8004424 <UART_SetConfig+0x258>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d00c      	beq.n	800440c <UART_SetConfig+0x240>
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f6:	d815      	bhi.n	8004424 <UART_SetConfig+0x258>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <UART_SetConfig+0x238>
 80043fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004400:	d008      	beq.n	8004414 <UART_SetConfig+0x248>
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x258>
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e052      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e04e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e04a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e046      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e042      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <UART_SetConfig+0x2c4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d13a      	bne.n	80044ac <UART_SetConfig+0x2e0>
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <UART_SetConfig+0x2cc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004444:	d01a      	beq.n	800447c <UART_SetConfig+0x2b0>
 8004446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0x2b8>
 800444c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0x2a0>
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004456:	d815      	bhi.n	8004484 <UART_SetConfig+0x2b8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x298>
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d008      	beq.n	8004474 <UART_SetConfig+0x2a8>
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x2b8>
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e022      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e01e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e01a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e016      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e012      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800448c:	efff69f3 	.word	0xefff69f3
 8004490:	40008000 	.word	0x40008000
 8004494:	40013800 	.word	0x40013800
 8004498:	40021000 	.word	0x40021000
 800449c:	40004400 	.word	0x40004400
 80044a0:	40004800 	.word	0x40004800
 80044a4:	40004c00 	.word	0x40004c00
 80044a8:	40005000 	.word	0x40005000
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a9f      	ldr	r2, [pc, #636]	; (8004734 <UART_SetConfig+0x568>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d17a      	bne.n	80045b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d824      	bhi.n	800450e <UART_SetConfig+0x342>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x300>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800450f 	.word	0x0800450f
 80044ec:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fd fe16 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <UART_SetConfig+0x56c>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fd fd77 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80fb 	beq.w	8004718 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	429a      	cmp	r2, r3
 8004530:	d305      	bcc.n	800453e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004544:	e0e8      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2200      	movs	r2, #0
 800454a:	461c      	mov	r4, r3
 800454c:	4615      	mov	r5, r2
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	022b      	lsls	r3, r5, #8
 8004558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800455c:	0222      	lsls	r2, r4, #8
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	6849      	ldr	r1, [r1, #4]
 8004562:	0849      	lsrs	r1, r1, #1
 8004564:	2000      	movs	r0, #0
 8004566:	4688      	mov	r8, r1
 8004568:	4681      	mov	r9, r0
 800456a:	eb12 0a08 	adds.w	sl, r2, r8
 800456e:	eb43 0b09 	adc.w	fp, r3, r9
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004580:	4650      	mov	r0, sl
 8004582:	4659      	mov	r1, fp
 8004584:	f7fb fe74 	bl	8000270 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004596:	d308      	bcc.n	80045aa <UART_SetConfig+0x3de>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d204      	bcs.n	80045aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e0b6      	b.n	8004718 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045b0:	e0b2      	b.n	8004718 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d15e      	bne.n	800467a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d828      	bhi.n	8004616 <UART_SetConfig+0x44a>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x400>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004601 	.word	0x08004601
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004607 	.word	0x08004607
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004617 	.word	0x08004617
 80045e8:	08004617 	.word	0x08004617
 80045ec:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7fd fd96 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e014      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fd fda8 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 80045fc:	61f8      	str	r0, [r7, #28]
        break;
 80045fe:	e010      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <UART_SetConfig+0x56c>)
 8004602:	61fb      	str	r3, [r7, #28]
        break;
 8004604:	e00d      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fd fcf3 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 800460a:	61f8      	str	r0, [r7, #28]
        break;
 800460c:	e009      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	61fb      	str	r3, [r7, #28]
        break;
 8004614:	e005      	b.n	8004622 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d077      	beq.n	8004718 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005a      	lsls	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d916      	bls.n	8004672 <UART_SetConfig+0x4a6>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d212      	bcs.n	8004672 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f023 030f 	bic.w	r3, r3, #15
 8004654:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	b29a      	uxth	r2, r3
 8004662:	8afb      	ldrh	r3, [r7, #22]
 8004664:	4313      	orrs	r3, r2
 8004666:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	8afa      	ldrh	r2, [r7, #22]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e052      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004678:	e04e      	b.n	8004718 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800467a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467e:	2b08      	cmp	r3, #8
 8004680:	d827      	bhi.n	80046d2 <UART_SetConfig+0x506>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <UART_SetConfig+0x4bc>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046d3 	.word	0x080046d3
 8004698:	080046c3 	.word	0x080046c3
 800469c:	080046d3 	.word	0x080046d3
 80046a0:	080046d3 	.word	0x080046d3
 80046a4:	080046d3 	.word	0x080046d3
 80046a8:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7fd fd38 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
        break;
 80046b2:	e014      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7fd fd4a 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e010      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <UART_SetConfig+0x56c>)
 80046be:	61fb      	str	r3, [r7, #28]
        break;
 80046c0:	e00d      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fd fc95 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 80046c6:	61f8      	str	r0, [r7, #28]
        break;
 80046c8:	e009      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	61fb      	str	r3, [r7, #28]
        break;
 80046d0:	e005      	b.n	80046de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046dc:	bf00      	nop
    }

    if (pclk != 0U)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d019      	beq.n	8004718 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	085a      	lsrs	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	441a      	add	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d909      	bls.n	8004712 <UART_SetConfig+0x546>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004704:	d205      	bcs.n	8004712 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
 8004710:	e002      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004724:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004732:	bf00      	nop
 8004734:	40008000 	.word	0x40008000
 8004738:	00f42400 	.word	0x00f42400

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d10a      	bne.n	8004852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b098      	sub	sp, #96	; 0x60
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004890:	f7fc faa2 	bl	8000dd8 <HAL_GetTick>
 8004894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d12e      	bne.n	8004902 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f88c 	bl	80049d0 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d021      	beq.n	8004902 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d2:	653b      	str	r3, [r7, #80]	; 0x50
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
 80048de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e062      	b.n	80049c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d149      	bne.n	80049a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f856 	bl	80049d0 <UART_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d03c      	beq.n	80049a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	623b      	str	r3, [r7, #32]
   return(result);
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	633b      	str	r3, [r7, #48]	; 0x30
 800494a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e6      	bne.n	800492a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	60fb      	str	r3, [r7, #12]
   return(result);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800497c:	61fa      	str	r2, [r7, #28]
 800497e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	617b      	str	r3, [r7, #20]
   return(result);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e011      	b.n	80049c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3758      	adds	r7, #88	; 0x58
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	e049      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d045      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fc f9f5 	bl	8000dd8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e048      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d031      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d110      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f838 	bl	8004a9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2208      	movs	r2, #8
 8004a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e029      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a50:	d111      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f81e 	bl	8004a9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0a6      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b095      	sub	sp, #84	; 0x54
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3308      	adds	r3, #8
 8004ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d118      	bne.n	8004b46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0310 	bic.w	r3, r3, #16
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e6      	bne.n	8004b14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b5a:	bf00      	nop
 8004b5c:	3754      	adds	r7, #84	; 0x54
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fb0b 	bl	80041a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b08f      	sub	sp, #60	; 0x3c
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d14d      	bne.n	8004c3e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d132      	bne.n	8004c14 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e6      	bne.n	8004bae <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6979      	ldr	r1, [r7, #20]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c12:	e014      	b.n	8004c3e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c3e:	bf00      	nop
 8004c40:	373c      	adds	r7, #60	; 0x3c
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b091      	sub	sp, #68	; 0x44
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c56:	2b21      	cmp	r3, #33	; 0x21
 8004c58:	d151      	bne.n	8004cfe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d132      	bne.n	8004ccc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	623b      	str	r3, [r7, #32]
   return(result);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
 8004c86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e6      	bne.n	8004c66 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004cca:	e018      	b.n	8004cfe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004cfe:	bf00      	nop
 8004d00:	3744      	adds	r7, #68	; 0x44
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fa1b 	bl	800418c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <siprintf>:
 8004d74:	b40e      	push	{r1, r2, r3}
 8004d76:	b500      	push	{lr}
 8004d78:	b09c      	sub	sp, #112	; 0x70
 8004d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d7c:	9002      	str	r0, [sp, #8]
 8004d7e:	9006      	str	r0, [sp, #24]
 8004d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d84:	4809      	ldr	r0, [pc, #36]	; (8004dac <siprintf+0x38>)
 8004d86:	9107      	str	r1, [sp, #28]
 8004d88:	9104      	str	r1, [sp, #16]
 8004d8a:	4909      	ldr	r1, [pc, #36]	; (8004db0 <siprintf+0x3c>)
 8004d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d90:	9105      	str	r1, [sp, #20]
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	a902      	add	r1, sp, #8
 8004d98:	f000 f992 	bl	80050c0 <_svfiprintf_r>
 8004d9c:	9b02      	ldr	r3, [sp, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	b01c      	add	sp, #112	; 0x70
 8004da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da8:	b003      	add	sp, #12
 8004daa:	4770      	bx	lr
 8004dac:	20000058 	.word	0x20000058
 8004db0:	ffff0208 	.word	0xffff0208

08004db4 <memset>:
 8004db4:	4402      	add	r2, r0
 8004db6:	4603      	mov	r3, r0
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <__errno>:
 8004dc4:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <__errno+0x8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000058 	.word	0x20000058

08004dd0 <__libc_init_array>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4d0d      	ldr	r5, [pc, #52]	; (8004e08 <__libc_init_array+0x38>)
 8004dd4:	4c0d      	ldr	r4, [pc, #52]	; (8004e0c <__libc_init_array+0x3c>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	d109      	bne.n	8004df4 <__libc_init_array+0x24>
 8004de0:	4d0b      	ldr	r5, [pc, #44]	; (8004e10 <__libc_init_array+0x40>)
 8004de2:	4c0c      	ldr	r4, [pc, #48]	; (8004e14 <__libc_init_array+0x44>)
 8004de4:	f000 fc6a 	bl	80056bc <_init>
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	2600      	movs	r6, #0
 8004dee:	42a6      	cmp	r6, r4
 8004df0:	d105      	bne.n	8004dfe <__libc_init_array+0x2e>
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df8:	4798      	blx	r3
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7ee      	b.n	8004ddc <__libc_init_array+0xc>
 8004dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e02:	4798      	blx	r3
 8004e04:	3601      	adds	r6, #1
 8004e06:	e7f2      	b.n	8004dee <__libc_init_array+0x1e>
 8004e08:	0800576c 	.word	0x0800576c
 8004e0c:	0800576c 	.word	0x0800576c
 8004e10:	0800576c 	.word	0x0800576c
 8004e14:	08005770 	.word	0x08005770

08004e18 <__retarget_lock_acquire_recursive>:
 8004e18:	4770      	bx	lr

08004e1a <__retarget_lock_release_recursive>:
 8004e1a:	4770      	bx	lr

08004e1c <_free_r>:
 8004e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d044      	beq.n	8004eac <_free_r+0x90>
 8004e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e26:	9001      	str	r0, [sp, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e2e:	bfb8      	it	lt
 8004e30:	18e4      	addlt	r4, r4, r3
 8004e32:	f000 f8df 	bl	8004ff4 <__malloc_lock>
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <_free_r+0x94>)
 8004e38:	9801      	ldr	r0, [sp, #4]
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	b933      	cbnz	r3, 8004e4c <_free_r+0x30>
 8004e3e:	6063      	str	r3, [r4, #4]
 8004e40:	6014      	str	r4, [r2, #0]
 8004e42:	b003      	add	sp, #12
 8004e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e48:	f000 b8da 	b.w	8005000 <__malloc_unlock>
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	d908      	bls.n	8004e62 <_free_r+0x46>
 8004e50:	6825      	ldr	r5, [r4, #0]
 8004e52:	1961      	adds	r1, r4, r5
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf01      	itttt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	1949      	addeq	r1, r1, r5
 8004e5e:	6021      	streq	r1, [r4, #0]
 8004e60:	e7ed      	b.n	8004e3e <_free_r+0x22>
 8004e62:	461a      	mov	r2, r3
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b10b      	cbz	r3, 8004e6c <_free_r+0x50>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d9fa      	bls.n	8004e62 <_free_r+0x46>
 8004e6c:	6811      	ldr	r1, [r2, #0]
 8004e6e:	1855      	adds	r5, r2, r1
 8004e70:	42a5      	cmp	r5, r4
 8004e72:	d10b      	bne.n	8004e8c <_free_r+0x70>
 8004e74:	6824      	ldr	r4, [r4, #0]
 8004e76:	4421      	add	r1, r4
 8004e78:	1854      	adds	r4, r2, r1
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	d1e0      	bne.n	8004e42 <_free_r+0x26>
 8004e80:	681c      	ldr	r4, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	6053      	str	r3, [r2, #4]
 8004e86:	440c      	add	r4, r1
 8004e88:	6014      	str	r4, [r2, #0]
 8004e8a:	e7da      	b.n	8004e42 <_free_r+0x26>
 8004e8c:	d902      	bls.n	8004e94 <_free_r+0x78>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	6003      	str	r3, [r0, #0]
 8004e92:	e7d6      	b.n	8004e42 <_free_r+0x26>
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1961      	adds	r1, r4, r5
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf04      	itt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	6063      	str	r3, [r4, #4]
 8004ea2:	bf04      	itt	eq
 8004ea4:	1949      	addeq	r1, r1, r5
 8004ea6:	6021      	streq	r1, [r4, #0]
 8004ea8:	6054      	str	r4, [r2, #4]
 8004eaa:	e7ca      	b.n	8004e42 <_free_r+0x26>
 8004eac:	b003      	add	sp, #12
 8004eae:	bd30      	pop	{r4, r5, pc}
 8004eb0:	200002f8 	.word	0x200002f8

08004eb4 <sbrk_aligned>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4e0e      	ldr	r6, [pc, #56]	; (8004ef0 <sbrk_aligned+0x3c>)
 8004eb8:	460c      	mov	r4, r1
 8004eba:	6831      	ldr	r1, [r6, #0]
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	b911      	cbnz	r1, 8004ec6 <sbrk_aligned+0x12>
 8004ec0:	f000 fba6 	bl	8005610 <_sbrk_r>
 8004ec4:	6030      	str	r0, [r6, #0]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 fba1 	bl	8005610 <_sbrk_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d00a      	beq.n	8004ee8 <sbrk_aligned+0x34>
 8004ed2:	1cc4      	adds	r4, r0, #3
 8004ed4:	f024 0403 	bic.w	r4, r4, #3
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d007      	beq.n	8004eec <sbrk_aligned+0x38>
 8004edc:	1a21      	subs	r1, r4, r0
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fb96 	bl	8005610 <_sbrk_r>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d101      	bne.n	8004eec <sbrk_aligned+0x38>
 8004ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eec:	4620      	mov	r0, r4
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	200002fc 	.word	0x200002fc

08004ef4 <_malloc_r>:
 8004ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef8:	1ccd      	adds	r5, r1, #3
 8004efa:	f025 0503 	bic.w	r5, r5, #3
 8004efe:	3508      	adds	r5, #8
 8004f00:	2d0c      	cmp	r5, #12
 8004f02:	bf38      	it	cc
 8004f04:	250c      	movcc	r5, #12
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	4607      	mov	r7, r0
 8004f0a:	db01      	blt.n	8004f10 <_malloc_r+0x1c>
 8004f0c:	42a9      	cmp	r1, r5
 8004f0e:	d905      	bls.n	8004f1c <_malloc_r+0x28>
 8004f10:	230c      	movs	r3, #12
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	2600      	movs	r6, #0
 8004f16:	4630      	mov	r0, r6
 8004f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ff0 <_malloc_r+0xfc>
 8004f20:	f000 f868 	bl	8004ff4 <__malloc_lock>
 8004f24:	f8d8 3000 	ldr.w	r3, [r8]
 8004f28:	461c      	mov	r4, r3
 8004f2a:	bb5c      	cbnz	r4, 8004f84 <_malloc_r+0x90>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4638      	mov	r0, r7
 8004f30:	f7ff ffc0 	bl	8004eb4 <sbrk_aligned>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	4604      	mov	r4, r0
 8004f38:	d155      	bne.n	8004fe6 <_malloc_r+0xf2>
 8004f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f3e:	4626      	mov	r6, r4
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	d145      	bne.n	8004fd0 <_malloc_r+0xdc>
 8004f44:	2c00      	cmp	r4, #0
 8004f46:	d048      	beq.n	8004fda <_malloc_r+0xe6>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	eb04 0903 	add.w	r9, r4, r3
 8004f52:	f000 fb5d 	bl	8005610 <_sbrk_r>
 8004f56:	4581      	cmp	r9, r0
 8004f58:	d13f      	bne.n	8004fda <_malloc_r+0xe6>
 8004f5a:	6821      	ldr	r1, [r4, #0]
 8004f5c:	1a6d      	subs	r5, r5, r1
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff ffa7 	bl	8004eb4 <sbrk_aligned>
 8004f66:	3001      	adds	r0, #1
 8004f68:	d037      	beq.n	8004fda <_malloc_r+0xe6>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	442b      	add	r3, r5
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	f8d8 3000 	ldr.w	r3, [r8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d038      	beq.n	8004fea <_malloc_r+0xf6>
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	42a2      	cmp	r2, r4
 8004f7c:	d12b      	bne.n	8004fd6 <_malloc_r+0xe2>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	e00f      	b.n	8004fa4 <_malloc_r+0xb0>
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	1b52      	subs	r2, r2, r5
 8004f88:	d41f      	bmi.n	8004fca <_malloc_r+0xd6>
 8004f8a:	2a0b      	cmp	r2, #11
 8004f8c:	d917      	bls.n	8004fbe <_malloc_r+0xca>
 8004f8e:	1961      	adds	r1, r4, r5
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	bf18      	it	ne
 8004f96:	6059      	strne	r1, [r3, #4]
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	bf08      	it	eq
 8004f9c:	f8c8 1000 	streq.w	r1, [r8]
 8004fa0:	5162      	str	r2, [r4, r5]
 8004fa2:	604b      	str	r3, [r1, #4]
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f104 060b 	add.w	r6, r4, #11
 8004faa:	f000 f829 	bl	8005000 <__malloc_unlock>
 8004fae:	f026 0607 	bic.w	r6, r6, #7
 8004fb2:	1d23      	adds	r3, r4, #4
 8004fb4:	1af2      	subs	r2, r6, r3
 8004fb6:	d0ae      	beq.n	8004f16 <_malloc_r+0x22>
 8004fb8:	1b9b      	subs	r3, r3, r6
 8004fba:	50a3      	str	r3, [r4, r2]
 8004fbc:	e7ab      	b.n	8004f16 <_malloc_r+0x22>
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	6862      	ldr	r2, [r4, #4]
 8004fc2:	d1dd      	bne.n	8004f80 <_malloc_r+0x8c>
 8004fc4:	f8c8 2000 	str.w	r2, [r8]
 8004fc8:	e7ec      	b.n	8004fa4 <_malloc_r+0xb0>
 8004fca:	4623      	mov	r3, r4
 8004fcc:	6864      	ldr	r4, [r4, #4]
 8004fce:	e7ac      	b.n	8004f2a <_malloc_r+0x36>
 8004fd0:	4634      	mov	r4, r6
 8004fd2:	6876      	ldr	r6, [r6, #4]
 8004fd4:	e7b4      	b.n	8004f40 <_malloc_r+0x4c>
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	e7cc      	b.n	8004f74 <_malloc_r+0x80>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f000 f80e 	bl	8005000 <__malloc_unlock>
 8004fe4:	e797      	b.n	8004f16 <_malloc_r+0x22>
 8004fe6:	6025      	str	r5, [r4, #0]
 8004fe8:	e7dc      	b.n	8004fa4 <_malloc_r+0xb0>
 8004fea:	605b      	str	r3, [r3, #4]
 8004fec:	deff      	udf	#255	; 0xff
 8004fee:	bf00      	nop
 8004ff0:	200002f8 	.word	0x200002f8

08004ff4 <__malloc_lock>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__malloc_lock+0x8>)
 8004ff6:	f7ff bf0f 	b.w	8004e18 <__retarget_lock_acquire_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	200002f4 	.word	0x200002f4

08005000 <__malloc_unlock>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__malloc_unlock+0x8>)
 8005002:	f7ff bf0a 	b.w	8004e1a <__retarget_lock_release_recursive>
 8005006:	bf00      	nop
 8005008:	200002f4 	.word	0x200002f4

0800500c <__ssputs_r>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	688e      	ldr	r6, [r1, #8]
 8005012:	461f      	mov	r7, r3
 8005014:	42be      	cmp	r6, r7
 8005016:	680b      	ldr	r3, [r1, #0]
 8005018:	4682      	mov	sl, r0
 800501a:	460c      	mov	r4, r1
 800501c:	4690      	mov	r8, r2
 800501e:	d82c      	bhi.n	800507a <__ssputs_r+0x6e>
 8005020:	898a      	ldrh	r2, [r1, #12]
 8005022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005026:	d026      	beq.n	8005076 <__ssputs_r+0x6a>
 8005028:	6965      	ldr	r5, [r4, #20]
 800502a:	6909      	ldr	r1, [r1, #16]
 800502c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005030:	eba3 0901 	sub.w	r9, r3, r1
 8005034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005038:	1c7b      	adds	r3, r7, #1
 800503a:	444b      	add	r3, r9
 800503c:	106d      	asrs	r5, r5, #1
 800503e:	429d      	cmp	r5, r3
 8005040:	bf38      	it	cc
 8005042:	461d      	movcc	r5, r3
 8005044:	0553      	lsls	r3, r2, #21
 8005046:	d527      	bpl.n	8005098 <__ssputs_r+0x8c>
 8005048:	4629      	mov	r1, r5
 800504a:	f7ff ff53 	bl	8004ef4 <_malloc_r>
 800504e:	4606      	mov	r6, r0
 8005050:	b360      	cbz	r0, 80050ac <__ssputs_r+0xa0>
 8005052:	6921      	ldr	r1, [r4, #16]
 8005054:	464a      	mov	r2, r9
 8005056:	f000 faeb 	bl	8005630 <memcpy>
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	6126      	str	r6, [r4, #16]
 8005068:	6165      	str	r5, [r4, #20]
 800506a:	444e      	add	r6, r9
 800506c:	eba5 0509 	sub.w	r5, r5, r9
 8005070:	6026      	str	r6, [r4, #0]
 8005072:	60a5      	str	r5, [r4, #8]
 8005074:	463e      	mov	r6, r7
 8005076:	42be      	cmp	r6, r7
 8005078:	d900      	bls.n	800507c <__ssputs_r+0x70>
 800507a:	463e      	mov	r6, r7
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	4632      	mov	r2, r6
 8005080:	4641      	mov	r1, r8
 8005082:	f000 faab 	bl	80055dc <memmove>
 8005086:	68a3      	ldr	r3, [r4, #8]
 8005088:	1b9b      	subs	r3, r3, r6
 800508a:	60a3      	str	r3, [r4, #8]
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	4433      	add	r3, r6
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	2000      	movs	r0, #0
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	462a      	mov	r2, r5
 800509a:	f000 fad7 	bl	800564c <_realloc_r>
 800509e:	4606      	mov	r6, r0
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d1e0      	bne.n	8005066 <__ssputs_r+0x5a>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	4650      	mov	r0, sl
 80050a8:	f7ff feb8 	bl	8004e1c <_free_r>
 80050ac:	230c      	movs	r3, #12
 80050ae:	f8ca 3000 	str.w	r3, [sl]
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b8:	81a3      	strh	r3, [r4, #12]
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	e7e9      	b.n	8005094 <__ssputs_r+0x88>

080050c0 <_svfiprintf_r>:
 80050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	4698      	mov	r8, r3
 80050c6:	898b      	ldrh	r3, [r1, #12]
 80050c8:	061b      	lsls	r3, r3, #24
 80050ca:	b09d      	sub	sp, #116	; 0x74
 80050cc:	4607      	mov	r7, r0
 80050ce:	460d      	mov	r5, r1
 80050d0:	4614      	mov	r4, r2
 80050d2:	d50e      	bpl.n	80050f2 <_svfiprintf_r+0x32>
 80050d4:	690b      	ldr	r3, [r1, #16]
 80050d6:	b963      	cbnz	r3, 80050f2 <_svfiprintf_r+0x32>
 80050d8:	2140      	movs	r1, #64	; 0x40
 80050da:	f7ff ff0b 	bl	8004ef4 <_malloc_r>
 80050de:	6028      	str	r0, [r5, #0]
 80050e0:	6128      	str	r0, [r5, #16]
 80050e2:	b920      	cbnz	r0, 80050ee <_svfiprintf_r+0x2e>
 80050e4:	230c      	movs	r3, #12
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ec:	e0d0      	b.n	8005290 <_svfiprintf_r+0x1d0>
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	616b      	str	r3, [r5, #20]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9309      	str	r3, [sp, #36]	; 0x24
 80050f6:	2320      	movs	r3, #32
 80050f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005100:	2330      	movs	r3, #48	; 0x30
 8005102:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052a8 <_svfiprintf_r+0x1e8>
 8005106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800510a:	f04f 0901 	mov.w	r9, #1
 800510e:	4623      	mov	r3, r4
 8005110:	469a      	mov	sl, r3
 8005112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005116:	b10a      	cbz	r2, 800511c <_svfiprintf_r+0x5c>
 8005118:	2a25      	cmp	r2, #37	; 0x25
 800511a:	d1f9      	bne.n	8005110 <_svfiprintf_r+0x50>
 800511c:	ebba 0b04 	subs.w	fp, sl, r4
 8005120:	d00b      	beq.n	800513a <_svfiprintf_r+0x7a>
 8005122:	465b      	mov	r3, fp
 8005124:	4622      	mov	r2, r4
 8005126:	4629      	mov	r1, r5
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ff6f 	bl	800500c <__ssputs_r>
 800512e:	3001      	adds	r0, #1
 8005130:	f000 80a9 	beq.w	8005286 <_svfiprintf_r+0x1c6>
 8005134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005136:	445a      	add	r2, fp
 8005138:	9209      	str	r2, [sp, #36]	; 0x24
 800513a:	f89a 3000 	ldrb.w	r3, [sl]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80a1 	beq.w	8005286 <_svfiprintf_r+0x1c6>
 8005144:	2300      	movs	r3, #0
 8005146:	f04f 32ff 	mov.w	r2, #4294967295
 800514a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800514e:	f10a 0a01 	add.w	sl, sl, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	9307      	str	r3, [sp, #28]
 8005156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800515a:	931a      	str	r3, [sp, #104]	; 0x68
 800515c:	4654      	mov	r4, sl
 800515e:	2205      	movs	r2, #5
 8005160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005164:	4850      	ldr	r0, [pc, #320]	; (80052a8 <_svfiprintf_r+0x1e8>)
 8005166:	f7fb f833 	bl	80001d0 <memchr>
 800516a:	9a04      	ldr	r2, [sp, #16]
 800516c:	b9d8      	cbnz	r0, 80051a6 <_svfiprintf_r+0xe6>
 800516e:	06d0      	lsls	r0, r2, #27
 8005170:	bf44      	itt	mi
 8005172:	2320      	movmi	r3, #32
 8005174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005178:	0711      	lsls	r1, r2, #28
 800517a:	bf44      	itt	mi
 800517c:	232b      	movmi	r3, #43	; 0x2b
 800517e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005182:	f89a 3000 	ldrb.w	r3, [sl]
 8005186:	2b2a      	cmp	r3, #42	; 0x2a
 8005188:	d015      	beq.n	80051b6 <_svfiprintf_r+0xf6>
 800518a:	9a07      	ldr	r2, [sp, #28]
 800518c:	4654      	mov	r4, sl
 800518e:	2000      	movs	r0, #0
 8005190:	f04f 0c0a 	mov.w	ip, #10
 8005194:	4621      	mov	r1, r4
 8005196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519a:	3b30      	subs	r3, #48	; 0x30
 800519c:	2b09      	cmp	r3, #9
 800519e:	d94d      	bls.n	800523c <_svfiprintf_r+0x17c>
 80051a0:	b1b0      	cbz	r0, 80051d0 <_svfiprintf_r+0x110>
 80051a2:	9207      	str	r2, [sp, #28]
 80051a4:	e014      	b.n	80051d0 <_svfiprintf_r+0x110>
 80051a6:	eba0 0308 	sub.w	r3, r0, r8
 80051aa:	fa09 f303 	lsl.w	r3, r9, r3
 80051ae:	4313      	orrs	r3, r2
 80051b0:	9304      	str	r3, [sp, #16]
 80051b2:	46a2      	mov	sl, r4
 80051b4:	e7d2      	b.n	800515c <_svfiprintf_r+0x9c>
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	9103      	str	r1, [sp, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfbb      	ittet	lt
 80051c2:	425b      	neglt	r3, r3
 80051c4:	f042 0202 	orrlt.w	r2, r2, #2
 80051c8:	9307      	strge	r3, [sp, #28]
 80051ca:	9307      	strlt	r3, [sp, #28]
 80051cc:	bfb8      	it	lt
 80051ce:	9204      	strlt	r2, [sp, #16]
 80051d0:	7823      	ldrb	r3, [r4, #0]
 80051d2:	2b2e      	cmp	r3, #46	; 0x2e
 80051d4:	d10c      	bne.n	80051f0 <_svfiprintf_r+0x130>
 80051d6:	7863      	ldrb	r3, [r4, #1]
 80051d8:	2b2a      	cmp	r3, #42	; 0x2a
 80051da:	d134      	bne.n	8005246 <_svfiprintf_r+0x186>
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	9203      	str	r2, [sp, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfb8      	it	lt
 80051e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80051ec:	3402      	adds	r4, #2
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052b8 <_svfiprintf_r+0x1f8>
 80051f4:	7821      	ldrb	r1, [r4, #0]
 80051f6:	2203      	movs	r2, #3
 80051f8:	4650      	mov	r0, sl
 80051fa:	f7fa ffe9 	bl	80001d0 <memchr>
 80051fe:	b138      	cbz	r0, 8005210 <_svfiprintf_r+0x150>
 8005200:	9b04      	ldr	r3, [sp, #16]
 8005202:	eba0 000a 	sub.w	r0, r0, sl
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	4082      	lsls	r2, r0
 800520a:	4313      	orrs	r3, r2
 800520c:	3401      	adds	r4, #1
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005214:	4825      	ldr	r0, [pc, #148]	; (80052ac <_svfiprintf_r+0x1ec>)
 8005216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800521a:	2206      	movs	r2, #6
 800521c:	f7fa ffd8 	bl	80001d0 <memchr>
 8005220:	2800      	cmp	r0, #0
 8005222:	d038      	beq.n	8005296 <_svfiprintf_r+0x1d6>
 8005224:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <_svfiprintf_r+0x1f0>)
 8005226:	bb1b      	cbnz	r3, 8005270 <_svfiprintf_r+0x1b0>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	3307      	adds	r3, #7
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	3308      	adds	r3, #8
 8005232:	9303      	str	r3, [sp, #12]
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	4433      	add	r3, r6
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	e768      	b.n	800510e <_svfiprintf_r+0x4e>
 800523c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005240:	460c      	mov	r4, r1
 8005242:	2001      	movs	r0, #1
 8005244:	e7a6      	b.n	8005194 <_svfiprintf_r+0xd4>
 8005246:	2300      	movs	r3, #0
 8005248:	3401      	adds	r4, #1
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 0c0a 	mov.w	ip, #10
 8005252:	4620      	mov	r0, r4
 8005254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005258:	3a30      	subs	r2, #48	; 0x30
 800525a:	2a09      	cmp	r2, #9
 800525c:	d903      	bls.n	8005266 <_svfiprintf_r+0x1a6>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0c6      	beq.n	80051f0 <_svfiprintf_r+0x130>
 8005262:	9105      	str	r1, [sp, #20]
 8005264:	e7c4      	b.n	80051f0 <_svfiprintf_r+0x130>
 8005266:	fb0c 2101 	mla	r1, ip, r1, r2
 800526a:	4604      	mov	r4, r0
 800526c:	2301      	movs	r3, #1
 800526e:	e7f0      	b.n	8005252 <_svfiprintf_r+0x192>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <_svfiprintf_r+0x1f4>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4638      	mov	r0, r7
 800527c:	f3af 8000 	nop.w
 8005280:	1c42      	adds	r2, r0, #1
 8005282:	4606      	mov	r6, r0
 8005284:	d1d6      	bne.n	8005234 <_svfiprintf_r+0x174>
 8005286:	89ab      	ldrh	r3, [r5, #12]
 8005288:	065b      	lsls	r3, r3, #25
 800528a:	f53f af2d 	bmi.w	80050e8 <_svfiprintf_r+0x28>
 800528e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005290:	b01d      	add	sp, #116	; 0x74
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	ab03      	add	r3, sp, #12
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	462a      	mov	r2, r5
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <_svfiprintf_r+0x1f4>)
 800529e:	a904      	add	r1, sp, #16
 80052a0:	4638      	mov	r0, r7
 80052a2:	f000 f879 	bl	8005398 <_printf_i>
 80052a6:	e7eb      	b.n	8005280 <_svfiprintf_r+0x1c0>
 80052a8:	08005730 	.word	0x08005730
 80052ac:	0800573a 	.word	0x0800573a
 80052b0:	00000000 	.word	0x00000000
 80052b4:	0800500d 	.word	0x0800500d
 80052b8:	08005736 	.word	0x08005736

080052bc <_printf_common>:
 80052bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c0:	4616      	mov	r6, r2
 80052c2:	4699      	mov	r9, r3
 80052c4:	688a      	ldr	r2, [r1, #8]
 80052c6:	690b      	ldr	r3, [r1, #16]
 80052c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052cc:	4293      	cmp	r3, r2
 80052ce:	bfb8      	it	lt
 80052d0:	4613      	movlt	r3, r2
 80052d2:	6033      	str	r3, [r6, #0]
 80052d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d8:	4607      	mov	r7, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	b10a      	cbz	r2, 80052e2 <_printf_common+0x26>
 80052de:	3301      	adds	r3, #1
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	0699      	lsls	r1, r3, #26
 80052e6:	bf42      	ittt	mi
 80052e8:	6833      	ldrmi	r3, [r6, #0]
 80052ea:	3302      	addmi	r3, #2
 80052ec:	6033      	strmi	r3, [r6, #0]
 80052ee:	6825      	ldr	r5, [r4, #0]
 80052f0:	f015 0506 	ands.w	r5, r5, #6
 80052f4:	d106      	bne.n	8005304 <_printf_common+0x48>
 80052f6:	f104 0a19 	add.w	sl, r4, #25
 80052fa:	68e3      	ldr	r3, [r4, #12]
 80052fc:	6832      	ldr	r2, [r6, #0]
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	42ab      	cmp	r3, r5
 8005302:	dc26      	bgt.n	8005352 <_printf_common+0x96>
 8005304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005308:	1e13      	subs	r3, r2, #0
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	bf18      	it	ne
 800530e:	2301      	movne	r3, #1
 8005310:	0692      	lsls	r2, r2, #26
 8005312:	d42b      	bmi.n	800536c <_printf_common+0xb0>
 8005314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	47c0      	blx	r8
 800531e:	3001      	adds	r0, #1
 8005320:	d01e      	beq.n	8005360 <_printf_common+0xa4>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	6922      	ldr	r2, [r4, #16]
 8005326:	f003 0306 	and.w	r3, r3, #6
 800532a:	2b04      	cmp	r3, #4
 800532c:	bf02      	ittt	eq
 800532e:	68e5      	ldreq	r5, [r4, #12]
 8005330:	6833      	ldreq	r3, [r6, #0]
 8005332:	1aed      	subeq	r5, r5, r3
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	bf0c      	ite	eq
 8005338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800533c:	2500      	movne	r5, #0
 800533e:	4293      	cmp	r3, r2
 8005340:	bfc4      	itt	gt
 8005342:	1a9b      	subgt	r3, r3, r2
 8005344:	18ed      	addgt	r5, r5, r3
 8005346:	2600      	movs	r6, #0
 8005348:	341a      	adds	r4, #26
 800534a:	42b5      	cmp	r5, r6
 800534c:	d11a      	bne.n	8005384 <_printf_common+0xc8>
 800534e:	2000      	movs	r0, #0
 8005350:	e008      	b.n	8005364 <_printf_common+0xa8>
 8005352:	2301      	movs	r3, #1
 8005354:	4652      	mov	r2, sl
 8005356:	4649      	mov	r1, r9
 8005358:	4638      	mov	r0, r7
 800535a:	47c0      	blx	r8
 800535c:	3001      	adds	r0, #1
 800535e:	d103      	bne.n	8005368 <_printf_common+0xac>
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	3501      	adds	r5, #1
 800536a:	e7c6      	b.n	80052fa <_printf_common+0x3e>
 800536c:	18e1      	adds	r1, r4, r3
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	2030      	movs	r0, #48	; 0x30
 8005372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005376:	4422      	add	r2, r4
 8005378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800537c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005380:	3302      	adds	r3, #2
 8005382:	e7c7      	b.n	8005314 <_printf_common+0x58>
 8005384:	2301      	movs	r3, #1
 8005386:	4622      	mov	r2, r4
 8005388:	4649      	mov	r1, r9
 800538a:	4638      	mov	r0, r7
 800538c:	47c0      	blx	r8
 800538e:	3001      	adds	r0, #1
 8005390:	d0e6      	beq.n	8005360 <_printf_common+0xa4>
 8005392:	3601      	adds	r6, #1
 8005394:	e7d9      	b.n	800534a <_printf_common+0x8e>
	...

08005398 <_printf_i>:
 8005398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	7e0f      	ldrb	r7, [r1, #24]
 800539e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053a0:	2f78      	cmp	r7, #120	; 0x78
 80053a2:	4691      	mov	r9, r2
 80053a4:	4680      	mov	r8, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	469a      	mov	sl, r3
 80053aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ae:	d807      	bhi.n	80053c0 <_printf_i+0x28>
 80053b0:	2f62      	cmp	r7, #98	; 0x62
 80053b2:	d80a      	bhi.n	80053ca <_printf_i+0x32>
 80053b4:	2f00      	cmp	r7, #0
 80053b6:	f000 80d4 	beq.w	8005562 <_printf_i+0x1ca>
 80053ba:	2f58      	cmp	r7, #88	; 0x58
 80053bc:	f000 80c0 	beq.w	8005540 <_printf_i+0x1a8>
 80053c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c8:	e03a      	b.n	8005440 <_printf_i+0xa8>
 80053ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ce:	2b15      	cmp	r3, #21
 80053d0:	d8f6      	bhi.n	80053c0 <_printf_i+0x28>
 80053d2:	a101      	add	r1, pc, #4	; (adr r1, 80053d8 <_printf_i+0x40>)
 80053d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005445 	.word	0x08005445
 80053e0:	080053c1 	.word	0x080053c1
 80053e4:	080053c1 	.word	0x080053c1
 80053e8:	080053c1 	.word	0x080053c1
 80053ec:	080053c1 	.word	0x080053c1
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080053c1 	.word	0x080053c1
 80053f8:	080053c1 	.word	0x080053c1
 80053fc:	080053c1 	.word	0x080053c1
 8005400:	080053c1 	.word	0x080053c1
 8005404:	08005549 	.word	0x08005549
 8005408:	08005471 	.word	0x08005471
 800540c:	08005503 	.word	0x08005503
 8005410:	080053c1 	.word	0x080053c1
 8005414:	080053c1 	.word	0x080053c1
 8005418:	0800556b 	.word	0x0800556b
 800541c:	080053c1 	.word	0x080053c1
 8005420:	08005471 	.word	0x08005471
 8005424:	080053c1 	.word	0x080053c1
 8005428:	080053c1 	.word	0x080053c1
 800542c:	0800550b 	.word	0x0800550b
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	602a      	str	r2, [r5, #0]
 8005438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800543c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005440:	2301      	movs	r3, #1
 8005442:	e09f      	b.n	8005584 <_printf_i+0x1ec>
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	682b      	ldr	r3, [r5, #0]
 8005448:	0607      	lsls	r7, r0, #24
 800544a:	f103 0104 	add.w	r1, r3, #4
 800544e:	6029      	str	r1, [r5, #0]
 8005450:	d501      	bpl.n	8005456 <_printf_i+0xbe>
 8005452:	681e      	ldr	r6, [r3, #0]
 8005454:	e003      	b.n	800545e <_printf_i+0xc6>
 8005456:	0646      	lsls	r6, r0, #25
 8005458:	d5fb      	bpl.n	8005452 <_printf_i+0xba>
 800545a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800545e:	2e00      	cmp	r6, #0
 8005460:	da03      	bge.n	800546a <_printf_i+0xd2>
 8005462:	232d      	movs	r3, #45	; 0x2d
 8005464:	4276      	negs	r6, r6
 8005466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546a:	485a      	ldr	r0, [pc, #360]	; (80055d4 <_printf_i+0x23c>)
 800546c:	230a      	movs	r3, #10
 800546e:	e012      	b.n	8005496 <_printf_i+0xfe>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	6029      	str	r1, [r5, #0]
 8005478:	0605      	lsls	r5, r0, #24
 800547a:	d501      	bpl.n	8005480 <_printf_i+0xe8>
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	e002      	b.n	8005486 <_printf_i+0xee>
 8005480:	0641      	lsls	r1, r0, #25
 8005482:	d5fb      	bpl.n	800547c <_printf_i+0xe4>
 8005484:	881e      	ldrh	r6, [r3, #0]
 8005486:	4853      	ldr	r0, [pc, #332]	; (80055d4 <_printf_i+0x23c>)
 8005488:	2f6f      	cmp	r7, #111	; 0x6f
 800548a:	bf0c      	ite	eq
 800548c:	2308      	moveq	r3, #8
 800548e:	230a      	movne	r3, #10
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005496:	6865      	ldr	r5, [r4, #4]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	2d00      	cmp	r5, #0
 800549c:	bfa2      	ittt	ge
 800549e:	6821      	ldrge	r1, [r4, #0]
 80054a0:	f021 0104 	bicge.w	r1, r1, #4
 80054a4:	6021      	strge	r1, [r4, #0]
 80054a6:	b90e      	cbnz	r6, 80054ac <_printf_i+0x114>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	d04b      	beq.n	8005544 <_printf_i+0x1ac>
 80054ac:	4615      	mov	r5, r2
 80054ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b2:	fb03 6711 	mls	r7, r3, r1, r6
 80054b6:	5dc7      	ldrb	r7, [r0, r7]
 80054b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054bc:	4637      	mov	r7, r6
 80054be:	42bb      	cmp	r3, r7
 80054c0:	460e      	mov	r6, r1
 80054c2:	d9f4      	bls.n	80054ae <_printf_i+0x116>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10b      	bne.n	80054e0 <_printf_i+0x148>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07de      	lsls	r6, r3, #31
 80054cc:	d508      	bpl.n	80054e0 <_printf_i+0x148>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	4299      	cmp	r1, r3
 80054d4:	bfde      	ittt	le
 80054d6:	2330      	movle	r3, #48	; 0x30
 80054d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e0:	1b52      	subs	r2, r2, r5
 80054e2:	6122      	str	r2, [r4, #16]
 80054e4:	f8cd a000 	str.w	sl, [sp]
 80054e8:	464b      	mov	r3, r9
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff fee4 	bl	80052bc <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14a      	bne.n	800558e <_printf_i+0x1f6>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b004      	add	sp, #16
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f043 0320 	orr.w	r3, r3, #32
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	4833      	ldr	r0, [pc, #204]	; (80055d8 <_printf_i+0x240>)
 800550c:	2778      	movs	r7, #120	; 0x78
 800550e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	6829      	ldr	r1, [r5, #0]
 8005516:	061f      	lsls	r7, r3, #24
 8005518:	f851 6b04 	ldr.w	r6, [r1], #4
 800551c:	d402      	bmi.n	8005524 <_printf_i+0x18c>
 800551e:	065f      	lsls	r7, r3, #25
 8005520:	bf48      	it	mi
 8005522:	b2b6      	uxthmi	r6, r6
 8005524:	07df      	lsls	r7, r3, #31
 8005526:	bf48      	it	mi
 8005528:	f043 0320 	orrmi.w	r3, r3, #32
 800552c:	6029      	str	r1, [r5, #0]
 800552e:	bf48      	it	mi
 8005530:	6023      	strmi	r3, [r4, #0]
 8005532:	b91e      	cbnz	r6, 800553c <_printf_i+0x1a4>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	f023 0320 	bic.w	r3, r3, #32
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	2310      	movs	r3, #16
 800553e:	e7a7      	b.n	8005490 <_printf_i+0xf8>
 8005540:	4824      	ldr	r0, [pc, #144]	; (80055d4 <_printf_i+0x23c>)
 8005542:	e7e4      	b.n	800550e <_printf_i+0x176>
 8005544:	4615      	mov	r5, r2
 8005546:	e7bd      	b.n	80054c4 <_printf_i+0x12c>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	6826      	ldr	r6, [r4, #0]
 800554c:	6961      	ldr	r1, [r4, #20]
 800554e:	1d18      	adds	r0, r3, #4
 8005550:	6028      	str	r0, [r5, #0]
 8005552:	0635      	lsls	r5, r6, #24
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	d501      	bpl.n	800555c <_printf_i+0x1c4>
 8005558:	6019      	str	r1, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0x1ca>
 800555c:	0670      	lsls	r0, r6, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0x1c0>
 8005560:	8019      	strh	r1, [r3, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	4615      	mov	r5, r2
 8005568:	e7bc      	b.n	80054e4 <_printf_i+0x14c>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	1d1a      	adds	r2, r3, #4
 800556e:	602a      	str	r2, [r5, #0]
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	6862      	ldr	r2, [r4, #4]
 8005574:	2100      	movs	r1, #0
 8005576:	4628      	mov	r0, r5
 8005578:	f7fa fe2a 	bl	80001d0 <memchr>
 800557c:	b108      	cbz	r0, 8005582 <_printf_i+0x1ea>
 800557e:	1b40      	subs	r0, r0, r5
 8005580:	6060      	str	r0, [r4, #4]
 8005582:	6863      	ldr	r3, [r4, #4]
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	2300      	movs	r3, #0
 8005588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800558c:	e7aa      	b.n	80054e4 <_printf_i+0x14c>
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	462a      	mov	r2, r5
 8005592:	4649      	mov	r1, r9
 8005594:	4640      	mov	r0, r8
 8005596:	47d0      	blx	sl
 8005598:	3001      	adds	r0, #1
 800559a:	d0ad      	beq.n	80054f8 <_printf_i+0x160>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	079b      	lsls	r3, r3, #30
 80055a0:	d413      	bmi.n	80055ca <_printf_i+0x232>
 80055a2:	68e0      	ldr	r0, [r4, #12]
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	4298      	cmp	r0, r3
 80055a8:	bfb8      	it	lt
 80055aa:	4618      	movlt	r0, r3
 80055ac:	e7a6      	b.n	80054fc <_printf_i+0x164>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4632      	mov	r2, r6
 80055b2:	4649      	mov	r1, r9
 80055b4:	4640      	mov	r0, r8
 80055b6:	47d0      	blx	sl
 80055b8:	3001      	adds	r0, #1
 80055ba:	d09d      	beq.n	80054f8 <_printf_i+0x160>
 80055bc:	3501      	adds	r5, #1
 80055be:	68e3      	ldr	r3, [r4, #12]
 80055c0:	9903      	ldr	r1, [sp, #12]
 80055c2:	1a5b      	subs	r3, r3, r1
 80055c4:	42ab      	cmp	r3, r5
 80055c6:	dcf2      	bgt.n	80055ae <_printf_i+0x216>
 80055c8:	e7eb      	b.n	80055a2 <_printf_i+0x20a>
 80055ca:	2500      	movs	r5, #0
 80055cc:	f104 0619 	add.w	r6, r4, #25
 80055d0:	e7f5      	b.n	80055be <_printf_i+0x226>
 80055d2:	bf00      	nop
 80055d4:	08005741 	.word	0x08005741
 80055d8:	08005752 	.word	0x08005752

080055dc <memmove>:
 80055dc:	4288      	cmp	r0, r1
 80055de:	b510      	push	{r4, lr}
 80055e0:	eb01 0402 	add.w	r4, r1, r2
 80055e4:	d902      	bls.n	80055ec <memmove+0x10>
 80055e6:	4284      	cmp	r4, r0
 80055e8:	4623      	mov	r3, r4
 80055ea:	d807      	bhi.n	80055fc <memmove+0x20>
 80055ec:	1e43      	subs	r3, r0, #1
 80055ee:	42a1      	cmp	r1, r4
 80055f0:	d008      	beq.n	8005604 <memmove+0x28>
 80055f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fa:	e7f8      	b.n	80055ee <memmove+0x12>
 80055fc:	4402      	add	r2, r0
 80055fe:	4601      	mov	r1, r0
 8005600:	428a      	cmp	r2, r1
 8005602:	d100      	bne.n	8005606 <memmove+0x2a>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800560e:	e7f7      	b.n	8005600 <memmove+0x24>

08005610 <_sbrk_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d06      	ldr	r5, [pc, #24]	; (800562c <_sbrk_r+0x1c>)
 8005614:	2300      	movs	r3, #0
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fb fafa 	bl	8000c14 <_sbrk>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_sbrk_r+0x1a>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_sbrk_r+0x1a>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	200002f0 	.word	0x200002f0

08005630 <memcpy>:
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	f100 33ff 	add.w	r3, r0, #4294967295
 8005638:	d100      	bne.n	800563c <memcpy+0xc>
 800563a:	4770      	bx	lr
 800563c:	b510      	push	{r4, lr}
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005646:	4291      	cmp	r1, r2
 8005648:	d1f9      	bne.n	800563e <memcpy+0xe>
 800564a:	bd10      	pop	{r4, pc}

0800564c <_realloc_r>:
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	4680      	mov	r8, r0
 8005652:	4614      	mov	r4, r2
 8005654:	460e      	mov	r6, r1
 8005656:	b921      	cbnz	r1, 8005662 <_realloc_r+0x16>
 8005658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565c:	4611      	mov	r1, r2
 800565e:	f7ff bc49 	b.w	8004ef4 <_malloc_r>
 8005662:	b92a      	cbnz	r2, 8005670 <_realloc_r+0x24>
 8005664:	f7ff fbda 	bl	8004e1c <_free_r>
 8005668:	4625      	mov	r5, r4
 800566a:	4628      	mov	r0, r5
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	f000 f81b 	bl	80056aa <_malloc_usable_size_r>
 8005674:	4284      	cmp	r4, r0
 8005676:	4607      	mov	r7, r0
 8005678:	d802      	bhi.n	8005680 <_realloc_r+0x34>
 800567a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800567e:	d812      	bhi.n	80056a6 <_realloc_r+0x5a>
 8005680:	4621      	mov	r1, r4
 8005682:	4640      	mov	r0, r8
 8005684:	f7ff fc36 	bl	8004ef4 <_malloc_r>
 8005688:	4605      	mov	r5, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d0ed      	beq.n	800566a <_realloc_r+0x1e>
 800568e:	42bc      	cmp	r4, r7
 8005690:	4622      	mov	r2, r4
 8005692:	4631      	mov	r1, r6
 8005694:	bf28      	it	cs
 8005696:	463a      	movcs	r2, r7
 8005698:	f7ff ffca 	bl	8005630 <memcpy>
 800569c:	4631      	mov	r1, r6
 800569e:	4640      	mov	r0, r8
 80056a0:	f7ff fbbc 	bl	8004e1c <_free_r>
 80056a4:	e7e1      	b.n	800566a <_realloc_r+0x1e>
 80056a6:	4635      	mov	r5, r6
 80056a8:	e7df      	b.n	800566a <_realloc_r+0x1e>

080056aa <_malloc_usable_size_r>:
 80056aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ae:	1f18      	subs	r0, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bfbc      	itt	lt
 80056b4:	580b      	ldrlt	r3, [r1, r0]
 80056b6:	18c0      	addlt	r0, r0, r3
 80056b8:	4770      	bx	lr
	...

080056bc <_init>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr

080056c8 <_fini>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr
