
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c770  0800c770  0001c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc18  0800cc18  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc20  0800cc20  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc20  0800cc20  0001cc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc24  0800cc24  0001cc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cc28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001d4  0800cdfc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800cdfc  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166cd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6e  00000000  00000000  00036914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0003ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c0f  00000000  00000000  0003bb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001949a  00000000  00000000  00063785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f75ea  00000000  00000000  0007cc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006748  00000000  00000000  0017420c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017a954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c758 	.word	0x0800c758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c758 	.word	0x0800c758

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <MX_GPIO_Init+0xd4>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_GPIO_Init+0xd4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <MX_GPIO_Init+0xd4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_GPIO_Init+0xd4>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_GPIO_Init+0xd4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f001 f9c7 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001078:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <MX_GPIO_Init+0xd8>)
 800108a:	f000 fff7 	bl	800207c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800108e:	2320      	movs	r3, #32
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f000 ffe8 	bl	800207c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2028      	movs	r0, #40	; 0x28
 80010b2:	f000 ff20 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f000 ff39 	bl	8001f2e <HAL_NVIC_EnableIRQ>

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800

080010cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C1_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0FEFF;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C1_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C1_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C1_Init+0x74>)
 8001108:	f001 f9c4 	bl	8002494 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 fa44 	bl	800159e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C1_Init+0x74>)
 800111a:	f003 faad 	bl	8004678 <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 fa3b 	bl	800159e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C1_Init+0x74>)
 800112c:	f003 faef 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 fa32 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001f0 	.word	0x200001f0
 8001144:	40005400 	.word	0x40005400
 8001148:	00c0feff 	.word	0x00c0feff

0800114c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ac      	sub	sp, #176	; 0xb0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2288      	movs	r2, #136	; 0x88
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f007 feb8 	bl	8008ee2 <memset>
  if(i2cHandle->Instance==I2C1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <HAL_I2C_MspInit+0xc0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d143      	bne.n	8001204 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f004 f971 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f000 fa03 	bl	800159e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ca:	2304      	movs	r3, #4
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d4:	4619      	mov	r1, r3
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <HAL_I2C_MspInit+0xc8>)
 80011d8:	f000 ff50 	bl	800207c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 80011e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e6:	6593      	str	r3, [r2, #88]	; 0x58
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_I2C_MspInit+0xc4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	201f      	movs	r0, #31
 80011fa:	f000 fe7c 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011fe:	201f      	movs	r0, #31
 8001200:	f000 fe95 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	37b0      	adds	r7, #176	; 0xb0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <mpu6050_read>:

  return 1;
}
*/

void mpu6050_read(uint8_t address, uint8_t *dest, uint8_t num){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af04      	add	r7, sp, #16
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDRESS , address, 1,dest , num, HAL_MAX_DELAY);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	b29a      	uxth	r2, r3
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	9102      	str	r1, [sp, #8]
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	21d0      	movs	r1, #208	; 0xd0
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <mpu6050_read+0x38>)
 8001242:	f001 fad7 	bl	80027f4 <HAL_I2C_Mem_Read>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001f0 	.word	0x200001f0

08001254 <mpu6050_write>:

void mpu6050_write(uint8_t address, uint8_t value){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS, address, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	1dbb      	adds	r3, r7, #6
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	21d0      	movs	r1, #208	; 0xd0
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <mpu6050_write+0x34>)
 800127c:	f001 f9a6 	bl	80025cc <HAL_I2C_Mem_Write>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001f0 	.word	0x200001f0

0800128c <mpu6050_read_it>:
void mpu6050_read_it(uint8_t address, uint8_t num){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_I2C_ADDRESS , address, 1,data_buff , num);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <mpu6050_read_it+0x30>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	21d0      	movs	r1, #208	; 0xd0
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <mpu6050_read_it+0x34>)
 80012b0:	f001 fbba 	bl	8002a28 <HAL_I2C_Mem_Read_IT>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000025c 	.word	0x2000025c
 80012c0:	200001f0 	.word	0x200001f0

080012c4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM16){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d104      	bne.n	80012e0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80012d6:	2120      	movs	r1, #32
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f001 f8a8 	bl	8002430 <HAL_GPIO_TogglePin>
	}
	if(htim->Instance== TIM2){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d109      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_UART_Transmit_IT(&huart2,(uint8_t*) str, strlen(str));
 80012ea:	4808      	ldr	r0, [pc, #32]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012ec:	f7fe ffc0 	bl	8000270 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4905      	ldr	r1, [pc, #20]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80012fa:	f005 fd1b 	bl	8006d34 <HAL_UART_Transmit_IT>
		}
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40014400 	.word	0x40014400
 800130c:	200002a4 	.word	0x200002a4
 8001310:	2000038c 	.word	0x2000038c

08001314 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
		HAL_UART_Transmit_IT(&huart2,(uint8_t*) buffer, sizeof(buffer));
 800131e:	2214      	movs	r2, #20
 8001320:	4903      	ldr	r1, [pc, #12]	; (8001330 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <HAL_GPIO_EXTI_Callback+0x20>)
 8001324:	f005 fd06 	bl	8006d34 <HAL_UART_Transmit_IT>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000244 	.word	0x20000244
 8001334:	2000038c 	.word	0x2000038c

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f000 fc5e 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f8da 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f7ff fe52 	bl	8000ff0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800134c:	f000 fb9a 	bl	8001a84 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001350:	f000 fa80 	bl	8001854 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001354:	f000 fad6 	bl	8001904 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001358:	f7ff feb8 	bl	80010cc <MX_I2C1_Init>
  /*
  if(BME280_init() != BME280_OK) {
  	  printf("Blad inicjalizacji!\n");
    }
  */
  HAL_TIM_Base_Start_IT(&htim2);
 800135c:	4857      	ldr	r0, [pc, #348]	; (80014bc <main+0x184>)
 800135e:	f004 fd9b 	bl	8005e98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8001362:	4857      	ldr	r0, [pc, #348]	; (80014c0 <main+0x188>)
 8001364:	f004 fd98 	bl	8005e98 <HAL_TIM_Base_Start_IT>
  sprintf(buffer,"Button pressed\r\n");
 8001368:	4956      	ldr	r1, [pc, #344]	; (80014c4 <main+0x18c>)
 800136a:	4857      	ldr	r0, [pc, #348]	; (80014c8 <main+0x190>)
 800136c:	f007 fd56 	bl	8008e1c <siprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t who_am_i=0;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
  	mpu6050_read(MPU6050_WHO_AM_I, &who_am_i ,1);
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	2201      	movs	r2, #1
 8001378:	4619      	mov	r1, r3
 800137a:	2075      	movs	r0, #117	; 0x75
 800137c:	f7ff ff4c 	bl	8001218 <mpu6050_read>
    if (who_am_i == 0x68) {
      // printf("Found\n");
      } else {
      // printf("Error:(0x%02X)\n", who_am_i);
      }
    mpu6050_write(MPU6050_PWR_MGMT_1, MPU6050_PWR_MGMT_1_WAKE);
 8001380:	2100      	movs	r1, #0
 8001382:	206b      	movs	r0, #107	; 0x6b
 8001384:	f7ff ff66 	bl	8001254 <mpu6050_write>

    mpu6050_write(MPU6050_SMPRT_DIV, 0x07);
 8001388:	2107      	movs	r1, #7
 800138a:	2019      	movs	r0, #25
 800138c:	f7ff ff62 	bl	8001254 <mpu6050_write>

    mpu6050_write(MPU6050_CONFIG, MPU6050_CONFIG_ACCEL_XOUT_L|MPU6050_CONFIG_ACCEL_YOUT_L|MPU6050_CONFIG_ACCEL_ZOUT_L);
 8001390:	213d      	movs	r1, #61	; 0x3d
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff5e 	bl	8001254 <mpu6050_write>

    mpu6050_write(MPU6050_ACCEL_CONFIG, MPU6050_ACCEL_CONFIG_VALUE);
 8001398:	2108      	movs	r1, #8
 800139a:	201c      	movs	r0, #28
 800139c:	f7ff ff5a 	bl	8001254 <mpu6050_write>

    mpu6050_read_it(MPU6050_ACCEL_XOUT_H, 6);
 80013a0:	2106      	movs	r1, #6
 80013a2:	203b      	movs	r0, #59	; 0x3b
 80013a4:	f7ff ff72 	bl	800128c <mpu6050_read_it>
  while (1)
  {
	  	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== 0){
 80013a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ac:	4847      	ldr	r0, [pc, #284]	; (80014cc <main+0x194>)
 80013ae:	f001 f80f 	bl	80023d0 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10e      	bne.n	80013d6 <main+0x9e>
	  		  HAL_Delay(5);
 80013b8:	2005      	movs	r0, #5
 80013ba:	f000 fc9d 	bl	8001cf8 <HAL_Delay>
	  		  button=1;
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <main+0x198>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
	  		  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80013c4:	bf00      	nop
 80013c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ca:	4840      	ldr	r0, [pc, #256]	; (80014cc <main+0x194>)
 80013cc:	f001 f800 	bl	80023d0 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f7      	beq.n	80013c6 <main+0x8e>
		  	  }
		  button=0;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <main+0x198>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]


		  mpu6050_read_it(MPU6050_ACCEL_XOUT_H, 6);
 80013dc:	2106      	movs	r1, #6
 80013de:	203b      	movs	r0, #59	; 0x3b
 80013e0:	f7ff ff54 	bl	800128c <mpu6050_read_it>

		  x=data_buff[0]<<8 | data_buff[1];
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <main+0x19c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <main+0x19c>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <main+0x1a0>)
 80013f8:	801a      	strh	r2, [r3, #0]
		  y=data_buff[2]<<8 | data_buff[3];
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <main+0x19c>)
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <main+0x19c>)
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <main+0x1a4>)
 800140e:	801a      	strh	r2, [r3, #0]
		  z=data_buff[4]<<8 | data_buff[5];
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <main+0x19c>)
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <main+0x19c>)
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <main+0x1a8>)
 8001424:	801a      	strh	r2, [r3, #0]

		  Ax=(float)x/8192.f;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <main+0x1a0>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001434:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80014e4 <main+0x1ac>
 8001438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <main+0x1b0>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
		  Ay=(float)y/8192.f;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <main+0x1a4>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	eddf 6a24 	vldr	s13, [pc, #144]	; 80014e4 <main+0x1ac>
 8001454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <main+0x1b4>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
		  Az=(float)z/8192.f;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <main+0x1a8>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80014e4 <main+0x1ac>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <main+0x1b8>)
 8001476:	edc3 7a00 	vstr	s15, [r3]



		  sprintf(str,"Ax= %.2f Ay= %.2f Az=%.2f \n\r",Ax, Ay, Az);
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <main+0x1b0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	4680      	mov	r8, r0
 8001486:	4689      	mov	r9, r1
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <main+0x1b4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	4604      	mov	r4, r0
 8001494:	460d      	mov	r5, r1
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <main+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014a8:	e9cd 4500 	strd	r4, r5, [sp]
 80014ac:	4642      	mov	r2, r8
 80014ae:	464b      	mov	r3, r9
 80014b0:	4910      	ldr	r1, [pc, #64]	; (80014f4 <main+0x1bc>)
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <main+0x1c0>)
 80014b4:	f007 fcb2 	bl	8008e1c <siprintf>
	  	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== 0){
 80014b8:	e776      	b.n	80013a8 <main+0x70>
 80014ba:	bf00      	nop
 80014bc:	200002f4 	.word	0x200002f4
 80014c0:	20000340 	.word	0x20000340
 80014c4:	0800c770 	.word	0x0800c770
 80014c8:	20000244 	.word	0x20000244
 80014cc:	48000800 	.word	0x48000800
 80014d0:	20000258 	.word	0x20000258
 80014d4:	2000025c 	.word	0x2000025c
 80014d8:	2000029c 	.word	0x2000029c
 80014dc:	2000029e 	.word	0x2000029e
 80014e0:	200002a0 	.word	0x200002a0
 80014e4:	46000000 	.word	0x46000000
 80014e8:	200002e4 	.word	0x200002e4
 80014ec:	200002e8 	.word	0x200002e8
 80014f0:	200002ec 	.word	0x200002ec
 80014f4:	0800c784 	.word	0x0800c784
 80014f8:	200002a4 	.word	0x200002a4

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	; 0x58
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2244      	movs	r2, #68	; 0x44
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fce9 	bl	8008ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001522:	f003 f94f 	bl	80047c4 <HAL_PWREx_ControlVoltageScaling>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800152c:	f000 f837 	bl	800159e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153a:	2310      	movs	r3, #16
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001542:	2302      	movs	r3, #2
 8001544:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 13;
 800154a:	230d      	movs	r3, #13
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800154e:	2307      	movs	r3, #7
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001556:	2304      	movs	r3, #4
 8001558:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f986 	bl	8004870 <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800156a:	f000 f818 	bl	800159e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	2103      	movs	r1, #3
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fd4e 	bl	8005028 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001592:	f000 f804 	bl	800159e <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3758      	adds	r7, #88	; 0x58
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <Error_Handler+0x8>

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x44>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6593      	str	r3, [r2, #88]	; 0x58
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 fb3c 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800164a:	f004 fcec 	bl	8006026 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000340 	.word	0x20000340

08001658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM2_IRQHandler+0x10>)
 800165e:	f004 fce2 	bl	8006026 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002f4 	.word	0x200002f4

0800166c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <I2C1_EV_IRQHandler+0x10>)
 8001672:	f001 fa5f 	bl	8002b34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001f0 	.word	0x200001f0

08001680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART2_IRQHandler+0x10>)
 8001686:	f005 fbb3 	bl	8006df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000038c 	.word	0x2000038c

08001694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001698:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800169c:	f000 fee2 	bl	8002464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_kill>:

int _kill(int pid, int sig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016be:	f007 fc63 	bl	8008f88 <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe7 	bl	80016b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	e7fe      	b.n	80016e6 <_exit+0x12>

080016e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f007 fbc8 	bl	8008f88 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20018000 	.word	0x20018000
 8001824:	00000400 	.word	0x00000400
 8001828:	200002f0 	.word	0x200002f0
 800182c:	20000568 	.word	0x20000568

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_TIM2_Init+0xac>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4726;
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM2_Init+0xac>)
 8001882:	f241 2276 	movw	r2, #4726	; 0x1276
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM2_Init+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_TIM2_Init+0xac>)
 8001890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM2_Init+0xac>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM2_Init+0xac>)
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <MX_TIM2_Init+0xac>)
 80018a4:	f004 fb68 	bl	8005f78 <HAL_TIM_OC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80018ae:	f7ff fe76 	bl	800159e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_TIM2_Init+0xac>)
 80018c2:	f005 f8c5 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80018cc:	f7ff fe67 	bl	800159e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM2_Init+0xac>)
 80018e8:	f004 fca0 	bl	800622c <HAL_TIM_OC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018f2:	f7ff fe54 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002f4 	.word	0x200002f4

08001904 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b092      	sub	sp, #72	; 0x48
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	222c      	movs	r2, #44	; 0x2c
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f007 fadc 	bl	8008ee2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <MX_TIM16_Init+0xe8>)
 800192e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3999;
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_TIM16_Init+0xe4>)
 8001932:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001936:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_TIM16_Init+0xe4>)
 8001940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001944:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_TIM16_Init+0xe4>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_TIM16_Init+0xe4>)
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001958:	4823      	ldr	r0, [pc, #140]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800195a:	f004 fa45 	bl	8005de8 <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001964:	f7ff fe1b 	bl	800159e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001968:	481f      	ldr	r0, [pc, #124]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800196a:	f004 fb05 	bl	8005f78 <HAL_TIM_OC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001974:	f7ff fe13 	bl	800159e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <MX_TIM16_Init+0xe4>)
 800199e:	f004 fc45 	bl	800622c <HAL_TIM_OC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80019a8:	f7ff fdf9 	bl	800159e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM16_Init+0xe4>)
 80019d0:	f005 f8c6 	bl	8006b60 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80019da:	f7ff fde0 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3748      	adds	r7, #72	; 0x48
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000340 	.word	0x20000340
 80019ec:	40014400 	.word	0x40014400

080019f0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a00:	d113      	bne.n	8001a2a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_OC_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_TIM_OC_MspInit+0x44>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_OC_MspInit+0x44>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f000 fa69 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a24:	201c      	movs	r0, #28
 8001a26:	f000 fa82 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_TIM_Base_MspInit+0x44>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d113      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	6613      	str	r3, [r2, #96]	; 0x60
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2019      	movs	r0, #25
 8001a68:	f000 fa45 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a6c:	2019      	movs	r0, #25
 8001a6e:	f000 fa5e 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40014400 	.word	0x40014400
 8001a80:	40021000 	.word	0x40021000

08001a84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <MX_USART2_UART_Init+0x5c>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART2_UART_Init+0x58>)
 8001ac8:	f005 f8e6 	bl	8006c98 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ad2:	f7ff fd64 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000038c 	.word	0x2000038c
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ac      	sub	sp, #176	; 0xb0
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2288      	movs	r2, #136	; 0x88
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f007 f9ec 	bl	8008ee2 <memset>
  if(uartHandle->Instance==USART2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a25      	ldr	r2, [pc, #148]	; (8001ba4 <HAL_UART_MspInit+0xc0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d143      	bne.n	8001b9c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fca5 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b2c:	f7ff fd37 	bl	800159e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0xc4>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b60:	230c      	movs	r3, #12
 8001b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f000 fa78 	bl	800207c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2026      	movs	r0, #38	; 0x26
 8001b92:	f000 f9b0 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 f9c9 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	37b0      	adds	r7, #176	; 0xb0
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40004400 	.word	0x40004400
 8001ba8:	40021000 	.word	0x40021000

08001bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb0:	f7ff fe3e 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	; (8001bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <LoopForever+0xe>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	; (8001bf8 <LoopForever+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bda:	f007 f9db 	bl	8008f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bde:	f7ff fbab 	bl	8001338 <main>

08001be2 <LoopForever>:

LoopForever:
    b LoopForever
 8001be2:	e7fe      	b.n	8001be2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bf0:	0800cc28 	.word	0x0800cc28
  ldr r2, =_sbss
 8001bf4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bf8:	20000564 	.word	0x20000564

08001bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_2_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_Init+0x3c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_Init+0x3c>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c16:	2003      	movs	r0, #3
 8001c18:	f000 f962 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 f80f 	bl	8001c40 <HAL_InitTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	e001      	b.n	8001c32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2e:	f7ff fcbb 	bl	80015a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_InitTick+0x6c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_InitTick+0x70>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_InitTick+0x6c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f96d 	bl	8001f4a <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d809      	bhi.n	8001c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f937 	bl	8001ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_InitTick+0x74>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e007      	b.n	8001ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e004      	b.n	8001ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e001      	b.n	8001ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000414 	.word	0x20000414

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000414 	.word	0x20000414

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff3e 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff31 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffa2 	bl	8001e9c <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d008      	beq.n	8001f8c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e022      	b.n	8001fd2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020e 	bic.w	r2, r2, #14
 8001f9a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 021c 	and.w	r2, r3, #28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d005      	beq.n	8002002 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e029      	b.n	8002056 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 020e 	bic.w	r2, r2, #14
 8002010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 021c 	and.w	r2, r3, #28
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
    }
  }
  return status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800206e:	b2db      	uxtb	r3, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208a:	e17f      	b.n	800238c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8171 	beq.w	8002386 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d005      	beq.n	80020bc <HAL_GPIO_Init+0x40>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d130      	bne.n	800211e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f2:	2201      	movs	r2, #1
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 0201 	and.w	r2, r3, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b03      	cmp	r3, #3
 8002128:	d118      	bne.n	800215c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80ac 	beq.w	8002386 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_GPIO_Init+0x330>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <HAL_GPIO_Init+0x330>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6613      	str	r3, [r2, #96]	; 0x60
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_GPIO_Init+0x330>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002246:	4a5a      	ldr	r2, [pc, #360]	; (80023b0 <HAL_GPIO_Init+0x334>)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x242>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x338>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x23e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <HAL_GPIO_Init+0x33c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x23a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4d      	ldr	r2, [pc, #308]	; (80023bc <HAL_GPIO_Init+0x340>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x236>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_GPIO_Init+0x344>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x232>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_GPIO_Init+0x348>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x22e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x34c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x22a>
 80022a2:	2306      	movs	r3, #6
 80022a4:	e00c      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00a      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022aa:	2305      	movs	r3, #5
 80022ac:	e008      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x244>
 80022be:	2300      	movs	r3, #0
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	f002 0203 	and.w	r2, r2, #3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4093      	lsls	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d0:	4937      	ldr	r1, [pc, #220]	; (80023b0 <HAL_GPIO_Init+0x334>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_GPIO_Init+0x350>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002302:	4a32      	ldr	r2, [pc, #200]	; (80023cc <HAL_GPIO_Init+0x350>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <HAL_GPIO_Init+0x350>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_GPIO_Init+0x350>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_GPIO_Init+0x350>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_GPIO_Init+0x350>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_GPIO_Init+0x350>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_GPIO_Init+0x350>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f ae78 	bne.w	800208c <HAL_GPIO_Init+0x10>
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	48001000 	.word	0x48001000
 80023c4:	48001400 	.word	0x48001400
 80023c8:	48001800 	.word	0x48001800
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43d9      	mvns	r1, r3
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	400b      	ands	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe ff46 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e08d      	b.n	80025c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fe46 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e006      	b.n	800251c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800251a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d108      	bne.n	8002536 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e007      	b.n	8002546 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69d9      	ldr	r1, [r3, #28]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	f040 80f9 	bne.w	80027e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_I2C_Mem_Write+0x34>
 80025fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0ed      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_I2C_Mem_Write+0x4e>
 8002616:	2302      	movs	r3, #2
 8002618:	e0e6      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002622:	f7ff fb5d 	bl	8001ce0 <HAL_GetTick>
 8002626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f001 fd52 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d1      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2221      	movs	r2, #33	; 0x21
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800266c:	88f8      	ldrh	r0, [r7, #6]
 800266e:	893a      	ldrh	r2, [r7, #8]
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4603      	mov	r3, r0
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 ffe1 	bl	8003644 <I2C_RequestMemoryWrite>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0a9      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d90e      	bls.n	80026bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	8979      	ldrh	r1, [r7, #10]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f001 fecb 	bl	8004450 <I2C_TransferConfig>
 80026ba:	e00f      	b.n	80026dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f001 feba 	bl	8004450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f001 fd4b 	bl	800417c <I2C_WaitOnTXISFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e07b      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d034      	beq.n	8002794 <HAL_I2C_Mem_Write+0x1c8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d130      	bne.n	8002794 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f001 fcce 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e04d      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d90e      	bls.n	8002774 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	22ff      	movs	r2, #255	; 0xff
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	b2da      	uxtb	r2, r3
 8002762:	8979      	ldrh	r1, [r7, #10]
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f001 fe6f 	bl	8004450 <I2C_TransferConfig>
 8002772:	e00f      	b.n	8002794 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	b2da      	uxtb	r2, r3
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	2300      	movs	r3, #0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f001 fe5e 	bl	8004450 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d19e      	bne.n	80026dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f001 fd31 	bl	800420a <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e01a      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_I2C_Mem_Write+0x224>)
 80027c6:	400b      	ands	r3, r1
 80027c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	fe00e800 	.word	0xfe00e800

080027f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	817b      	strh	r3, [r7, #10]
 8002806:	460b      	mov	r3, r1
 8002808:	813b      	strh	r3, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	f040 80fd 	bne.w	8002a16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_I2C_Mem_Read+0x34>
 8002822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0f1      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Mem_Read+0x4e>
 800283e:	2302      	movs	r3, #2
 8002840:	e0ea      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800284a:	f7ff fa49 	bl	8001ce0 <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2319      	movs	r3, #25
 8002856:	2201      	movs	r2, #1
 8002858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f001 fc3e 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0d5      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2222      	movs	r2, #34	; 0x22
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002894:	88f8      	ldrh	r0, [r7, #6]
 8002896:	893a      	ldrh	r2, [r7, #8]
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4603      	mov	r3, r0
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 ff21 	bl	80036ec <I2C_RequestMemoryRead>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0ad      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2bff      	cmp	r3, #255	; 0xff
 80028c4:	d90e      	bls.n	80028e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <HAL_I2C_Mem_Read+0x22c>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f001 fdb7 	bl	8004450 <I2C_TransferConfig>
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <HAL_I2C_Mem_Read+0x22c>)
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f001 fda6 	bl	8004450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	2200      	movs	r2, #0
 800290c:	2104      	movs	r1, #4
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f001 fbe5 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07c      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d034      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x1d0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d130      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f001 fbb6 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04d      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f001 fd57 	bl	8004450 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f001 fd46 	bl	8004450 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d19a      	bne.n	8002904 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 fc19 	bl	800420a <I2C_WaitOnSTOPFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01a      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2220      	movs	r2, #32
 80029e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_I2C_Mem_Read+0x230>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	80002400 	.word	0x80002400
 8002a24:	fe00e800 	.word	0xfe00e800

08002a28 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d166      	bne.n	8002b1c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_I2C_Mem_Read_IT+0x32>
 8002a54:	8bbb      	ldrh	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e05b      	b.n	8002b1e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	e051      	b.n	8002b1e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_I2C_Mem_Read_IT+0x60>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e04a      	b.n	8002b1e <HAL_I2C_Mem_Read_IT+0xf6>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2222      	movs	r2, #34	; 0x22
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8bba      	ldrh	r2, [r7, #28]
 8002ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_I2C_Mem_Read_IT+0x100>)
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_I2C_Mem_Read_IT+0x104>)
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002abe:	897a      	ldrh	r2, [r7, #10]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d109      	bne.n	8002ade <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ada:	651a      	str	r2, [r3, #80]	; 0x50
 8002adc:	e00b      	b.n	8002af6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ade:	893b      	ldrh	r3, [r7, #8]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_I2C_Mem_Read_IT+0x108>)
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f001 fca4 	bl	8004450 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b10:	2101      	movs	r1, #1
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f001 fcce 	bl	80044b4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	ffff0000 	.word	0xffff0000
 8002b2c:	08002c39 	.word	0x08002c39
 8002b30:	80002000 	.word	0x80002000

08002b34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
  }
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002c44:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <I2C_Mem_ISR_IT+0x244>)
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <I2C_Mem_ISR_IT+0x22>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e10c      	b.n	8002e74 <I2C_Mem_ISR_IT+0x23c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0204 	orr.w	r2, r3, #4
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f001 f9e5 	bl	800405a <I2C_Flush_TXDR>
 8002c90:	e0dd      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce0:	e0b5      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02c      	beq.n	8002d46 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d027      	beq.n	8002d46 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d118      	bne.n	8002d32 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002d30:	e08d      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002d44:	e083      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03c      	beq.n	8002dca <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d037      	beq.n	8002dca <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02c      	beq.n	8002dbe <I2C_Mem_ISR_IT+0x186>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d128      	bne.n	8002dbe <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d910      	bls.n	8002d98 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	b299      	uxth	r1, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f001 fb5d 	bl	8004450 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d96:	e017      	b.n	8002dc8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	b299      	uxth	r1, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 fb4a 	bl	8004450 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	e004      	b.n	8002dc8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f001 f833 	bl	8003e2c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc6:	e042      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
 8002dc8:	e041      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03c      	beq.n	8002e4e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d037      	beq.n	8002e4e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dde:	2101      	movs	r1, #1
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f001 fbeb 	bl	80045bc <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002de6:	2102      	movs	r1, #2
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f001 fb63 	bl	80044b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b22      	cmp	r3, #34	; 0x22
 8002df8:	d101      	bne.n	8002dfe <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <I2C_Mem_ISR_IT+0x248>)
 8002dfc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d910      	bls.n	8002e2a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	b299      	uxth	r1, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f001 fb14 	bl	8004450 <I2C_TransferConfig>
 8002e28:	e011      	b.n	8002e4e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f001 fb01 	bl	8004450 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002e62:	6939      	ldr	r1, [r7, #16]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fdb3 	bl	80039d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	80002000 	.word	0x80002000
 8002e80:	80002400 	.word	0x80002400

08002e84 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <I2C_Slave_ISR_IT+0x24>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0e1      	b.n	800306c <I2C_Slave_ISR_IT+0x1e8>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fe4a 	bl	8003b60 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d04b      	beq.n	8002f6e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d046      	beq.n	8002f6e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d128      	bne.n	8002f3c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b28      	cmp	r3, #40	; 0x28
 8002ef4:	d108      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x84>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efc:	d104      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002efe:	6939      	ldr	r1, [r7, #16]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 ff3f 	bl	8003d84 <I2C_ITListenCplt>
 8002f06:	e031      	b.n	8002f6c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b29      	cmp	r3, #41	; 0x29
 8002f12:	d10e      	bne.n	8002f32 <I2C_Slave_ISR_IT+0xae>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f1a:	d00a      	beq.n	8002f32 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2210      	movs	r2, #16
 8002f22:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f001 f898 	bl	800405a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fcf3 	bl	8003916 <I2C_ITSlaveSeqCplt>
 8002f30:	e01c      	b.n	8002f6c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f3a:	e08f      	b.n	800305c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <I2C_Slave_ISR_IT+0xda>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d17e      	bne.n	800305c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4619      	mov	r1, r3
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 ff61 	bl	8003e2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f6a:	e077      	b.n	800305c <I2C_Slave_ISR_IT+0x1d8>
 8002f6c:	e076      	b.n	800305c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d02f      	beq.n	8002fd8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02a      	beq.n	8002fd8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d14b      	bne.n	8003060 <I2C_Slave_ISR_IT+0x1dc>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fce:	d047      	beq.n	8003060 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fca0 	bl	8003916 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fd6:	e043      	b.n	8003060 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002fec:	6939      	ldr	r1, [r7, #16]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fbd0 	bl	8003794 <I2C_ITAddrCplt>
 8002ff4:	e035      	b.n	8003062 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d030      	beq.n	8003062 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02b      	beq.n	8003062 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
 8003044:	e00d      	b.n	8003062 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d002      	beq.n	8003054 <I2C_Slave_ISR_IT+0x1d0>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fc5e 	bl	8003916 <I2C_ITSlaveSeqCplt>
 800305a:	e002      	b.n	8003062 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800305c:	bf00      	nop
 800305e:	e000      	b.n	8003062 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003060:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <I2C_Master_ISR_DMA+0x1a>
 800308a:	2302      	movs	r3, #2
 800308c:	e0d9      	b.n	8003242 <I2C_Master_ISR_DMA+0x1ce>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	d016      	beq.n	80030ce <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d011      	beq.n	80030ce <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2210      	movs	r2, #16
 80030b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80030be:	2120      	movs	r1, #32
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f001 f9f7 	bl	80044b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 ffc7 	bl	800405a <I2C_Flush_TXDR>
 80030cc:	e0b4      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d071      	beq.n	80031bc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d06c      	beq.n	80031bc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d04e      	beq.n	800319a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003108:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2bff      	cmp	r3, #255	; 0xff
 8003112:	d906      	bls.n	8003122 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	22ff      	movs	r2, #255	; 0xff
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800311a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e010      	b.n	8003144 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003134:	d003      	beq.n	800313e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e002      	b.n	8003144 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800313e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003142:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8a79      	ldrh	r1, [r7, #18]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f001 f97c 	bl	8004450 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	d108      	bne.n	8003188 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003184:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003186:	e057      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003196:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003198:	e04e      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a8:	d003      	beq.n	80031b2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb76 	bl	800389c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80031b0:	e042      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fe39 	bl	8003e2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80031ba:	e03d      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d028      	beq.n	8003218 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031e8:	d025      	beq.n	8003236 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f2:	d108      	bne.n	8003206 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003202:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003204:	e017      	b.n	8003236 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fb48 	bl	800389c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800320c:	e013      	b.n	8003236 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fe0b 	bl	8003e2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003216:	e00e      	b.n	8003236 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fbce 	bl	80039d0 <I2C_ITMasterCplt>
 8003234:	e000      	b.n	8003238 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003236:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003258:	4b8d      	ldr	r3, [pc, #564]	; (8003490 <I2C_Mem_ISR_DMA+0x244>)
 800325a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <I2C_Mem_ISR_DMA+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e10e      	b.n	8003488 <I2C_Mem_ISR_DMA+0x23c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0204 	orr.w	r2, r3, #4
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800329a:	2120      	movs	r1, #32
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f001 f909 	bl	80044b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fed9 	bl	800405a <I2C_Flush_TXDR>
 80032a8:	e0e9      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
 80032d0:	e0d5      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05f      	beq.n	800339c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d05a      	beq.n	800339c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032e6:	2101      	movs	r1, #1
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f001 f967 	bl	80045bc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032ee:	2110      	movs	r1, #16
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f001 f8df 	bl	80044b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d048      	beq.n	8003392 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2bff      	cmp	r3, #255	; 0xff
 8003308:	d910      	bls.n	800332c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	b299      	uxth	r1, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	b2da      	uxtb	r2, r3
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f001 f893 	bl	8004450 <I2C_TransferConfig>
 800332a:	e011      	b.n	8003350 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	b299      	uxth	r1, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	b2da      	uxtb	r2, r3
 8003342:	2300      	movs	r3, #0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f001 f880 	bl	8004450 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b22      	cmp	r3, #34	; 0x22
 800336c:	d108      	bne.n	8003380 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800337e:	e07e      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003390:	e075      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003392:	2140      	movs	r1, #64	; 0x40
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fd49 	bl	8003e2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800339a:	e070      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d05d      	beq.n	8003462 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d058      	beq.n	8003462 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033b0:	2101      	movs	r1, #1
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f001 f902 	bl	80045bc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033b8:	2110      	movs	r1, #16
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f001 f87a 	bl	80044b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b22      	cmp	r3, #34	; 0x22
 80033ca:	d101      	bne.n	80033d0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80033cc:	4b31      	ldr	r3, [pc, #196]	; (8003494 <I2C_Mem_ISR_DMA+0x248>)
 80033ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d910      	bls.n	80033fc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	b299      	uxth	r1, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f001 f82b 	bl	8004450 <I2C_TransferConfig>
 80033fa:	e011      	b.n	8003420 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	b299      	uxth	r1, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	b2da      	uxtb	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f001 f818 	bl	8004450 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b22      	cmp	r3, #34	; 0x22
 800343c:	d108      	bne.n	8003450 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800344e:	e016      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003460:	e00d      	b.n	800347e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 faa9 	bl	80039d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	80002000 	.word	0x80002000
 8003494:	80002400 	.word	0x80002400

08003498 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <I2C_Slave_ISR_DMA+0x24>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0bf      	b.n	800363c <I2C_Slave_ISR_DMA+0x1a4>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fb40 	bl	8003b60 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8095 	beq.w	8003616 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 808f 	beq.w	8003616 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003508:	2b00      	cmp	r3, #0
 800350a:	d07d      	beq.n	8003608 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00c      	beq.n	8003550 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800354c:	2301      	movs	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d128      	bne.n	80035a8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b28      	cmp	r3, #40	; 0x28
 8003560:	d108      	bne.n	8003574 <I2C_Slave_ISR_DMA+0xdc>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003568:	d104      	bne.n	8003574 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fc09 	bl	8003d84 <I2C_ITListenCplt>
 8003572:	e048      	b.n	8003606 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b29      	cmp	r3, #41	; 0x29
 800357e:	d10e      	bne.n	800359e <I2C_Slave_ISR_DMA+0x106>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003586:	d00a      	beq.n	800359e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fd62 	bl	800405a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9bd 	bl	8003916 <I2C_ITSlaveSeqCplt>
 800359c:	e033      	b.n	8003606 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80035a6:	e034      	b.n	8003612 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <I2C_Slave_ISR_DMA+0x13a>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d0:	d11f      	bne.n	8003612 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b21      	cmp	r3, #33	; 0x21
 80035d6:	d002      	beq.n	80035de <I2C_Slave_ISR_DMA+0x146>
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b29      	cmp	r3, #41	; 0x29
 80035dc:	d103      	bne.n	80035e6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2221      	movs	r2, #33	; 0x21
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
 80035e4:	e008      	b.n	80035f8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b22      	cmp	r3, #34	; 0x22
 80035ea:	d002      	beq.n	80035f2 <I2C_Slave_ISR_DMA+0x15a>
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b2a      	cmp	r3, #42	; 0x2a
 80035f0:	d102      	bne.n	80035f8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2222      	movs	r2, #34	; 0x22
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	4619      	mov	r1, r3
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fc14 	bl	8003e2c <I2C_ITError>
      if (treatdmanack == 1U)
 8003604:	e005      	b.n	8003612 <I2C_Slave_ISR_DMA+0x17a>
 8003606:	e004      	b.n	8003612 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2210      	movs	r2, #16
 800360e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003610:	e00f      	b.n	8003632 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003612:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003614:	e00d      	b.n	8003632 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f8b1 	bl	8003794 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	8979      	ldrh	r1, [r7, #10]
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <I2C_RequestMemoryWrite+0xa4>)
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 feef 	bl	8004450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fd80 	bl	800417c <I2C_WaitOnTXISFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e02c      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800368c:	893b      	ldrh	r3, [r7, #8]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	629a      	str	r2, [r3, #40]	; 0x28
 8003696:	e015      	b.n	80036c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fd66 	bl	800417c <I2C_WaitOnTXISFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e012      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ba:	893b      	ldrh	r3, [r7, #8]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fd05 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	80002000 	.word	0x80002000

080036ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <I2C_RequestMemoryRead+0xa4>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fe9c 	bl	8004450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fd2d 	bl	800417c <I2C_WaitOnTXISFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e02c      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003732:	893b      	ldrh	r3, [r7, #8]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
 800373c:	e015      	b.n	800376a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	b29b      	uxth	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fd13 	bl	800417c <I2C_WaitOnTXISFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e012      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fcb2 	bl	80040de <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	80002000 	.word	0x80002000

08003794 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037aa:	2b28      	cmp	r3, #40	; 0x28
 80037ac:	d16a      	bne.n	8003884 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d138      	bne.n	8003864 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	09db      	lsrs	r3, r3, #7
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	89bb      	ldrh	r3, [r7, #12]
 80037fa:	4053      	eors	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11c      	bne.n	8003840 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	2b02      	cmp	r3, #2
 800381a:	d13b      	bne.n	8003894 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2208      	movs	r2, #8
 8003828:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003832:	89ba      	ldrh	r2, [r7, #12]
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff f9bd 	bl	8002bb8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800383e:	e029      	b.n	8003894 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 feb7 	bl	80045bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003856:	89ba      	ldrh	r2, [r7, #12]
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff f9ab 	bl	8002bb8 <HAL_I2C_AddrCallback>
}
 8003862:	e017      	b.n	8003894 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fea7 	bl	80045bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003876:	89ba      	ldrh	r2, [r7, #12]
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff f99b 	bl	8002bb8 <HAL_I2C_AddrCallback>
}
 8003882:	e007      	b.n	8003894 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2208      	movs	r2, #8
 800388a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b21      	cmp	r3, #33	; 0x21
 80038b6:	d115      	bne.n	80038e4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2211      	movs	r2, #17
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038cc:	2101      	movs	r1, #1
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fe74 	bl	80045bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff f943 	bl	8002b68 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038e2:	e014      	b.n	800390e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2212      	movs	r2, #18
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038f8:	2102      	movs	r1, #2
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fe5e 	bl	80045bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff f937 	bl	8002b7c <HAL_I2C_MasterRxCpltCallback>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e00c      	b.n	8003964 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b29      	cmp	r3, #41	; 0x29
 800396e:	d112      	bne.n	8003996 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2228      	movs	r2, #40	; 0x28
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2221      	movs	r2, #33	; 0x21
 800397c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800397e:	2101      	movs	r1, #1
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fe1b 	bl	80045bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff f8fe 	bl	8002b90 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003994:	e017      	b.n	80039c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d111      	bne.n	80039c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2228      	movs	r2, #40	; 0x28
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2222      	movs	r2, #34	; 0x22
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039b0:	2102      	movs	r1, #2
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fe02 	bl	80045bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff f8ef 	bl	8002ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b21      	cmp	r3, #33	; 0x21
 80039f0:	d107      	bne.n	8003a02 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039f2:	2101      	movs	r1, #1
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fde1 	bl	80045bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2211      	movs	r2, #17
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003a00:	e00c      	b.n	8003a1c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b22      	cmp	r3, #34	; 0x22
 8003a0c:	d106      	bne.n	8003a1c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a0e:	2102      	movs	r1, #2
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fdd3 	bl	80045bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2212      	movs	r2, #18
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <I2C_ITMasterCplt+0x188>)
 8003a28:	400b      	ands	r3, r1
 8003a2a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <I2C_ITMasterCplt+0x18c>)
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2210      	movs	r2, #16
 8003a48:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b60      	cmp	r3, #96	; 0x60
 8003a60:	d10a      	bne.n	8003a78 <I2C_ITMasterCplt+0xa8>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003a76:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 faee 	bl	800405a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b60      	cmp	r3, #96	; 0x60
 8003a8e:	d002      	beq.n	8003a96 <I2C_ITMasterCplt+0xc6>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9c5 	bl	8003e2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003aa2:	e054      	b.n	8003b4e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b21      	cmp	r3, #33	; 0x21
 8003aae:	d124      	bne.n	8003afa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d10b      	bne.n	8003ae2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff f884 	bl	8002be8 <HAL_I2C_MemTxCpltCallback>
}
 8003ae0:	e035      	b.n	8003b4e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff f838 	bl	8002b68 <HAL_I2C_MasterTxCpltCallback>
}
 8003af8:	e029      	b.n	8003b4e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b22      	cmp	r3, #34	; 0x22
 8003b04:	d123      	bne.n	8003b4e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d10b      	bne.n	8003b38 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff f863 	bl	8002bfc <HAL_I2C_MemRxCpltCallback>
}
 8003b36:	e00a      	b.n	8003b4e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff f817 	bl	8002b7c <HAL_I2C_MasterRxCpltCallback>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	fe00e800 	.word	0xfe00e800
 8003b5c:	ffff0000 	.word	0xffff0000

08003b60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2220      	movs	r2, #32
 8003b84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b21      	cmp	r3, #33	; 0x21
 8003b8a:	d002      	beq.n	8003b92 <I2C_ITSlaveCplt+0x32>
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b29      	cmp	r3, #41	; 0x29
 8003b90:	d108      	bne.n	8003ba4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b92:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fd10 	bl	80045bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2221      	movs	r2, #33	; 0x21
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba2:	e019      	b.n	8003bd8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b22      	cmp	r3, #34	; 0x22
 8003ba8:	d002      	beq.n	8003bb0 <I2C_ITSlaveCplt+0x50>
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b2a      	cmp	r3, #42	; 0x2a
 8003bae:	d108      	bne.n	8003bc2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bb0:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fd01 	bl	80045bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2222      	movs	r2, #34	; 0x22
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc0:	e00a      	b.n	8003bd8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b28      	cmp	r3, #40	; 0x28
 8003bc6:	d107      	bne.n	8003bd8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003bc8:	f248 0103 	movw	r1, #32771	; 0x8003
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fcf5 	bl	80045bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b62      	ldr	r3, [pc, #392]	; (8003d7c <I2C_ITSlaveCplt+0x21c>)
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fa2e 	bl	800405a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01f      	beq.n	8003c60 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2e:	e017      	b.n	8003c60 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0204 	orr.w	r2, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8a4 	bl	8003e2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b28      	cmp	r3, #40	; 0x28
 8003cee:	d141      	bne.n	8003d74 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f846 	bl	8003d84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cf8:	e03c      	b.n	8003d74 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d02:	d014      	beq.n	8003d2e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe06 	bl	8003916 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <I2C_ITSlaveCplt+0x220>)
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe ff54 	bl	8002bd4 <HAL_I2C_ListenCpltCallback>
}
 8003d2c:	e022      	b.n	8003d74 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b22      	cmp	r3, #34	; 0x22
 8003d38:	d10e      	bne.n	8003d58 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe ff27 	bl	8002ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d56:	e00d      	b.n	8003d74 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe ff0e 	bl	8002b90 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	fe00e800 	.word	0xfe00e800
 8003d80:	ffff0000 	.word	0xffff0000

08003d84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <I2C_ITListenCplt+0xa4>)
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d022      	beq.n	8003e00 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e00:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fbd9 	bl	80045bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2210      	movs	r2, #16
 8003e10:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe feda 	bl	8002bd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	ffff0000 	.word	0xffff0000

08003e2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a6d      	ldr	r2, [pc, #436]	; (8004000 <I2C_ITError+0x1d4>)
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b28      	cmp	r3, #40	; 0x28
 8003e62:	d005      	beq.n	8003e70 <I2C_ITError+0x44>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b29      	cmp	r3, #41	; 0x29
 8003e68:	d002      	beq.n	8003e70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6e:	d10b      	bne.n	8003e88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e70:	2103      	movs	r1, #3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fba2 	bl	80045bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2228      	movs	r2, #40	; 0x28
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a60      	ldr	r2, [pc, #384]	; (8004004 <I2C_ITError+0x1d8>)
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
 8003e86:	e030      	b.n	8003eea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e88:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fb95 	bl	80045bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8e1 	bl	800405a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b60      	cmp	r3, #96	; 0x60
 8003ea2:	d01f      	beq.n	8003ee4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d114      	bne.n	8003ee4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d109      	bne.n	8003edc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d039      	beq.n	8003f6c <I2C_ITError+0x140>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b11      	cmp	r3, #17
 8003efc:	d002      	beq.n	8003f04 <I2C_ITError+0xd8>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b21      	cmp	r3, #33	; 0x21
 8003f02:	d133      	bne.n	8003f6c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f12:	d107      	bne.n	8003f24 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f899 	bl	8002060 <HAL_DMA_GetState>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d017      	beq.n	8003f64 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	4a33      	ldr	r2, [pc, #204]	; (8004008 <I2C_ITError+0x1dc>)
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe f848 	bl	8001fde <HAL_DMA_Abort_IT>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d04d      	beq.n	8003ff0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f62:	e045      	b.n	8003ff0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f851 	bl	800400c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f6a:	e041      	b.n	8003ff0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d039      	beq.n	8003fe8 <I2C_ITError+0x1bc>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b12      	cmp	r3, #18
 8003f78:	d002      	beq.n	8003f80 <I2C_ITError+0x154>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	d133      	bne.n	8003fe8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d107      	bne.n	8003fa0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe f85b 	bl	8002060 <HAL_DMA_GetState>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d017      	beq.n	8003fe0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <I2C_ITError+0x1dc>)
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe f80a 	bl	8001fde <HAL_DMA_Abort_IT>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d011      	beq.n	8003ff4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fde:	e009      	b.n	8003ff4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f813 	bl	800400c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fe6:	e005      	b.n	8003ff4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f80f 	bl	800400c <I2C_TreatErrorCallback>
  }
}
 8003fee:	e002      	b.n	8003ff6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ff4:	bf00      	nop
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	ffff0000 	.word	0xffff0000
 8004004:	08002e85 	.word	0x08002e85
 8004008:	080040a3 	.word	0x080040a3

0800400c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d10e      	bne.n	800403e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fdf4 	bl	8002c24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800403c:	e009      	b.n	8004052 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fe fddf 	bl	8002c10 <HAL_I2C_ErrorCallback>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d103      	bne.n	8004078 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d007      	beq.n	8004096 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	619a      	str	r2, [r3, #24]
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	2200      	movs	r2, #0
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	2200      	movs	r2, #0
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff ff9b 	bl	800400c <I2C_TreatErrorCallback>
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ee:	e031      	b.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d02d      	beq.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f8:	f7fd fdf2 	bl	8001ce0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d302      	bcc.n	800410e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d122      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d113      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e00f      	b.n	8004174 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	429a      	cmp	r2, r3
 8004170:	d0be      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004188:	e033      	b.n	80041f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f87e 	bl	8004290 <I2C_IsErrorOccurred>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e031      	b.n	8004202 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d025      	beq.n	80041f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fd fd9b 	bl	8001ce0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11a      	bne.n	80041f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d013      	beq.n	80041f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e007      	b.n	8004202 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d1c4      	bne.n	800418a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004216:	e02f      	b.n	8004278 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f837 	bl	8004290 <I2C_IsErrorOccurred>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02d      	b.n	8004288 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fd fd58 	bl	8001ce0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11a      	bne.n	8004278 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d013      	beq.n	8004278 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e007      	b.n	8004288 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d1c8      	bne.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d068      	beq.n	800438e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042c4:	e049      	b.n	800435a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d045      	beq.n	800435a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fd fd07 	bl	8001ce0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_IsErrorOccurred+0x54>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d13a      	bne.n	800435a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004306:	d121      	bne.n	800434c <I2C_IsErrorOccurred+0xbc>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430e:	d01d      	beq.n	800434c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b20      	cmp	r3, #32
 8004314:	d01a      	beq.n	800434c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004326:	f7fd fcdb 	bl	8001ce0 <HAL_GetTick>
 800432a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800432c:	e00e      	b.n	800434c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800432e:	f7fd fcd7 	bl	8001ce0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b19      	cmp	r3, #25
 800433a:	d907      	bls.n	800434c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f043 0320 	orr.w	r3, r3, #32
 8004342:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800434a:	e006      	b.n	800435a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d1e9      	bne.n	800432e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d003      	beq.n	8004370 <I2C_IsErrorOccurred+0xe0>
 8004368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0aa      	beq.n	80042c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2220      	movs	r2, #32
 800437e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f043 0308 	orr.w	r3, r3, #8
 80043c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fe28 	bl	800405a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <I2C_IsErrorOccurred+0x1bc>)
 8004416:	400b      	ands	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800443e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004442:	4618      	mov	r0, r3
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	fe00e800 	.word	0xfe00e800

08004450 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	4613      	mov	r3, r2
 8004460:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004468:	7a7b      	ldrb	r3, [r7, #9]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004470:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	4313      	orrs	r3, r2
 800447a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800447e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	0d5b      	lsrs	r3, r3, #21
 800448a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <I2C_TransferConfig+0x60>)
 8004490:	430b      	orrs	r3, r1
 8004492:	43db      	mvns	r3, r3
 8004494:	ea02 0103 	and.w	r1, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	03ff63ff 	.word	0x03ff63ff

080044b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <I2C_Enable_IRQ+0xfc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d032      	beq.n	8004534 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <I2C_Enable_IRQ+0x100>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02d      	beq.n	8004534 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044dc:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <I2C_Enable_IRQ+0x104>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d028      	beq.n	8004534 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da03      	bge.n	80044f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004502:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004514:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	2b10      	cmp	r3, #16
 800451a:	d103      	bne.n	8004524 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004522:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d133      	bne.n	8004592 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f043 0320 	orr.w	r3, r3, #32
 8004530:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004532:	e02e      	b.n	8004592 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	da03      	bge.n	8004544 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004542:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004554:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004556:	887b      	ldrh	r3, [r7, #2]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004566:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	2b10      	cmp	r3, #16
 800456c:	d103      	bne.n	8004576 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004574:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	2b20      	cmp	r3, #32
 800457a:	d103      	bne.n	8004584 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004582:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d103      	bne.n	8004592 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	08003075 	.word	0x08003075
 80045b4:	08003499 	.word	0x08003499
 80045b8:	0800324d 	.word	0x0800324d

080045bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80045dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d003      	beq.n	80045f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80045f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00f      	beq.n	8004620 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004606:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004614:	2b28      	cmp	r3, #40	; 0x28
 8004616:	d003      	beq.n	8004620 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800461e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004624:	2b00      	cmp	r3, #0
 8004626:	da03      	bge.n	8004630 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800462e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	2b10      	cmp	r3, #16
 8004634:	d103      	bne.n	800463e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800463c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	2b20      	cmp	r3, #32
 8004642:	d103      	bne.n	800464c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f043 0320 	orr.w	r3, r3, #32
 800464a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d103      	bne.n	800465a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004658:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43da      	mvns	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	400a      	ands	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	d138      	bne.n	8004700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004698:	2302      	movs	r3, #2
 800469a:	e032      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b20      	cmp	r3, #32
 8004722:	d139      	bne.n	8004798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800472e:	2302      	movs	r3, #2
 8004730:	e033      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2224      	movs	r2, #36	; 0x24
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40007000 	.word	0x40007000

080047c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d2:	d130      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d038      	beq.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ea:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2232      	movs	r2, #50	; 0x32
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0c9b      	lsrs	r3, r3, #18
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004808:	e002      	b.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b01      	subs	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d102      	bne.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x60>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f2      	bne.n	800480a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004824:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d110      	bne.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e00f      	b.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004842:	d007      	beq.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800484c:	4a05      	ldr	r2, [pc, #20]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800484e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004852:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40007000 	.word	0x40007000
 8004868:	20000000 	.word	0x20000000
 800486c:	431bde83 	.word	0x431bde83

08004870 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e3ca      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004882:	4b97      	ldr	r3, [pc, #604]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488c:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80e4 	beq.w	8004a6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_RCC_OscConfig+0x4a>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	f040 808b 	bne.w	80049c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 8087 	bne.w	80049c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ba:	4b89      	ldr	r3, [pc, #548]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x62>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e3a2      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	4b82      	ldr	r3, [pc, #520]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_RCC_OscConfig+0x7c>
 80048e2:	4b7f      	ldr	r3, [pc, #508]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ea:	e005      	b.n	80048f8 <HAL_RCC_OscConfig+0x88>
 80048ec:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d223      	bcs.n	8004944 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fd55 	bl	80053b0 <RCC_SetFlashLatencyFromMSIRange>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e383      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004910:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a72      	ldr	r2, [pc, #456]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	496d      	ldr	r1, [pc, #436]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492e:	4b6c      	ldr	r3, [pc, #432]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	4968      	ldr	r1, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 8004942:	e025      	b.n	8004990 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004944:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a65      	ldr	r2, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800494a:	f043 0308 	orr.w	r3, r3, #8
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4960      	ldr	r1, [pc, #384]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	495b      	ldr	r1, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fd15 	bl	80053b0 <RCC_SetFlashLatencyFromMSIRange>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e343      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004990:	f000 fc4a 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b52      	ldr	r3, [pc, #328]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	4950      	ldr	r1, [pc, #320]	; (8004ae4 <HAL_RCC_OscConfig+0x274>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <HAL_RCC_OscConfig+0x278>)
 80049ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049b0:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fd f943 	bl	8001c40 <HAL_InitTick>
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d052      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	e327      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d032      	beq.n	8004a36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049d0:	4b43      	ldr	r3, [pc, #268]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a42      	ldr	r2, [pc, #264]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049dc:	f7fd f980 	bl	8001ce0 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e4:	f7fd f97c 	bl	8001ce0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e310      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049f6:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a02:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a08:	f043 0308 	orr.w	r3, r3, #8
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4931      	ldr	r1, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a20:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	492c      	ldr	r1, [pc, #176]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
 8004a34:	e01a      	b.n	8004a6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a42:	f7fd f94d 	bl	8001ce0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a4a:	f7fd f949 	bl	8001ce0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e2dd      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a5c:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x1da>
 8004a68:	e000      	b.n	8004a6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d074      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCC_OscConfig+0x21a>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d10e      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d064      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2f0>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d160      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e2ba      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x24a>
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e026      	b.n	8004b08 <HAL_RCC_OscConfig+0x298>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac2:	d115      	bne.n	8004af0 <HAL_RCC_OscConfig+0x280>
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a02      	ldr	r2, [pc, #8]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e014      	b.n	8004b08 <HAL_RCC_OscConfig+0x298>
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	0800c7a4 	.word	0x0800c7a4
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000004 	.word	0x20000004
 8004af0:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a9f      	ldr	r2, [pc, #636]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b9d      	ldr	r3, [pc, #628]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a9c      	ldr	r2, [pc, #624]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd f8e6 	bl	8001ce0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fd f8e2 	bl	8001ce0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e276      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2a:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x2a8>
 8004b36:	e014      	b.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd f8d2 	bl	8001ce0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fd f8ce 	bl	8001ce0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e262      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b52:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2d0>
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d060      	beq.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x310>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d116      	bne.n	8004bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b80:	4b7c      	ldr	r3, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_OscConfig+0x328>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e23f      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	4973      	ldr	r1, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e040      	b.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d023      	beq.n	8004bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb6:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd f88d 	bl	8001ce0 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fd f889 	bl	8001ce0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e21d      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	495f      	ldr	r1, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	e018      	b.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a5c      	ldr	r2, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd f869 	bl	8001ce0 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fd f865 	bl	8001ce0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e1f9      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c24:	4b53      	ldr	r3, [pc, #332]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d03c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01c      	beq.n	8004c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c44:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	4a4a      	ldr	r2, [pc, #296]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd f844 	bl	8001ce0 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5c:	f7fd f840 	bl	8001ce0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1d4      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6e:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ef      	beq.n	8004c5c <HAL_RCC_OscConfig+0x3ec>
 8004c7c:	e01b      	b.n	8004cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c84:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd f827 	bl	8001ce0 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd f823 	bl	8001ce0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1b7      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ef      	bne.n	8004c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80a6 	beq.w	8004e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce0:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cec:	2301      	movs	r3, #1
 8004cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d118      	bne.n	8004d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d08:	f7fc ffea 	bl	8001ce0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fc ffe6 	bl	8001ce0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e17a      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d108      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4d8>
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d46:	e029      	b.n	8004d9c <HAL_RCC_OscConfig+0x52c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d115      	bne.n	8004d7c <HAL_RCC_OscConfig+0x50c>
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a03      	ldr	r2, [pc, #12]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d70:	e014      	b.n	8004d9c <HAL_RCC_OscConfig+0x52c>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	4b9c      	ldr	r3, [pc, #624]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	4a9b      	ldr	r2, [pc, #620]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d8c:	4b98      	ldr	r3, [pc, #608]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	4a97      	ldr	r2, [pc, #604]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d016      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fc ff9c 	bl	8001ce0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fc ff98 	bl	8001ce0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e12a      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc2:	4b8b      	ldr	r3, [pc, #556]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ed      	beq.n	8004dac <HAL_RCC_OscConfig+0x53c>
 8004dd0:	e015      	b.n	8004dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fc ff85 	bl	8001ce0 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fc ff81 	bl	8001ce0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e113      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df0:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ed      	bne.n	8004dda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dfe:	7ffb      	ldrb	r3, [r7, #31]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e04:	4b7a      	ldr	r3, [pc, #488]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4a79      	ldr	r2, [pc, #484]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80fe 	beq.w	8005016 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	f040 80d0 	bne.w	8004fc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e24:	4b72      	ldr	r3, [pc, #456]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d130      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	3b01      	subs	r3, #1
 8004e44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d127      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d11f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e64:	2a07      	cmp	r2, #7
 8004e66:	bf14      	ite	ne
 8004e68:	2201      	movne	r2, #1
 8004e6a:	2200      	moveq	r2, #0
 8004e6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d113      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d06e      	beq.n	8004f78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d069      	beq.n	8004f74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004eac:	4b50      	ldr	r3, [pc, #320]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0ad      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a4b      	ldr	r2, [pc, #300]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec8:	f7fc ff0a 	bl	8001ce0 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fc ff06 	bl	8001ce0 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e09a      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee2:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004efe:	3a01      	subs	r2, #1
 8004f00:	0112      	lsls	r2, r2, #4
 8004f02:	4311      	orrs	r1, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f08:	0212      	lsls	r2, r2, #8
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f10:	0852      	lsrs	r2, r2, #1
 8004f12:	3a01      	subs	r2, #1
 8004f14:	0552      	lsls	r2, r2, #21
 8004f16:	4311      	orrs	r1, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f1c:	0852      	lsrs	r2, r2, #1
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	0652      	lsls	r2, r2, #25
 8004f22:	4311      	orrs	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f28:	0912      	lsrs	r2, r2, #4
 8004f2a:	0452      	lsls	r2, r2, #17
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	4930      	ldr	r1, [pc, #192]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f34:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2d      	ldr	r2, [pc, #180]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f4c:	f7fc fec8 	bl	8001ce0 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fc fec4 	bl	8001ce0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e058      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f72:	e050      	b.n	8005016 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04f      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d148      	bne.n	8005016 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9c:	f7fc fea0 	bl	8001ce0 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fc fe9c 	bl	8001ce0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e030      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x734>
 8004fc2:	e028      	b.n	8005016 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d023      	beq.n	8005012 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <HAL_RCC_OscConfig+0x780>)
 8004fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fe83 	bl	8001ce0 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fdc:	e00c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fe7f 	bl	8001ce0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d905      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e013      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_OscConfig+0x7b0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ec      	bne.n	8004fde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_OscConfig+0x7b0>)
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	4905      	ldr	r1, [pc, #20]	; (8005020 <HAL_RCC_OscConfig+0x7b0>)
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_OscConfig+0x7b4>)
 800500c:	4013      	ands	r3, r2
 800500e:	60cb      	str	r3, [r1, #12]
 8005010:	e001      	b.n	8005016 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	feeefffc 	.word	0xfeeefffc

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0e7      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800503c:	4b75      	ldr	r3, [pc, #468]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d910      	bls.n	800506c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b72      	ldr	r3, [pc, #456]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 0207 	bic.w	r2, r3, #7
 8005052:	4970      	ldr	r1, [pc, #448]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	4313      	orrs	r3, r2
 8005058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505a:	4b6e      	ldr	r3, [pc, #440]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0cf      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d010      	beq.n	800509a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4b66      	ldr	r3, [pc, #408]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005084:	429a      	cmp	r2, r3
 8005086:	d908      	bls.n	800509a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005088:	4b63      	ldr	r3, [pc, #396]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4960      	ldr	r1, [pc, #384]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d04c      	beq.n	8005140 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ae:	4b5a      	ldr	r3, [pc, #360]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d121      	bne.n	80050fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0a6      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	4b54      	ldr	r3, [pc, #336]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d115      	bne.n	80050fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e09a      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050de:	4b4e      	ldr	r3, [pc, #312]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e08e      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ee:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e086      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b46      	ldr	r3, [pc, #280]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4943      	ldr	r1, [pc, #268]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fc fde6 	bl	8001ce0 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fc fde2 	bl	8001ce0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e06e      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d010      	beq.n	800516e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005158:	429a      	cmp	r2, r3
 800515a:	d208      	bcs.n	800516e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	492b      	ldr	r1, [pc, #172]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d210      	bcs.n	800519e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 0207 	bic.w	r2, r3, #7
 8005184:	4923      	ldr	r1, [pc, #140]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_RCC_ClockConfig+0x1ec>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d001      	beq.n	800519e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e036      	b.n	800520c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4918      	ldr	r1, [pc, #96]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4910      	ldr	r1, [pc, #64]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051dc:	f000 f824 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	490b      	ldr	r1, [pc, #44]	; (800521c <HAL_RCC_ClockConfig+0x1f4>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <HAL_RCC_ClockConfig+0x1f8>)
 80051fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_RCC_ClockConfig+0x1fc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fc fd1d 	bl	8001c40 <HAL_InitTick>
 8005206:	4603      	mov	r3, r0
 8005208:	72fb      	strb	r3, [r7, #11]

  return status;
 800520a:	7afb      	ldrb	r3, [r7, #11]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40022000 	.word	0x40022000
 8005218:	40021000 	.word	0x40021000
 800521c:	0800c7a4 	.word	0x0800c7a4
 8005220:	20000000 	.word	0x20000000
 8005224:	20000004 	.word	0x20000004

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005236:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005240:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x34>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d121      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d11e      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005268:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e005      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005278:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005284:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10d      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <HAL_RCC_GetSysClockFreq+0x110>)
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	e004      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <HAL_RCC_GetSysClockFreq+0x114>)
 80052ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d134      	bne.n	8005320 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d003      	beq.n	80052ce <HAL_RCC_GetSysClockFreq+0xa6>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d003      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0xac>
 80052cc:	e005      	b.n	80052da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <HAL_RCC_GetSysClockFreq+0x110>)
 80052d0:	617b      	str	r3, [r7, #20]
      break;
 80052d2:	e005      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_RCC_GetSysClockFreq+0x114>)
 80052d6:	617b      	str	r3, [r7, #20]
      break;
 80052d8:	e002      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	617b      	str	r3, [r7, #20]
      break;
 80052de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	3301      	adds	r3, #1
 80052ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	fb03 f202 	mul.w	r2, r3, r2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_RCC_GetSysClockFreq+0x108>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	0e5b      	lsrs	r3, r3, #25
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	3301      	adds	r3, #1
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005320:	69bb      	ldr	r3, [r7, #24]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3724      	adds	r7, #36	; 0x24
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	0800c7bc 	.word	0x0800c7bc
 8005338:	00f42400 	.word	0x00f42400
 800533c:	007a1200 	.word	0x007a1200

08005340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <HAL_RCC_GetHCLKFreq+0x14>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000000 	.word	0x20000000

08005358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800535c:	f7ff fff0 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4904      	ldr	r1, [pc, #16]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	0800c7b4 	.word	0x0800c7b4

08005384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005388:	f7ff ffda 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0adb      	lsrs	r3, r3, #11
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4904      	ldr	r1, [pc, #16]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000
 80053ac:	0800c7b4 	.word	0x0800c7b4

080053b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053bc:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053c8:	f7ff f9ee 	bl	80047a8 <HAL_PWREx_GetVoltageRange>
 80053cc:	6178      	str	r0, [r7, #20]
 80053ce:	e014      	b.n	80053fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	4b25      	ldr	r3, [pc, #148]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	4a24      	ldr	r2, [pc, #144]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	4b22      	ldr	r3, [pc, #136]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053e8:	f7ff f9de 	bl	80047a8 <HAL_PWREx_GetVoltageRange>
 80053ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005400:	d10b      	bne.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d919      	bls.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2ba0      	cmp	r3, #160	; 0xa0
 800540c:	d902      	bls.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800540e:	2302      	movs	r3, #2
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e013      	b.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005414:	2301      	movs	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e010      	b.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d902      	bls.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005420:	2303      	movs	r3, #3
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e00a      	b.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d102      	bne.n	8005432 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800542c:	2302      	movs	r3, #2
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e004      	b.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b70      	cmp	r3, #112	; 0x70
 8005436:	d101      	bne.n	800543c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005438:	2301      	movs	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f023 0207 	bic.w	r2, r3, #7
 8005444:	4909      	ldr	r1, [pc, #36]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d001      	beq.n	800545e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000
 800546c:	40022000 	.word	0x40022000

08005470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005478:	2300      	movs	r3, #0
 800547a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800547c:	2300      	movs	r3, #0
 800547e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005488:	2b00      	cmp	r3, #0
 800548a:	d041      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005494:	d02a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005496:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800549a:	d824      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800549c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a0:	d008      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a6:	d81e      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b0:	d010      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054b2:	e018      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b4:	4b86      	ldr	r3, [pc, #536]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a85      	ldr	r2, [pc, #532]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054c0:	e015      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fabb 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d2:	e00c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3320      	adds	r3, #32
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fba6 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	74fb      	strb	r3, [r7, #19]
      break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f4:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005502:	4973      	ldr	r1, [pc, #460]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800550a:	e001      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d041      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005524:	d02a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800552a:	d824      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800552c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005530:	d008      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005536:	d81e      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800553c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005540:	d010      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005542:	e018      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005544:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a61      	ldr	r2, [pc, #388]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005550:	e015      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fa73 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005562:	e00c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3320      	adds	r3, #32
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fb5e 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	74fb      	strb	r3, [r7, #19]
      break;
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800557c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005584:	4b52      	ldr	r3, [pc, #328]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005592:	494f      	ldr	r1, [pc, #316]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800559a:	e001      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a0 	beq.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ae:	2300      	movs	r3, #0
 80055b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00d      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c8:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	4a40      	ldr	r2, [pc, #256]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6593      	str	r3, [r2, #88]	; 0x58
 80055d4:	4b3e      	ldr	r3, [pc, #248]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e0:	2301      	movs	r3, #1
 80055e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e4:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f0:	f7fc fb76 	bl	8001ce0 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055f6:	e009      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f8:	f7fc fb72 	bl	8001ce0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	74fb      	strb	r3, [r7, #19]
        break;
 800560a:	e005      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800560c:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d15c      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800561e:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01f      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	429a      	cmp	r2, r3
 800563a:	d019      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005668:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fc fb31 	bl	8001ce0 <HAL_GetTick>
 800567e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005680:	e00b      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fc fb2d 	bl	8001ce0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d902      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	74fb      	strb	r3, [r7, #19]
            break;
 8005698:	e006      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ec      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	4904      	ldr	r1, [pc, #16]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056c6:	e009      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056dc:	7c7b      	ldrb	r3, [r7, #17]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e2:	4b9e      	ldr	r3, [pc, #632]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	4a9d      	ldr	r2, [pc, #628]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056fa:	4b98      	ldr	r3, [pc, #608]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f023 0203 	bic.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	4994      	ldr	r1, [pc, #592]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800571c:	4b8f      	ldr	r3, [pc, #572]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f023 020c 	bic.w	r2, r3, #12
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	498c      	ldr	r1, [pc, #560]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800573e:	4b87      	ldr	r3, [pc, #540]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	4983      	ldr	r1, [pc, #524]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005760:	4b7e      	ldr	r3, [pc, #504]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	497b      	ldr	r1, [pc, #492]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	4972      	ldr	r1, [pc, #456]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057a4:	4b6d      	ldr	r3, [pc, #436]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b2:	496a      	ldr	r1, [pc, #424]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057c6:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	4961      	ldr	r1, [pc, #388]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057e8:	4b5c      	ldr	r3, [pc, #368]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	4959      	ldr	r1, [pc, #356]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800580a:	4b54      	ldr	r3, [pc, #336]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	4950      	ldr	r1, [pc, #320]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800582c:	4b4b      	ldr	r3, [pc, #300]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	4948      	ldr	r1, [pc, #288]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	493f      	ldr	r1, [pc, #252]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d028      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005870:	4b3a      	ldr	r3, [pc, #232]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587e:	4937      	ldr	r1, [pc, #220]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588e:	d106      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a31      	ldr	r2, [pc, #196]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589a:	60d3      	str	r3, [r2, #12]
 800589c:	e011      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a6:	d10c      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f8c8 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80058be:	7cfb      	ldrb	r3, [r7, #19]
 80058c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d028      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	491f      	ldr	r1, [pc, #124]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ee:	4b1b      	ldr	r3, [pc, #108]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f8:	60d3      	str	r3, [r2, #12]
 80058fa:	e011      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f899 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02b      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593a:	4908      	ldr	r1, [pc, #32]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800594a:	d109      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800594c:	4b03      	ldr	r3, [pc, #12]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a02      	ldr	r2, [pc, #8]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005956:	60d3      	str	r3, [r2, #12]
 8005958:	e014      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005968:	d10c      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2101      	movs	r1, #1
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f867 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02f      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005990:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599e:	4928      	ldr	r1, [pc, #160]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ae:	d10d      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2102      	movs	r1, #2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f844 	bl	8005a44 <RCCEx_PLLSAI1_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d014      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	74bb      	strb	r3, [r7, #18]
 80059ca:	e011      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3320      	adds	r3, #32
 80059da:	2102      	movs	r1, #2
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f925 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	490d      	ldr	r1, [pc, #52]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2e:	4904      	ldr	r1, [pc, #16]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a36:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000

08005a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a52:	4b75      	ldr	r3, [pc, #468]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a5e:	4b72      	ldr	r3, [pc, #456]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d10d      	bne.n	8005a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
       ||
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a76:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
       ||
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d047      	beq.n	8005b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
 8005a8e:	e044      	b.n	8005b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d018      	beq.n	8005aca <RCCEx_PLLSAI1_Config+0x86>
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d825      	bhi.n	8005ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d002      	beq.n	8005aa6 <RCCEx_PLLSAI1_Config+0x62>
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d009      	beq.n	8005ab8 <RCCEx_PLLSAI1_Config+0x74>
 8005aa4:	e020      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa6:	4b60      	ldr	r3, [pc, #384]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11d      	bne.n	8005aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab6:	e01a      	b.n	8005aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d116      	bne.n	8005af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac8:	e013      	b.n	8005af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aca:	4b57      	ldr	r3, [pc, #348]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ad6:	4b54      	ldr	r3, [pc, #336]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ae6:	e006      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e004      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005afe:	4b4a      	ldr	r3, [pc, #296]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	430b      	orrs	r3, r1
 8005b14:	4944      	ldr	r1, [pc, #272]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d17d      	bne.n	8005c1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b20:	4b41      	ldr	r3, [pc, #260]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fc f8d8 	bl	8001ce0 <HAL_GetTick>
 8005b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b32:	e009      	b.n	8005b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b34:	f7fc f8d4 	bl	8001ce0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d902      	bls.n	8005b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	73fb      	strb	r3, [r7, #15]
        break;
 8005b46:	e005      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b48:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ef      	bne.n	8005b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d160      	bne.n	8005c1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d111      	bne.n	8005b84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b60:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6892      	ldr	r2, [r2, #8]
 8005b70:	0211      	lsls	r1, r2, #8
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68d2      	ldr	r2, [r2, #12]
 8005b76:	0912      	lsrs	r2, r2, #4
 8005b78:	0452      	lsls	r2, r2, #17
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	492a      	ldr	r1, [pc, #168]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	610b      	str	r3, [r1, #16]
 8005b82:	e027      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d112      	bne.n	8005bb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b8a:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6892      	ldr	r2, [r2, #8]
 8005b9a:	0211      	lsls	r1, r2, #8
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6912      	ldr	r2, [r2, #16]
 8005ba0:	0852      	lsrs	r2, r2, #1
 8005ba2:	3a01      	subs	r2, #1
 8005ba4:	0552      	lsls	r2, r2, #21
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	491f      	ldr	r1, [pc, #124]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	610b      	str	r3, [r1, #16]
 8005bae:	e011      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	0211      	lsls	r1, r2, #8
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6952      	ldr	r2, [r2, #20]
 8005bc6:	0852      	lsrs	r2, r2, #1
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	0652      	lsls	r2, r2, #25
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	4916      	ldr	r1, [pc, #88]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fc f87e 	bl	8001ce0 <HAL_GetTick>
 8005be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be6:	e009      	b.n	8005bfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be8:	f7fc f87a 	bl	8001ce0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d902      	bls.n	8005bfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfa:	e005      	b.n	8005c08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ef      	beq.n	8005be8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	4904      	ldr	r1, [pc, #16]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000

08005c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c3a:	4b6a      	ldr	r3, [pc, #424]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c46:	4b67      	ldr	r3, [pc, #412]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0203 	and.w	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d10d      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
       ||
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c5e:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d047      	beq.n	8005d02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e044      	b.n	8005d02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d018      	beq.n	8005cb2 <RCCEx_PLLSAI2_Config+0x86>
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d825      	bhi.n	8005cd0 <RCCEx_PLLSAI2_Config+0xa4>
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d002      	beq.n	8005c8e <RCCEx_PLLSAI2_Config+0x62>
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d009      	beq.n	8005ca0 <RCCEx_PLLSAI2_Config+0x74>
 8005c8c:	e020      	b.n	8005cd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c8e:	4b55      	ldr	r3, [pc, #340]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11d      	bne.n	8005cd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c9e:	e01a      	b.n	8005cd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d116      	bne.n	8005cda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb0:	e013      	b.n	8005cda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cb2:	4b4c      	ldr	r3, [pc, #304]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cbe:	4b49      	ldr	r3, [pc, #292]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cce:	e006      	b.n	8005cde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd4:	e004      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	4939      	ldr	r1, [pc, #228]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d167      	bne.n	8005dd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d08:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a35      	ldr	r2, [pc, #212]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d14:	f7fb ffe4 	bl	8001ce0 <HAL_GetTick>
 8005d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d1a:	e009      	b.n	8005d30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d1c:	f7fb ffe0 	bl	8001ce0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d902      	bls.n	8005d30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d2e:	e005      	b.n	8005d3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1ef      	bne.n	8005d1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d14a      	bne.n	8005dd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d111      	bne.n	8005d6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d48:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6892      	ldr	r2, [r2, #8]
 8005d58:	0211      	lsls	r1, r2, #8
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68d2      	ldr	r2, [r2, #12]
 8005d5e:	0912      	lsrs	r2, r2, #4
 8005d60:	0452      	lsls	r2, r2, #17
 8005d62:	430a      	orrs	r2, r1
 8005d64:	491f      	ldr	r1, [pc, #124]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	614b      	str	r3, [r1, #20]
 8005d6a:	e011      	b.n	8005d90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d6c:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6892      	ldr	r2, [r2, #8]
 8005d7c:	0211      	lsls	r1, r2, #8
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6912      	ldr	r2, [r2, #16]
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0652      	lsls	r2, r2, #25
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	4916      	ldr	r1, [pc, #88]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d90:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9c:	f7fb ffa0 	bl	8001ce0 <HAL_GetTick>
 8005da0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005da2:	e009      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005da4:	f7fb ff9c 	bl	8001ce0 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d902      	bls.n	8005db8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	73fb      	strb	r3, [r7, #15]
          break;
 8005db6:	e005      	b.n	8005dc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0ef      	beq.n	8005da4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4904      	ldr	r1, [pc, #16]	; (8005de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000

08005de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e049      	b.n	8005e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb fe12 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f000 faa2 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e04f      	b.n	8005f50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a23      	ldr	r2, [pc, #140]	; (8005f5c <HAL_TIM_Base_Start_IT+0xc4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01d      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d018      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x76>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d115      	bne.n	8005f3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d015      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0xb4>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d011      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	e008      	b.n	8005f4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e000      	b.n	8005f4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40013400 	.word	0x40013400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	00010007 	.word	0x00010007

08005f78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e049      	b.n	800601e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb fd26 	bl	80019f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 f9da 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d020      	beq.n	800608a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01b      	beq.n	800608a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0202 	mvn.w	r2, #2
 800605a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f95f 	bl	8006334 <HAL_TIM_IC_CaptureCallback>
 8006076:	e005      	b.n	8006084 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f951 	bl	8006320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f962 	bl	8006348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d020      	beq.n	80060d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01b      	beq.n	80060d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0204 	mvn.w	r2, #4
 80060a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f939 	bl	8006334 <HAL_TIM_IC_CaptureCallback>
 80060c2:	e005      	b.n	80060d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f92b 	bl	8006320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f93c 	bl	8006348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0208 	mvn.w	r2, #8
 80060f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f913 	bl	8006334 <HAL_TIM_IC_CaptureCallback>
 800610e:	e005      	b.n	800611c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f905 	bl	8006320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f916 	bl	8006348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d020      	beq.n	800616e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01b      	beq.n	800616e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0210 	mvn.w	r2, #16
 800613e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2208      	movs	r2, #8
 8006144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8ed 	bl	8006334 <HAL_TIM_IC_CaptureCallback>
 800615a:	e005      	b.n	8006168 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8df 	bl	8006320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8f0 	bl	8006348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00c      	beq.n	8006192 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f06f 0201 	mvn.w	r2, #1
 800618a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fb f899 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00c      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fd5d 	bl	8006c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00c      	beq.n	80061da <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fd55 	bl	8006c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8af 	bl	800635c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00c      	beq.n	8006222 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f06f 0220 	mvn.w	r2, #32
 800621a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fd1d 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006246:	2302      	movs	r3, #2
 8006248:	e066      	b.n	8006318 <HAL_TIM_OC_ConfigChannel+0xec>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b14      	cmp	r3, #20
 8006256:	d857      	bhi.n	8006308 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <HAL_TIM_OC_ConfigChannel+0x34>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006309 	.word	0x08006309
 8006268:	08006309 	.word	0x08006309
 800626c:	08006309 	.word	0x08006309
 8006270:	080062c3 	.word	0x080062c3
 8006274:	08006309 	.word	0x08006309
 8006278:	08006309 	.word	0x08006309
 800627c:	08006309 	.word	0x08006309
 8006280:	080062d1 	.word	0x080062d1
 8006284:	08006309 	.word	0x08006309
 8006288:	08006309 	.word	0x08006309
 800628c:	08006309 	.word	0x08006309
 8006290:	080062df 	.word	0x080062df
 8006294:	08006309 	.word	0x08006309
 8006298:	08006309 	.word	0x08006309
 800629c:	08006309 	.word	0x08006309
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	08006309 	.word	0x08006309
 80062a8:	08006309 	.word	0x08006309
 80062ac:	08006309 	.word	0x08006309
 80062b0:	080062fb 	.word	0x080062fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f8f2 	bl	80064a4 <TIM_OC1_SetConfig>
      break;
 80062c0:	e025      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f97b 	bl	80065c4 <TIM_OC2_SetConfig>
      break;
 80062ce:	e01e      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f9fe 	bl	80066d8 <TIM_OC3_SetConfig>
      break;
 80062dc:	e017      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fa7f 	bl	80067e8 <TIM_OC4_SetConfig>
      break;
 80062ea:	e010      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fae2 	bl	80068bc <TIM_OC5_SetConfig>
      break;
 80062f8:	e009      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fb3f 	bl	8006984 <TIM_OC6_SetConfig>
      break;
 8006306:	e002      	b.n	800630e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
      break;
 800630c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a40      	ldr	r2, [pc, #256]	; (8006484 <TIM_Base_SetConfig+0x114>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3d      	ldr	r2, [pc, #244]	; (8006488 <TIM_Base_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3c      	ldr	r2, [pc, #240]	; (800648c <TIM_Base_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <TIM_Base_SetConfig+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01f      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d01b      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <TIM_Base_SetConfig+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d017      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <TIM_Base_SetConfig+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <TIM_Base_SetConfig+0x128>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <TIM_Base_SetConfig+0x12c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <TIM_Base_SetConfig+0x130>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a10      	ldr	r2, [pc, #64]	; (8006484 <TIM_Base_SetConfig+0x114>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00f      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <TIM_Base_SetConfig+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a11      	ldr	r2, [pc, #68]	; (8006498 <TIM_Base_SetConfig+0x128>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a10      	ldr	r2, [pc, #64]	; (800649c <TIM_Base_SetConfig+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a0f      	ldr	r2, [pc, #60]	; (80064a0 <TIM_Base_SetConfig+0x130>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800

080064a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0201 	bic.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 0302 	bic.w	r3, r3, #2
 80064f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2c      	ldr	r2, [pc, #176]	; (80065b0 <TIM_OC1_SetConfig+0x10c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_OC1_SetConfig+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <TIM_OC1_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_OC1_SetConfig+0x80>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <TIM_OC1_SetConfig+0x114>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_OC1_SetConfig+0x80>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <TIM_OC1_SetConfig+0x118>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC1_SetConfig+0x80>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <TIM_OC1_SetConfig+0x11c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10c      	bne.n	800653e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0308 	bic.w	r3, r3, #8
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <TIM_OC1_SetConfig+0x10c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_OC1_SetConfig+0xc2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <TIM_OC1_SetConfig+0x110>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_OC1_SetConfig+0xc2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <TIM_OC1_SetConfig+0x114>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_OC1_SetConfig+0xc2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a18      	ldr	r2, [pc, #96]	; (80065bc <TIM_OC1_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC1_SetConfig+0xc2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <TIM_OC1_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d111      	bne.n	800658a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f023 0210 	bic.w	r2, r3, #16
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0320 	bic.w	r3, r3, #32
 8006612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a28      	ldr	r2, [pc, #160]	; (80066c4 <TIM_OC2_SetConfig+0x100>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_OC2_SetConfig+0x6c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <TIM_OC2_SetConfig+0x104>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10d      	bne.n	800664c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <TIM_OC2_SetConfig+0x100>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00f      	beq.n	8006674 <TIM_OC2_SetConfig+0xb0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1c      	ldr	r2, [pc, #112]	; (80066c8 <TIM_OC2_SetConfig+0x104>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00b      	beq.n	8006674 <TIM_OC2_SetConfig+0xb0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <TIM_OC2_SetConfig+0x108>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC2_SetConfig+0xb0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <TIM_OC2_SetConfig+0x10c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0xb0>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <TIM_OC2_SetConfig+0x110>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d113      	bne.n	800669c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800667a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40013400 	.word	0x40013400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40014800 	.word	0x40014800

080066d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a27      	ldr	r2, [pc, #156]	; (80067d4 <TIM_OC3_SetConfig+0xfc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC3_SetConfig+0x6a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a26      	ldr	r2, [pc, #152]	; (80067d8 <TIM_OC3_SetConfig+0x100>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10d      	bne.n	800675e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800675c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <TIM_OC3_SetConfig+0xfc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00f      	beq.n	8006786 <TIM_OC3_SetConfig+0xae>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <TIM_OC3_SetConfig+0x100>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00b      	beq.n	8006786 <TIM_OC3_SetConfig+0xae>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a1a      	ldr	r2, [pc, #104]	; (80067dc <TIM_OC3_SetConfig+0x104>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d007      	beq.n	8006786 <TIM_OC3_SetConfig+0xae>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a19      	ldr	r2, [pc, #100]	; (80067e0 <TIM_OC3_SetConfig+0x108>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC3_SetConfig+0xae>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <TIM_OC3_SetConfig+0x10c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d113      	bne.n	80067ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <TIM_OC4_SetConfig+0xc0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00f      	beq.n	800686c <TIM_OC4_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a17      	ldr	r2, [pc, #92]	; (80068ac <TIM_OC4_SetConfig+0xc4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00b      	beq.n	800686c <TIM_OC4_SetConfig+0x84>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <TIM_OC4_SetConfig+0xc8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <TIM_OC4_SetConfig+0x84>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <TIM_OC4_SetConfig+0xcc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_OC4_SetConfig+0x84>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <TIM_OC4_SetConfig+0xd0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d109      	bne.n	8006880 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	019b      	lsls	r3, r3, #6
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a17      	ldr	r2, [pc, #92]	; (8006970 <TIM_OC5_SetConfig+0xb4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_OC5_SetConfig+0x7a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <TIM_OC5_SetConfig+0xb8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_OC5_SetConfig+0x7a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <TIM_OC5_SetConfig+0xbc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_OC5_SetConfig+0x7a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <TIM_OC5_SetConfig+0xc0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_OC5_SetConfig+0x7a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <TIM_OC5_SetConfig+0xc4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d109      	bne.n	800694a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	621a      	str	r2, [r3, #32]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40013400 	.word	0x40013400
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800

08006984 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	051b      	lsls	r3, r3, #20
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <TIM_OC6_SetConfig+0xb8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00f      	beq.n	8006a00 <TIM_OC6_SetConfig+0x7c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <TIM_OC6_SetConfig+0xbc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <TIM_OC6_SetConfig+0x7c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <TIM_OC6_SetConfig+0xc0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <TIM_OC6_SetConfig+0x7c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <TIM_OC6_SetConfig+0xc4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC6_SetConfig+0x7c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <TIM_OC6_SetConfig+0xc8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d109      	bne.n	8006a14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40013400 	.word	0x40013400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800

08006a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e068      	b.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2e      	ldr	r2, [pc, #184]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2d      	ldr	r2, [pc, #180]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01d      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d018      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d10c      	bne.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000

08006b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e065      	b.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d115      	bne.n	8006c36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40013400 	.word	0x40013400

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e040      	b.n	8006d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fa ff12 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fe48 	bl	8007974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb8d 	bl	8007404 <UART_SetConfig>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e01b      	b.n	8006d2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fec7 	bl	8007ab8 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b08b      	sub	sp, #44	; 0x2c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d147      	bne.n	8006dda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_UART_Transmit_IT+0x22>
 8006d50:	88fb      	ldrh	r3, [r7, #6]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e040      	b.n	8006ddc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	88fa      	ldrh	r2, [r7, #6]
 8006d64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	d107      	bne.n	8006d9e <HAL_UART_Transmit_IT+0x6a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <HAL_UART_Transmit_IT+0xb4>)
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d9c:	e002      	b.n	8006da4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a12      	ldr	r2, [pc, #72]	; (8006dec <HAL_UART_Transmit_IT+0xb8>)
 8006da2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	613b      	str	r3, [r7, #16]
   return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	69f9      	ldr	r1, [r7, #28]
 8006dc8:	6a3a      	ldr	r2, [r7, #32]
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e6      	bne.n	8006da4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006dda:	2302      	movs	r3, #2
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	372c      	adds	r7, #44	; 0x2c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	08007e83 	.word	0x08007e83
 8006dec:	08007dcb 	.word	0x08007dcb

08006df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0ba      	sub	sp, #232	; 0xe8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e1e:	4013      	ands	r3, r2
 8006e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00f      	beq.n	8006e58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 82ae 	beq.w	80073aa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      }
      return;
 8006e56:	e2a8      	b.n	80073aa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8117 	beq.w	8007090 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e72:	4b85      	ldr	r3, [pc, #532]	; (8007088 <HAL_UART_IRQHandler+0x298>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 810a 	beq.w	8007090 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_UART_IRQHandler+0xbc>
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea2:	f043 0201 	orr.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d011      	beq.n	8006edc <HAL_UART_IRQHandler+0xec>
 8006eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	f043 0204 	orr.w	r2, r3, #4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d011      	beq.n	8006f0c <HAL_UART_IRQHandler+0x11c>
 8006ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f02:	f043 0202 	orr.w	r2, r3, #2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d017      	beq.n	8006f48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2208      	movs	r2, #8
 8006f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3e:	f043 0208 	orr.w	r2, r3, #8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d012      	beq.n	8006f7a <HAL_UART_IRQHandler+0x18a>
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8214 	beq.w	80073ae <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc2:	2b40      	cmp	r3, #64	; 0x40
 8006fc4:	d005      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d04f      	beq.n	8007072 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fe7f 	bl	8007cd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d141      	bne.n	800706a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800701e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800702a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1d9      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007036:	2b00      	cmp	r3, #0
 8007038:	d013      	beq.n	8007062 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703e:	4a13      	ldr	r2, [pc, #76]	; (800708c <HAL_UART_IRQHandler+0x29c>)
 8007040:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa ffc9 	bl	8001fde <HAL_DMA_Abort_IT>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d017      	beq.n	8007082 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	e00f      	b.n	8007082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9b8 	bl	80073d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	e00b      	b.n	8007082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9b4 	bl	80073d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007070:	e007      	b.n	8007082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9b0 	bl	80073d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007080:	e195      	b.n	80073ae <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007082:	bf00      	nop
    return;
 8007084:	e193      	b.n	80073ae <HAL_UART_IRQHandler+0x5be>
 8007086:	bf00      	nop
 8007088:	04000120 	.word	0x04000120
 800708c:	08007d9f 	.word	0x08007d9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	2b01      	cmp	r3, #1
 8007096:	f040 814e 	bne.w	8007336 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8147 	beq.w	8007336 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8140 	beq.w	8007336 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2210      	movs	r2, #16
 80070bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	f040 80b8 	bne.w	800723e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8167 	beq.w	80073b2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ee:	429a      	cmp	r2, r3
 80070f0:	f080 815f 	bcs.w	80073b2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 8086 	bne.w	800721c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800713a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800713e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1da      	bne.n	8007110 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800716a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3308      	adds	r3, #8
 800717a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800717e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e1      	bne.n	800715a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3308      	adds	r3, #8
 80071b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e3      	bne.n	8007196 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007200:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800720c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e4      	bne.n	80071dc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007216:	4618      	mov	r0, r3
 8007218:	f7fa fea3 	bl	8001f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800722e:	b29b      	uxth	r3, r3
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	b29b      	uxth	r3, r3
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f8d8 	bl	80073ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800723c:	e0b9      	b.n	80073b2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800724a:	b29b      	uxth	r3, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80ab 	beq.w	80073b6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80a6 	beq.w	80073b6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800728c:	647b      	str	r3, [r7, #68]	; 0x44
 800728e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e4      	bne.n	800726a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	623b      	str	r3, [r7, #32]
   return(result);
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072c4:	633a      	str	r2, [r7, #48]	; 0x30
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e3      	bne.n	80072a0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f023 0310 	bic.w	r3, r3, #16
 8007300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	69b9      	ldr	r1, [r7, #24]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	617b      	str	r3, [r7, #20]
   return(result);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e4      	bne.n	80072ec <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f85c 	bl	80073ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007334:	e03f      	b.n	80073b6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00e      	beq.n	8007360 <HAL_UART_IRQHandler+0x570>
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fe1c 	bl	8007f96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800735e:	e02d      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b00      	cmp	r3, #0
 8007376:	d008      	beq.n	800738a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01c      	beq.n	80073ba <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
    }
    return;
 8007388:	e017      	b.n	80073ba <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <HAL_UART_IRQHandler+0x5cc>
 8007396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fdcd 	bl	8007f42 <UART_EndTransmit_IT>
    return;
 80073a8:	e008      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
      return;
 80073aa:	bf00      	nop
 80073ac:	e006      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
    return;
 80073ae:	bf00      	nop
 80073b0:	e004      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
      return;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
      return;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <HAL_UART_IRQHandler+0x5cc>
    return;
 80073ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80073bc:	37e8      	adds	r7, #232	; 0xe8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop

080073c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007408:	b08a      	sub	sp, #40	; 0x28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	431a      	orrs	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4313      	orrs	r3, r2
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4ba4      	ldr	r3, [pc, #656]	; (80076c4 <UART_SetConfig+0x2c0>)
 8007434:	4013      	ands	r3, r2
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800743c:	430b      	orrs	r3, r1
 800743e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a99      	ldr	r2, [pc, #612]	; (80076c8 <UART_SetConfig+0x2c4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746c:	4313      	orrs	r3, r2
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a90      	ldr	r2, [pc, #576]	; (80076cc <UART_SetConfig+0x2c8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d126      	bne.n	80074dc <UART_SetConfig+0xd8>
 800748e:	4b90      	ldr	r3, [pc, #576]	; (80076d0 <UART_SetConfig+0x2cc>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b03      	cmp	r3, #3
 800749a:	d81b      	bhi.n	80074d4 <UART_SetConfig+0xd0>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0xa0>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ba:	e116      	b.n	80076ea <UART_SetConfig+0x2e6>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e112      	b.n	80076ea <UART_SetConfig+0x2e6>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e10e      	b.n	80076ea <UART_SetConfig+0x2e6>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d2:	e10a      	b.n	80076ea <UART_SetConfig+0x2e6>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074da:	e106      	b.n	80076ea <UART_SetConfig+0x2e6>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7c      	ldr	r2, [pc, #496]	; (80076d4 <UART_SetConfig+0x2d0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d138      	bne.n	8007558 <UART_SetConfig+0x154>
 80074e6:	4b7a      	ldr	r3, [pc, #488]	; (80076d0 <UART_SetConfig+0x2cc>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d82d      	bhi.n	8007550 <UART_SetConfig+0x14c>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0xf8>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007531 	.word	0x08007531
 8007500:	08007551 	.word	0x08007551
 8007504:	08007551 	.word	0x08007551
 8007508:	08007551 	.word	0x08007551
 800750c:	08007541 	.word	0x08007541
 8007510:	08007551 	.word	0x08007551
 8007514:	08007551 	.word	0x08007551
 8007518:	08007551 	.word	0x08007551
 800751c:	08007539 	.word	0x08007539
 8007520:	08007551 	.word	0x08007551
 8007524:	08007551 	.word	0x08007551
 8007528:	08007551 	.word	0x08007551
 800752c:	08007549 	.word	0x08007549
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007536:	e0d8      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007538:	2302      	movs	r3, #2
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753e:	e0d4      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007546:	e0d0      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800754e:	e0cc      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007556:	e0c8      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a5e      	ldr	r2, [pc, #376]	; (80076d8 <UART_SetConfig+0x2d4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d125      	bne.n	80075ae <UART_SetConfig+0x1aa>
 8007562:	4b5b      	ldr	r3, [pc, #364]	; (80076d0 <UART_SetConfig+0x2cc>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800756c:	2b30      	cmp	r3, #48	; 0x30
 800756e:	d016      	beq.n	800759e <UART_SetConfig+0x19a>
 8007570:	2b30      	cmp	r3, #48	; 0x30
 8007572:	d818      	bhi.n	80075a6 <UART_SetConfig+0x1a2>
 8007574:	2b20      	cmp	r3, #32
 8007576:	d00a      	beq.n	800758e <UART_SetConfig+0x18a>
 8007578:	2b20      	cmp	r3, #32
 800757a:	d814      	bhi.n	80075a6 <UART_SetConfig+0x1a2>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <UART_SetConfig+0x182>
 8007580:	2b10      	cmp	r3, #16
 8007582:	d008      	beq.n	8007596 <UART_SetConfig+0x192>
 8007584:	e00f      	b.n	80075a6 <UART_SetConfig+0x1a2>
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758c:	e0ad      	b.n	80076ea <UART_SetConfig+0x2e6>
 800758e:	2302      	movs	r3, #2
 8007590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007594:	e0a9      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007596:	2304      	movs	r3, #4
 8007598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759c:	e0a5      	b.n	80076ea <UART_SetConfig+0x2e6>
 800759e:	2308      	movs	r3, #8
 80075a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075a4:	e0a1      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075a6:	2310      	movs	r3, #16
 80075a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ac:	e09d      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a4a      	ldr	r2, [pc, #296]	; (80076dc <UART_SetConfig+0x2d8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d125      	bne.n	8007604 <UART_SetConfig+0x200>
 80075b8:	4b45      	ldr	r3, [pc, #276]	; (80076d0 <UART_SetConfig+0x2cc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d016      	beq.n	80075f4 <UART_SetConfig+0x1f0>
 80075c6:	2bc0      	cmp	r3, #192	; 0xc0
 80075c8:	d818      	bhi.n	80075fc <UART_SetConfig+0x1f8>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d00a      	beq.n	80075e4 <UART_SetConfig+0x1e0>
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d814      	bhi.n	80075fc <UART_SetConfig+0x1f8>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <UART_SetConfig+0x1d8>
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d008      	beq.n	80075ec <UART_SetConfig+0x1e8>
 80075da:	e00f      	b.n	80075fc <UART_SetConfig+0x1f8>
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e2:	e082      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075e4:	2302      	movs	r3, #2
 80075e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ea:	e07e      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f2:	e07a      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fa:	e076      	b.n	80076ea <UART_SetConfig+0x2e6>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007602:	e072      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a35      	ldr	r2, [pc, #212]	; (80076e0 <UART_SetConfig+0x2dc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d12a      	bne.n	8007664 <UART_SetConfig+0x260>
 800760e:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <UART_SetConfig+0x2cc>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800761c:	d01a      	beq.n	8007654 <UART_SetConfig+0x250>
 800761e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007622:	d81b      	bhi.n	800765c <UART_SetConfig+0x258>
 8007624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007628:	d00c      	beq.n	8007644 <UART_SetConfig+0x240>
 800762a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800762e:	d815      	bhi.n	800765c <UART_SetConfig+0x258>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <UART_SetConfig+0x238>
 8007634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007638:	d008      	beq.n	800764c <UART_SetConfig+0x248>
 800763a:	e00f      	b.n	800765c <UART_SetConfig+0x258>
 800763c:	2300      	movs	r3, #0
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007642:	e052      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007644:	2302      	movs	r3, #2
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764a:	e04e      	b.n	80076ea <UART_SetConfig+0x2e6>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007652:	e04a      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e046      	b.n	80076ea <UART_SetConfig+0x2e6>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007662:	e042      	b.n	80076ea <UART_SetConfig+0x2e6>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <UART_SetConfig+0x2c4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d13a      	bne.n	80076e4 <UART_SetConfig+0x2e0>
 800766e:	4b18      	ldr	r3, [pc, #96]	; (80076d0 <UART_SetConfig+0x2cc>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800767c:	d01a      	beq.n	80076b4 <UART_SetConfig+0x2b0>
 800767e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007682:	d81b      	bhi.n	80076bc <UART_SetConfig+0x2b8>
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007688:	d00c      	beq.n	80076a4 <UART_SetConfig+0x2a0>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d815      	bhi.n	80076bc <UART_SetConfig+0x2b8>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <UART_SetConfig+0x298>
 8007694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007698:	d008      	beq.n	80076ac <UART_SetConfig+0x2a8>
 800769a:	e00f      	b.n	80076bc <UART_SetConfig+0x2b8>
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a2:	e022      	b.n	80076ea <UART_SetConfig+0x2e6>
 80076a4:	2302      	movs	r3, #2
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076aa:	e01e      	b.n	80076ea <UART_SetConfig+0x2e6>
 80076ac:	2304      	movs	r3, #4
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b2:	e01a      	b.n	80076ea <UART_SetConfig+0x2e6>
 80076b4:	2308      	movs	r3, #8
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ba:	e016      	b.n	80076ea <UART_SetConfig+0x2e6>
 80076bc:	2310      	movs	r3, #16
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c2:	e012      	b.n	80076ea <UART_SetConfig+0x2e6>
 80076c4:	efff69f3 	.word	0xefff69f3
 80076c8:	40008000 	.word	0x40008000
 80076cc:	40013800 	.word	0x40013800
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40004400 	.word	0x40004400
 80076d8:	40004800 	.word	0x40004800
 80076dc:	40004c00 	.word	0x40004c00
 80076e0:	40005000 	.word	0x40005000
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a9f      	ldr	r2, [pc, #636]	; (800796c <UART_SetConfig+0x568>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d17a      	bne.n	80077ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d824      	bhi.n	8007746 <UART_SetConfig+0x342>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0x300>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007729 	.word	0x08007729
 8007708:	08007747 	.word	0x08007747
 800770c:	08007731 	.word	0x08007731
 8007710:	08007747 	.word	0x08007747
 8007714:	08007737 	.word	0x08007737
 8007718:	08007747 	.word	0x08007747
 800771c:	08007747 	.word	0x08007747
 8007720:	08007747 	.word	0x08007747
 8007724:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fd fe16 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 800772c:	61f8      	str	r0, [r7, #28]
        break;
 800772e:	e010      	b.n	8007752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b8f      	ldr	r3, [pc, #572]	; (8007970 <UART_SetConfig+0x56c>)
 8007732:	61fb      	str	r3, [r7, #28]
        break;
 8007734:	e00d      	b.n	8007752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd fd77 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 800773a:	61f8      	str	r0, [r7, #28]
        break;
 800773c:	e009      	b.n	8007752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	61fb      	str	r3, [r7, #28]
        break;
 8007744:	e005      	b.n	8007752 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80fb 	beq.w	8007950 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	429a      	cmp	r2, r3
 8007768:	d305      	bcc.n	8007776 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	429a      	cmp	r2, r3
 8007774:	d903      	bls.n	800777e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800777c:	e0e8      	b.n	8007950 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	461c      	mov	r4, r3
 8007784:	4615      	mov	r5, r2
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	022b      	lsls	r3, r5, #8
 8007790:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007794:	0222      	lsls	r2, r4, #8
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	6849      	ldr	r1, [r1, #4]
 800779a:	0849      	lsrs	r1, r1, #1
 800779c:	2000      	movs	r0, #0
 800779e:	4688      	mov	r8, r1
 80077a0:	4681      	mov	r9, r0
 80077a2:	eb12 0a08 	adds.w	sl, r2, r8
 80077a6:	eb43 0b09 	adc.w	fp, r3, r9
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	603b      	str	r3, [r7, #0]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f9 fa64 	bl	8000c88 <__aeabi_uldivmod>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4613      	mov	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ce:	d308      	bcc.n	80077e2 <UART_SetConfig+0x3de>
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077d6:	d204      	bcs.n	80077e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	e0b6      	b.n	8007950 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077e8:	e0b2      	b.n	8007950 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f2:	d15e      	bne.n	80078b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d828      	bhi.n	800784e <UART_SetConfig+0x44a>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <UART_SetConfig+0x400>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	0800784f 	.word	0x0800784f
 8007814:	0800783f 	.word	0x0800783f
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800784f 	.word	0x0800784f
 8007820:	0800784f 	.word	0x0800784f
 8007824:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007828:	f7fd fd96 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 800782c:	61f8      	str	r0, [r7, #28]
        break;
 800782e:	e014      	b.n	800785a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7fd fda8 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 8007834:	61f8      	str	r0, [r7, #28]
        break;
 8007836:	e010      	b.n	800785a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <UART_SetConfig+0x56c>)
 800783a:	61fb      	str	r3, [r7, #28]
        break;
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fd fcf3 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007842:	61f8      	str	r0, [r7, #28]
        break;
 8007844:	e009      	b.n	800785a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	61fb      	str	r3, [r7, #28]
        break;
 800784c:	e005      	b.n	800785a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d077      	beq.n	8007950 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	005a      	lsls	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b0f      	cmp	r3, #15
 800787a:	d916      	bls.n	80078aa <UART_SetConfig+0x4a6>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007882:	d212      	bcs.n	80078aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f023 030f 	bic.w	r3, r3, #15
 800788c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	b29a      	uxth	r2, r3
 800789a:	8afb      	ldrh	r3, [r7, #22]
 800789c:	4313      	orrs	r3, r2
 800789e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	8afa      	ldrh	r2, [r7, #22]
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e052      	b.n	8007950 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078b0:	e04e      	b.n	8007950 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d827      	bhi.n	800790a <UART_SetConfig+0x506>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x4bc>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	0800790b 	.word	0x0800790b
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	0800790b 	.word	0x0800790b
 80078d8:	0800790b 	.word	0x0800790b
 80078dc:	0800790b 	.word	0x0800790b
 80078e0:	08007903 	.word	0x08007903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fd fd38 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 80078e8:	61f8      	str	r0, [r7, #28]
        break;
 80078ea:	e014      	b.n	8007916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ec:	f7fd fd4a 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 80078f0:	61f8      	str	r0, [r7, #28]
        break;
 80078f2:	e010      	b.n	8007916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f4:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <UART_SetConfig+0x56c>)
 80078f6:	61fb      	str	r3, [r7, #28]
        break;
 80078f8:	e00d      	b.n	8007916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fa:	f7fd fc95 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80078fe:	61f8      	str	r0, [r7, #28]
        break;
 8007900:	e009      	b.n	8007916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	61fb      	str	r3, [r7, #28]
        break;
 8007908:	e005      	b.n	8007916 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007914:	bf00      	nop
    }

    if (pclk != 0U)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d019      	beq.n	8007950 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	085a      	lsrs	r2, r3, #1
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b0f      	cmp	r3, #15
 8007934:	d909      	bls.n	800794a <UART_SetConfig+0x546>
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793c:	d205      	bcs.n	800794a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	e002      	b.n	8007950 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800795c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007960:	4618      	mov	r0, r3
 8007962:	3728      	adds	r7, #40	; 0x28
 8007964:	46bd      	mov	sp, r7
 8007966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800796a:	bf00      	nop
 800796c:	40008000 	.word	0x40008000
 8007970:	00f42400 	.word	0x00f42400

08007974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01a      	beq.n	8007a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a72:	d10a      	bne.n	8007a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	605a      	str	r2, [r3, #4]
  }
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b098      	sub	sp, #96	; 0x60
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ac8:	f7fa f90a 	bl	8001ce0 <HAL_GetTick>
 8007acc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d12e      	bne.n	8007b3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f88c 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d021      	beq.n	8007b3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e062      	b.n	8007c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d149      	bne.n	8007bdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b50:	2200      	movs	r2, #0
 8007b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f856 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d03c      	beq.n	8007bdc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	633b      	str	r3, [r7, #48]	; 0x30
 8007b82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb4:	61fa      	str	r2, [r7, #28]
 8007bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	69b9      	ldr	r1, [r7, #24]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e5      	bne.n	8007b94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e011      	b.n	8007c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3758      	adds	r7, #88	; 0x58
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c18:	e049      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d045      	beq.n	8007cae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c22:	f7fa f85d 	bl	8001ce0 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e048      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d031      	beq.n	8007cae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d110      	bne.n	8007c7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f838 	bl	8007cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2208      	movs	r2, #8
 8007c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e029      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c88:	d111      	bne.n	8007cae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f81e 	bl	8007cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e00f      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	2300      	movne	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d0a6      	beq.n	8007c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b095      	sub	sp, #84	; 0x54
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d118      	bne.n	8007d7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0310 	bic.w	r3, r3, #16
 8007d60:	647b      	str	r3, [r7, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d92:	bf00      	nop
 8007d94:	3754      	adds	r7, #84	; 0x54
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fb0b 	bl	80073d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b08f      	sub	sp, #60	; 0x3c
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd6:	2b21      	cmp	r3, #33	; 0x21
 8007dd8:	d14d      	bne.n	8007e76 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d132      	bne.n	8007e4c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	613b      	str	r3, [r7, #16]
   return(result);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e4a:	e014      	b.n	8007e76 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	b292      	uxth	r2, r2
 8007e58:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e76:	bf00      	nop
 8007e78:	373c      	adds	r7, #60	; 0x3c
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b091      	sub	sp, #68	; 0x44
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8e:	2b21      	cmp	r3, #33	; 0x21
 8007e90:	d151      	bne.n	8007f36 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d132      	bne.n	8007f04 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e6      	bne.n	8007e9e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	69b9      	ldr	r1, [r7, #24]
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	617b      	str	r3, [r7, #20]
   return(result);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007f02:	e018      	b.n	8007f36 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f16:	b292      	uxth	r2, r2
 8007f18:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1e:	1c9a      	adds	r2, r3, #2
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007f36:	bf00      	nop
 8007f38:	3744      	adds	r7, #68	; 0x44
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b088      	sub	sp, #32
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff fa1b 	bl	80073c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f8e:	bf00      	nop
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <__cvt>:
 8007faa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fae:	ec55 4b10 	vmov	r4, r5, d0
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	460e      	mov	r6, r1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	462b      	mov	r3, r5
 8007fba:	bfbb      	ittet	lt
 8007fbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fc0:	461d      	movlt	r5, r3
 8007fc2:	2300      	movge	r3, #0
 8007fc4:	232d      	movlt	r3, #45	; 0x2d
 8007fc6:	700b      	strb	r3, [r1, #0]
 8007fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fce:	4691      	mov	r9, r2
 8007fd0:	f023 0820 	bic.w	r8, r3, #32
 8007fd4:	bfbc      	itt	lt
 8007fd6:	4622      	movlt	r2, r4
 8007fd8:	4614      	movlt	r4, r2
 8007fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fde:	d005      	beq.n	8007fec <__cvt+0x42>
 8007fe0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fe4:	d100      	bne.n	8007fe8 <__cvt+0x3e>
 8007fe6:	3601      	adds	r6, #1
 8007fe8:	2102      	movs	r1, #2
 8007fea:	e000      	b.n	8007fee <__cvt+0x44>
 8007fec:	2103      	movs	r1, #3
 8007fee:	ab03      	add	r3, sp, #12
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	ab02      	add	r3, sp, #8
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	ec45 4b10 	vmov	d0, r4, r5
 8007ffa:	4653      	mov	r3, sl
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	f001 f87f 	bl	8009100 <_dtoa_r>
 8008002:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008006:	4607      	mov	r7, r0
 8008008:	d102      	bne.n	8008010 <__cvt+0x66>
 800800a:	f019 0f01 	tst.w	r9, #1
 800800e:	d022      	beq.n	8008056 <__cvt+0xac>
 8008010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008014:	eb07 0906 	add.w	r9, r7, r6
 8008018:	d110      	bne.n	800803c <__cvt+0x92>
 800801a:	783b      	ldrb	r3, [r7, #0]
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d10a      	bne.n	8008036 <__cvt+0x8c>
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800802c:	b918      	cbnz	r0, 8008036 <__cvt+0x8c>
 800802e:	f1c6 0601 	rsb	r6, r6, #1
 8008032:	f8ca 6000 	str.w	r6, [sl]
 8008036:	f8da 3000 	ldr.w	r3, [sl]
 800803a:	4499      	add	r9, r3
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008048:	b108      	cbz	r0, 800804e <__cvt+0xa4>
 800804a:	f8cd 900c 	str.w	r9, [sp, #12]
 800804e:	2230      	movs	r2, #48	; 0x30
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	454b      	cmp	r3, r9
 8008054:	d307      	bcc.n	8008066 <__cvt+0xbc>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800805a:	1bdb      	subs	r3, r3, r7
 800805c:	4638      	mov	r0, r7
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	b004      	add	sp, #16
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	9103      	str	r1, [sp, #12]
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	e7f0      	b.n	8008050 <__cvt+0xa6>

0800806e <__exponent>:
 800806e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008070:	4603      	mov	r3, r0
 8008072:	2900      	cmp	r1, #0
 8008074:	bfb8      	it	lt
 8008076:	4249      	neglt	r1, r1
 8008078:	f803 2b02 	strb.w	r2, [r3], #2
 800807c:	bfb4      	ite	lt
 800807e:	222d      	movlt	r2, #45	; 0x2d
 8008080:	222b      	movge	r2, #43	; 0x2b
 8008082:	2909      	cmp	r1, #9
 8008084:	7042      	strb	r2, [r0, #1]
 8008086:	dd2a      	ble.n	80080de <__exponent+0x70>
 8008088:	f10d 0207 	add.w	r2, sp, #7
 800808c:	4617      	mov	r7, r2
 800808e:	260a      	movs	r6, #10
 8008090:	4694      	mov	ip, r2
 8008092:	fb91 f5f6 	sdiv	r5, r1, r6
 8008096:	fb06 1415 	mls	r4, r6, r5, r1
 800809a:	3430      	adds	r4, #48	; 0x30
 800809c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80080a0:	460c      	mov	r4, r1
 80080a2:	2c63      	cmp	r4, #99	; 0x63
 80080a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80080a8:	4629      	mov	r1, r5
 80080aa:	dcf1      	bgt.n	8008090 <__exponent+0x22>
 80080ac:	3130      	adds	r1, #48	; 0x30
 80080ae:	f1ac 0402 	sub.w	r4, ip, #2
 80080b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080b6:	1c41      	adds	r1, r0, #1
 80080b8:	4622      	mov	r2, r4
 80080ba:	42ba      	cmp	r2, r7
 80080bc:	d30a      	bcc.n	80080d4 <__exponent+0x66>
 80080be:	f10d 0209 	add.w	r2, sp, #9
 80080c2:	eba2 020c 	sub.w	r2, r2, ip
 80080c6:	42bc      	cmp	r4, r7
 80080c8:	bf88      	it	hi
 80080ca:	2200      	movhi	r2, #0
 80080cc:	4413      	add	r3, r2
 80080ce:	1a18      	subs	r0, r3, r0
 80080d0:	b003      	add	sp, #12
 80080d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080d8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80080dc:	e7ed      	b.n	80080ba <__exponent+0x4c>
 80080de:	2330      	movs	r3, #48	; 0x30
 80080e0:	3130      	adds	r1, #48	; 0x30
 80080e2:	7083      	strb	r3, [r0, #2]
 80080e4:	70c1      	strb	r1, [r0, #3]
 80080e6:	1d03      	adds	r3, r0, #4
 80080e8:	e7f1      	b.n	80080ce <__exponent+0x60>
	...

080080ec <_printf_float>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	ed2d 8b02 	vpush	{d8}
 80080f4:	b08d      	sub	sp, #52	; 0x34
 80080f6:	460c      	mov	r4, r1
 80080f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080fc:	4616      	mov	r6, r2
 80080fe:	461f      	mov	r7, r3
 8008100:	4605      	mov	r5, r0
 8008102:	f000 fef7 	bl	8008ef4 <_localeconv_r>
 8008106:	f8d0 a000 	ldr.w	sl, [r0]
 800810a:	4650      	mov	r0, sl
 800810c:	f7f8 f8b0 	bl	8000270 <strlen>
 8008110:	2300      	movs	r3, #0
 8008112:	930a      	str	r3, [sp, #40]	; 0x28
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	9305      	str	r3, [sp, #20]
 8008118:	f8d8 3000 	ldr.w	r3, [r8]
 800811c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008120:	3307      	adds	r3, #7
 8008122:	f023 0307 	bic.w	r3, r3, #7
 8008126:	f103 0208 	add.w	r2, r3, #8
 800812a:	f8c8 2000 	str.w	r2, [r8]
 800812e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f8cd 8018 	str.w	r8, [sp, #24]
 800813c:	ee08 0a10 	vmov	s16, r0
 8008140:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008148:	4b9e      	ldr	r3, [pc, #632]	; (80083c4 <_printf_float+0x2d8>)
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	f7f8 fced 	bl	8000b2c <__aeabi_dcmpun>
 8008152:	bb88      	cbnz	r0, 80081b8 <_printf_float+0xcc>
 8008154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008158:	4b9a      	ldr	r3, [pc, #616]	; (80083c4 <_printf_float+0x2d8>)
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	f7f8 fcc7 	bl	8000af0 <__aeabi_dcmple>
 8008162:	bb48      	cbnz	r0, 80081b8 <_printf_float+0xcc>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4640      	mov	r0, r8
 800816a:	4649      	mov	r1, r9
 800816c:	f7f8 fcb6 	bl	8000adc <__aeabi_dcmplt>
 8008170:	b110      	cbz	r0, 8008178 <_printf_float+0x8c>
 8008172:	232d      	movs	r3, #45	; 0x2d
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008178:	4a93      	ldr	r2, [pc, #588]	; (80083c8 <_printf_float+0x2dc>)
 800817a:	4b94      	ldr	r3, [pc, #592]	; (80083cc <_printf_float+0x2e0>)
 800817c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008180:	bf94      	ite	ls
 8008182:	4690      	movls	r8, r2
 8008184:	4698      	movhi	r8, r3
 8008186:	2303      	movs	r3, #3
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	f04f 0900 	mov.w	r9, #0
 8008196:	9700      	str	r7, [sp, #0]
 8008198:	4633      	mov	r3, r6
 800819a:	aa0b      	add	r2, sp, #44	; 0x2c
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f9da 	bl	8008558 <_printf_common>
 80081a4:	3001      	adds	r0, #1
 80081a6:	f040 8090 	bne.w	80082ca <_printf_float+0x1de>
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	b00d      	add	sp, #52	; 0x34
 80081b0:	ecbd 8b02 	vpop	{d8}
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	4642      	mov	r2, r8
 80081ba:	464b      	mov	r3, r9
 80081bc:	4640      	mov	r0, r8
 80081be:	4649      	mov	r1, r9
 80081c0:	f7f8 fcb4 	bl	8000b2c <__aeabi_dcmpun>
 80081c4:	b140      	cbz	r0, 80081d8 <_printf_float+0xec>
 80081c6:	464b      	mov	r3, r9
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bfbc      	itt	lt
 80081cc:	232d      	movlt	r3, #45	; 0x2d
 80081ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081d2:	4a7f      	ldr	r2, [pc, #508]	; (80083d0 <_printf_float+0x2e4>)
 80081d4:	4b7f      	ldr	r3, [pc, #508]	; (80083d4 <_printf_float+0x2e8>)
 80081d6:	e7d1      	b.n	800817c <_printf_float+0x90>
 80081d8:	6863      	ldr	r3, [r4, #4]
 80081da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081de:	9206      	str	r2, [sp, #24]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	d13f      	bne.n	8008264 <_printf_float+0x178>
 80081e4:	2306      	movs	r3, #6
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	9b05      	ldr	r3, [sp, #20]
 80081ea:	6861      	ldr	r1, [r4, #4]
 80081ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081f0:	2300      	movs	r3, #0
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	ab0a      	add	r3, sp, #40	; 0x28
 80081f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081fa:	ab09      	add	r3, sp, #36	; 0x24
 80081fc:	ec49 8b10 	vmov	d0, r8, r9
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008208:	4628      	mov	r0, r5
 800820a:	f7ff fece 	bl	8007faa <__cvt>
 800820e:	9b06      	ldr	r3, [sp, #24]
 8008210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008212:	2b47      	cmp	r3, #71	; 0x47
 8008214:	4680      	mov	r8, r0
 8008216:	d108      	bne.n	800822a <_printf_float+0x13e>
 8008218:	1cc8      	adds	r0, r1, #3
 800821a:	db02      	blt.n	8008222 <_printf_float+0x136>
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	4299      	cmp	r1, r3
 8008220:	dd41      	ble.n	80082a6 <_printf_float+0x1ba>
 8008222:	f1ab 0302 	sub.w	r3, fp, #2
 8008226:	fa5f fb83 	uxtb.w	fp, r3
 800822a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800822e:	d820      	bhi.n	8008272 <_printf_float+0x186>
 8008230:	3901      	subs	r1, #1
 8008232:	465a      	mov	r2, fp
 8008234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008238:	9109      	str	r1, [sp, #36]	; 0x24
 800823a:	f7ff ff18 	bl	800806e <__exponent>
 800823e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008240:	1813      	adds	r3, r2, r0
 8008242:	2a01      	cmp	r2, #1
 8008244:	4681      	mov	r9, r0
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	dc02      	bgt.n	8008250 <_printf_float+0x164>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	07d2      	lsls	r2, r2, #31
 800824e:	d501      	bpl.n	8008254 <_printf_float+0x168>
 8008250:	3301      	adds	r3, #1
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008258:	2b00      	cmp	r3, #0
 800825a:	d09c      	beq.n	8008196 <_printf_float+0xaa>
 800825c:	232d      	movs	r3, #45	; 0x2d
 800825e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008262:	e798      	b.n	8008196 <_printf_float+0xaa>
 8008264:	9a06      	ldr	r2, [sp, #24]
 8008266:	2a47      	cmp	r2, #71	; 0x47
 8008268:	d1be      	bne.n	80081e8 <_printf_float+0xfc>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1bc      	bne.n	80081e8 <_printf_float+0xfc>
 800826e:	2301      	movs	r3, #1
 8008270:	e7b9      	b.n	80081e6 <_printf_float+0xfa>
 8008272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008276:	d118      	bne.n	80082aa <_printf_float+0x1be>
 8008278:	2900      	cmp	r1, #0
 800827a:	6863      	ldr	r3, [r4, #4]
 800827c:	dd0b      	ble.n	8008296 <_printf_float+0x1aa>
 800827e:	6121      	str	r1, [r4, #16]
 8008280:	b913      	cbnz	r3, 8008288 <_printf_float+0x19c>
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d502      	bpl.n	800828e <_printf_float+0x1a2>
 8008288:	3301      	adds	r3, #1
 800828a:	440b      	add	r3, r1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	e7de      	b.n	8008254 <_printf_float+0x168>
 8008296:	b913      	cbnz	r3, 800829e <_printf_float+0x1b2>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	07d2      	lsls	r2, r2, #31
 800829c:	d501      	bpl.n	80082a2 <_printf_float+0x1b6>
 800829e:	3302      	adds	r3, #2
 80082a0:	e7f4      	b.n	800828c <_printf_float+0x1a0>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f2      	b.n	800828c <_printf_float+0x1a0>
 80082a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ac:	4299      	cmp	r1, r3
 80082ae:	db05      	blt.n	80082bc <_printf_float+0x1d0>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	6121      	str	r1, [r4, #16]
 80082b4:	07d8      	lsls	r0, r3, #31
 80082b6:	d5ea      	bpl.n	800828e <_printf_float+0x1a2>
 80082b8:	1c4b      	adds	r3, r1, #1
 80082ba:	e7e7      	b.n	800828c <_printf_float+0x1a0>
 80082bc:	2900      	cmp	r1, #0
 80082be:	bfd4      	ite	le
 80082c0:	f1c1 0202 	rsble	r2, r1, #2
 80082c4:	2201      	movgt	r2, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	e7e0      	b.n	800828c <_printf_float+0x1a0>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	055a      	lsls	r2, r3, #21
 80082ce:	d407      	bmi.n	80082e0 <_printf_float+0x1f4>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	4642      	mov	r2, r8
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	d12c      	bne.n	8008338 <_printf_float+0x24c>
 80082de:	e764      	b.n	80081aa <_printf_float+0xbe>
 80082e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082e4:	f240 80e0 	bls.w	80084a8 <_printf_float+0x3bc>
 80082e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	f7f8 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d034      	beq.n	8008362 <_printf_float+0x276>
 80082f8:	4a37      	ldr	r2, [pc, #220]	; (80083d8 <_printf_float+0x2ec>)
 80082fa:	2301      	movs	r3, #1
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	f43f af51 	beq.w	80081aa <_printf_float+0xbe>
 8008308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800830c:	429a      	cmp	r2, r3
 800830e:	db02      	blt.n	8008316 <_printf_float+0x22a>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	07d8      	lsls	r0, r3, #31
 8008314:	d510      	bpl.n	8008338 <_printf_float+0x24c>
 8008316:	ee18 3a10 	vmov	r3, s16
 800831a:	4652      	mov	r2, sl
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	f43f af41 	beq.w	80081aa <_printf_float+0xbe>
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	f104 091a 	add.w	r9, r4, #26
 8008330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008332:	3b01      	subs	r3, #1
 8008334:	4543      	cmp	r3, r8
 8008336:	dc09      	bgt.n	800834c <_printf_float+0x260>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	079b      	lsls	r3, r3, #30
 800833c:	f100 8107 	bmi.w	800854e <_printf_float+0x462>
 8008340:	68e0      	ldr	r0, [r4, #12]
 8008342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008344:	4298      	cmp	r0, r3
 8008346:	bfb8      	it	lt
 8008348:	4618      	movlt	r0, r3
 800834a:	e730      	b.n	80081ae <_printf_float+0xc2>
 800834c:	2301      	movs	r3, #1
 800834e:	464a      	mov	r2, r9
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f af27 	beq.w	80081aa <_printf_float+0xbe>
 800835c:	f108 0801 	add.w	r8, r8, #1
 8008360:	e7e6      	b.n	8008330 <_printf_float+0x244>
 8008362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	dc39      	bgt.n	80083dc <_printf_float+0x2f0>
 8008368:	4a1b      	ldr	r2, [pc, #108]	; (80083d8 <_printf_float+0x2ec>)
 800836a:	2301      	movs	r3, #1
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	f43f af19 	beq.w	80081aa <_printf_float+0xbe>
 8008378:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800837c:	4313      	orrs	r3, r2
 800837e:	d102      	bne.n	8008386 <_printf_float+0x29a>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	07d9      	lsls	r1, r3, #31
 8008384:	d5d8      	bpl.n	8008338 <_printf_float+0x24c>
 8008386:	ee18 3a10 	vmov	r3, s16
 800838a:	4652      	mov	r2, sl
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f af09 	beq.w	80081aa <_printf_float+0xbe>
 8008398:	f04f 0900 	mov.w	r9, #0
 800839c:	f104 0a1a 	add.w	sl, r4, #26
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	425b      	negs	r3, r3
 80083a4:	454b      	cmp	r3, r9
 80083a6:	dc01      	bgt.n	80083ac <_printf_float+0x2c0>
 80083a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083aa:	e792      	b.n	80082d2 <_printf_float+0x1e6>
 80083ac:	2301      	movs	r3, #1
 80083ae:	4652      	mov	r2, sl
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f aef7 	beq.w	80081aa <_printf_float+0xbe>
 80083bc:	f109 0901 	add.w	r9, r9, #1
 80083c0:	e7ee      	b.n	80083a0 <_printf_float+0x2b4>
 80083c2:	bf00      	nop
 80083c4:	7fefffff 	.word	0x7fefffff
 80083c8:	0800c7ec 	.word	0x0800c7ec
 80083cc:	0800c7f0 	.word	0x0800c7f0
 80083d0:	0800c7f4 	.word	0x0800c7f4
 80083d4:	0800c7f8 	.word	0x0800c7f8
 80083d8:	0800c7fc 	.word	0x0800c7fc
 80083dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083e0:	429a      	cmp	r2, r3
 80083e2:	bfa8      	it	ge
 80083e4:	461a      	movge	r2, r3
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	4691      	mov	r9, r2
 80083ea:	dc37      	bgt.n	800845c <_printf_float+0x370>
 80083ec:	f04f 0b00 	mov.w	fp, #0
 80083f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083f4:	f104 021a 	add.w	r2, r4, #26
 80083f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	eba3 0309 	sub.w	r3, r3, r9
 8008400:	455b      	cmp	r3, fp
 8008402:	dc33      	bgt.n	800846c <_printf_float+0x380>
 8008404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008408:	429a      	cmp	r2, r3
 800840a:	db3b      	blt.n	8008484 <_printf_float+0x398>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07da      	lsls	r2, r3, #31
 8008410:	d438      	bmi.n	8008484 <_printf_float+0x398>
 8008412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008416:	eba2 0903 	sub.w	r9, r2, r3
 800841a:	9b05      	ldr	r3, [sp, #20]
 800841c:	1ad2      	subs	r2, r2, r3
 800841e:	4591      	cmp	r9, r2
 8008420:	bfa8      	it	ge
 8008422:	4691      	movge	r9, r2
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	dc35      	bgt.n	8008496 <_printf_float+0x3aa>
 800842a:	f04f 0800 	mov.w	r8, #0
 800842e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008432:	f104 0a1a 	add.w	sl, r4, #26
 8008436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	eba3 0309 	sub.w	r3, r3, r9
 8008440:	4543      	cmp	r3, r8
 8008442:	f77f af79 	ble.w	8008338 <_printf_float+0x24c>
 8008446:	2301      	movs	r3, #1
 8008448:	4652      	mov	r2, sl
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f aeaa 	beq.w	80081aa <_printf_float+0xbe>
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	e7ec      	b.n	8008436 <_printf_float+0x34a>
 800845c:	4613      	mov	r3, r2
 800845e:	4631      	mov	r1, r6
 8008460:	4642      	mov	r2, r8
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	d1c0      	bne.n	80083ec <_printf_float+0x300>
 800846a:	e69e      	b.n	80081aa <_printf_float+0xbe>
 800846c:	2301      	movs	r3, #1
 800846e:	4631      	mov	r1, r6
 8008470:	4628      	mov	r0, r5
 8008472:	9205      	str	r2, [sp, #20]
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f ae97 	beq.w	80081aa <_printf_float+0xbe>
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	f10b 0b01 	add.w	fp, fp, #1
 8008482:	e7b9      	b.n	80083f8 <_printf_float+0x30c>
 8008484:	ee18 3a10 	vmov	r3, s16
 8008488:	4652      	mov	r2, sl
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d1be      	bne.n	8008412 <_printf_float+0x326>
 8008494:	e689      	b.n	80081aa <_printf_float+0xbe>
 8008496:	9a05      	ldr	r2, [sp, #20]
 8008498:	464b      	mov	r3, r9
 800849a:	4442      	add	r2, r8
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	d1c1      	bne.n	800842a <_printf_float+0x33e>
 80084a6:	e680      	b.n	80081aa <_printf_float+0xbe>
 80084a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084aa:	2a01      	cmp	r2, #1
 80084ac:	dc01      	bgt.n	80084b2 <_printf_float+0x3c6>
 80084ae:	07db      	lsls	r3, r3, #31
 80084b0:	d53a      	bpl.n	8008528 <_printf_float+0x43c>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4642      	mov	r2, r8
 80084b6:	4631      	mov	r1, r6
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b8      	blx	r7
 80084bc:	3001      	adds	r0, #1
 80084be:	f43f ae74 	beq.w	80081aa <_printf_float+0xbe>
 80084c2:	ee18 3a10 	vmov	r3, s16
 80084c6:	4652      	mov	r2, sl
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f ae6b 	beq.w	80081aa <_printf_float+0xbe>
 80084d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084d8:	2200      	movs	r2, #0
 80084da:	2300      	movs	r3, #0
 80084dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80084e0:	f7f8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e4:	b9d8      	cbnz	r0, 800851e <_printf_float+0x432>
 80084e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084ea:	f108 0201 	add.w	r2, r8, #1
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	d10e      	bne.n	8008516 <_printf_float+0x42a>
 80084f8:	e657      	b.n	80081aa <_printf_float+0xbe>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4652      	mov	r2, sl
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f ae50 	beq.w	80081aa <_printf_float+0xbe>
 800850a:	f108 0801 	add.w	r8, r8, #1
 800850e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008510:	3b01      	subs	r3, #1
 8008512:	4543      	cmp	r3, r8
 8008514:	dcf1      	bgt.n	80084fa <_printf_float+0x40e>
 8008516:	464b      	mov	r3, r9
 8008518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800851c:	e6da      	b.n	80082d4 <_printf_float+0x1e8>
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	f104 0a1a 	add.w	sl, r4, #26
 8008526:	e7f2      	b.n	800850e <_printf_float+0x422>
 8008528:	2301      	movs	r3, #1
 800852a:	4642      	mov	r2, r8
 800852c:	e7df      	b.n	80084ee <_printf_float+0x402>
 800852e:	2301      	movs	r3, #1
 8008530:	464a      	mov	r2, r9
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f ae36 	beq.w	80081aa <_printf_float+0xbe>
 800853e:	f108 0801 	add.w	r8, r8, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	4543      	cmp	r3, r8
 800854a:	dcf0      	bgt.n	800852e <_printf_float+0x442>
 800854c:	e6f8      	b.n	8008340 <_printf_float+0x254>
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	f104 0919 	add.w	r9, r4, #25
 8008556:	e7f4      	b.n	8008542 <_printf_float+0x456>

08008558 <_printf_common>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	4616      	mov	r6, r2
 800855e:	4699      	mov	r9, r3
 8008560:	688a      	ldr	r2, [r1, #8]
 8008562:	690b      	ldr	r3, [r1, #16]
 8008564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008568:	4293      	cmp	r3, r2
 800856a:	bfb8      	it	lt
 800856c:	4613      	movlt	r3, r2
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008574:	4607      	mov	r7, r0
 8008576:	460c      	mov	r4, r1
 8008578:	b10a      	cbz	r2, 800857e <_printf_common+0x26>
 800857a:	3301      	adds	r3, #1
 800857c:	6033      	str	r3, [r6, #0]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	0699      	lsls	r1, r3, #26
 8008582:	bf42      	ittt	mi
 8008584:	6833      	ldrmi	r3, [r6, #0]
 8008586:	3302      	addmi	r3, #2
 8008588:	6033      	strmi	r3, [r6, #0]
 800858a:	6825      	ldr	r5, [r4, #0]
 800858c:	f015 0506 	ands.w	r5, r5, #6
 8008590:	d106      	bne.n	80085a0 <_printf_common+0x48>
 8008592:	f104 0a19 	add.w	sl, r4, #25
 8008596:	68e3      	ldr	r3, [r4, #12]
 8008598:	6832      	ldr	r2, [r6, #0]
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	42ab      	cmp	r3, r5
 800859e:	dc26      	bgt.n	80085ee <_printf_common+0x96>
 80085a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085a4:	1e13      	subs	r3, r2, #0
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	bf18      	it	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	0692      	lsls	r2, r2, #26
 80085ae:	d42b      	bmi.n	8008608 <_printf_common+0xb0>
 80085b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085b4:	4649      	mov	r1, r9
 80085b6:	4638      	mov	r0, r7
 80085b8:	47c0      	blx	r8
 80085ba:	3001      	adds	r0, #1
 80085bc:	d01e      	beq.n	80085fc <_printf_common+0xa4>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	f003 0306 	and.w	r3, r3, #6
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	bf02      	ittt	eq
 80085ca:	68e5      	ldreq	r5, [r4, #12]
 80085cc:	6833      	ldreq	r3, [r6, #0]
 80085ce:	1aed      	subeq	r5, r5, r3
 80085d0:	68a3      	ldr	r3, [r4, #8]
 80085d2:	bf0c      	ite	eq
 80085d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d8:	2500      	movne	r5, #0
 80085da:	4293      	cmp	r3, r2
 80085dc:	bfc4      	itt	gt
 80085de:	1a9b      	subgt	r3, r3, r2
 80085e0:	18ed      	addgt	r5, r5, r3
 80085e2:	2600      	movs	r6, #0
 80085e4:	341a      	adds	r4, #26
 80085e6:	42b5      	cmp	r5, r6
 80085e8:	d11a      	bne.n	8008620 <_printf_common+0xc8>
 80085ea:	2000      	movs	r0, #0
 80085ec:	e008      	b.n	8008600 <_printf_common+0xa8>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4652      	mov	r2, sl
 80085f2:	4649      	mov	r1, r9
 80085f4:	4638      	mov	r0, r7
 80085f6:	47c0      	blx	r8
 80085f8:	3001      	adds	r0, #1
 80085fa:	d103      	bne.n	8008604 <_printf_common+0xac>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	3501      	adds	r5, #1
 8008606:	e7c6      	b.n	8008596 <_printf_common+0x3e>
 8008608:	18e1      	adds	r1, r4, r3
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	2030      	movs	r0, #48	; 0x30
 800860e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008612:	4422      	add	r2, r4
 8008614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800861c:	3302      	adds	r3, #2
 800861e:	e7c7      	b.n	80085b0 <_printf_common+0x58>
 8008620:	2301      	movs	r3, #1
 8008622:	4622      	mov	r2, r4
 8008624:	4649      	mov	r1, r9
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	3001      	adds	r0, #1
 800862c:	d0e6      	beq.n	80085fc <_printf_common+0xa4>
 800862e:	3601      	adds	r6, #1
 8008630:	e7d9      	b.n	80085e6 <_printf_common+0x8e>
	...

08008634 <_printf_i>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	7e0f      	ldrb	r7, [r1, #24]
 800863a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800863c:	2f78      	cmp	r7, #120	; 0x78
 800863e:	4691      	mov	r9, r2
 8008640:	4680      	mov	r8, r0
 8008642:	460c      	mov	r4, r1
 8008644:	469a      	mov	sl, r3
 8008646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800864a:	d807      	bhi.n	800865c <_printf_i+0x28>
 800864c:	2f62      	cmp	r7, #98	; 0x62
 800864e:	d80a      	bhi.n	8008666 <_printf_i+0x32>
 8008650:	2f00      	cmp	r7, #0
 8008652:	f000 80d4 	beq.w	80087fe <_printf_i+0x1ca>
 8008656:	2f58      	cmp	r7, #88	; 0x58
 8008658:	f000 80c0 	beq.w	80087dc <_printf_i+0x1a8>
 800865c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008664:	e03a      	b.n	80086dc <_printf_i+0xa8>
 8008666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800866a:	2b15      	cmp	r3, #21
 800866c:	d8f6      	bhi.n	800865c <_printf_i+0x28>
 800866e:	a101      	add	r1, pc, #4	; (adr r1, 8008674 <_printf_i+0x40>)
 8008670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008674:	080086cd 	.word	0x080086cd
 8008678:	080086e1 	.word	0x080086e1
 800867c:	0800865d 	.word	0x0800865d
 8008680:	0800865d 	.word	0x0800865d
 8008684:	0800865d 	.word	0x0800865d
 8008688:	0800865d 	.word	0x0800865d
 800868c:	080086e1 	.word	0x080086e1
 8008690:	0800865d 	.word	0x0800865d
 8008694:	0800865d 	.word	0x0800865d
 8008698:	0800865d 	.word	0x0800865d
 800869c:	0800865d 	.word	0x0800865d
 80086a0:	080087e5 	.word	0x080087e5
 80086a4:	0800870d 	.word	0x0800870d
 80086a8:	0800879f 	.word	0x0800879f
 80086ac:	0800865d 	.word	0x0800865d
 80086b0:	0800865d 	.word	0x0800865d
 80086b4:	08008807 	.word	0x08008807
 80086b8:	0800865d 	.word	0x0800865d
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	0800865d 	.word	0x0800865d
 80086c4:	0800865d 	.word	0x0800865d
 80086c8:	080087a7 	.word	0x080087a7
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	1d1a      	adds	r2, r3, #4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	602a      	str	r2, [r5, #0]
 80086d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086dc:	2301      	movs	r3, #1
 80086de:	e09f      	b.n	8008820 <_printf_i+0x1ec>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	0607      	lsls	r7, r0, #24
 80086e6:	f103 0104 	add.w	r1, r3, #4
 80086ea:	6029      	str	r1, [r5, #0]
 80086ec:	d501      	bpl.n	80086f2 <_printf_i+0xbe>
 80086ee:	681e      	ldr	r6, [r3, #0]
 80086f0:	e003      	b.n	80086fa <_printf_i+0xc6>
 80086f2:	0646      	lsls	r6, r0, #25
 80086f4:	d5fb      	bpl.n	80086ee <_printf_i+0xba>
 80086f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	da03      	bge.n	8008706 <_printf_i+0xd2>
 80086fe:	232d      	movs	r3, #45	; 0x2d
 8008700:	4276      	negs	r6, r6
 8008702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008706:	485a      	ldr	r0, [pc, #360]	; (8008870 <_printf_i+0x23c>)
 8008708:	230a      	movs	r3, #10
 800870a:	e012      	b.n	8008732 <_printf_i+0xfe>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	1d19      	adds	r1, r3, #4
 8008712:	6029      	str	r1, [r5, #0]
 8008714:	0605      	lsls	r5, r0, #24
 8008716:	d501      	bpl.n	800871c <_printf_i+0xe8>
 8008718:	681e      	ldr	r6, [r3, #0]
 800871a:	e002      	b.n	8008722 <_printf_i+0xee>
 800871c:	0641      	lsls	r1, r0, #25
 800871e:	d5fb      	bpl.n	8008718 <_printf_i+0xe4>
 8008720:	881e      	ldrh	r6, [r3, #0]
 8008722:	4853      	ldr	r0, [pc, #332]	; (8008870 <_printf_i+0x23c>)
 8008724:	2f6f      	cmp	r7, #111	; 0x6f
 8008726:	bf0c      	ite	eq
 8008728:	2308      	moveq	r3, #8
 800872a:	230a      	movne	r3, #10
 800872c:	2100      	movs	r1, #0
 800872e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008732:	6865      	ldr	r5, [r4, #4]
 8008734:	60a5      	str	r5, [r4, #8]
 8008736:	2d00      	cmp	r5, #0
 8008738:	bfa2      	ittt	ge
 800873a:	6821      	ldrge	r1, [r4, #0]
 800873c:	f021 0104 	bicge.w	r1, r1, #4
 8008740:	6021      	strge	r1, [r4, #0]
 8008742:	b90e      	cbnz	r6, 8008748 <_printf_i+0x114>
 8008744:	2d00      	cmp	r5, #0
 8008746:	d04b      	beq.n	80087e0 <_printf_i+0x1ac>
 8008748:	4615      	mov	r5, r2
 800874a:	fbb6 f1f3 	udiv	r1, r6, r3
 800874e:	fb03 6711 	mls	r7, r3, r1, r6
 8008752:	5dc7      	ldrb	r7, [r0, r7]
 8008754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008758:	4637      	mov	r7, r6
 800875a:	42bb      	cmp	r3, r7
 800875c:	460e      	mov	r6, r1
 800875e:	d9f4      	bls.n	800874a <_printf_i+0x116>
 8008760:	2b08      	cmp	r3, #8
 8008762:	d10b      	bne.n	800877c <_printf_i+0x148>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07de      	lsls	r6, r3, #31
 8008768:	d508      	bpl.n	800877c <_printf_i+0x148>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	6861      	ldr	r1, [r4, #4]
 800876e:	4299      	cmp	r1, r3
 8008770:	bfde      	ittt	le
 8008772:	2330      	movle	r3, #48	; 0x30
 8008774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800877c:	1b52      	subs	r2, r2, r5
 800877e:	6122      	str	r2, [r4, #16]
 8008780:	f8cd a000 	str.w	sl, [sp]
 8008784:	464b      	mov	r3, r9
 8008786:	aa03      	add	r2, sp, #12
 8008788:	4621      	mov	r1, r4
 800878a:	4640      	mov	r0, r8
 800878c:	f7ff fee4 	bl	8008558 <_printf_common>
 8008790:	3001      	adds	r0, #1
 8008792:	d14a      	bne.n	800882a <_printf_i+0x1f6>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	b004      	add	sp, #16
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f043 0320 	orr.w	r3, r3, #32
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	4833      	ldr	r0, [pc, #204]	; (8008874 <_printf_i+0x240>)
 80087a8:	2778      	movs	r7, #120	; 0x78
 80087aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	6829      	ldr	r1, [r5, #0]
 80087b2:	061f      	lsls	r7, r3, #24
 80087b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087b8:	d402      	bmi.n	80087c0 <_printf_i+0x18c>
 80087ba:	065f      	lsls	r7, r3, #25
 80087bc:	bf48      	it	mi
 80087be:	b2b6      	uxthmi	r6, r6
 80087c0:	07df      	lsls	r7, r3, #31
 80087c2:	bf48      	it	mi
 80087c4:	f043 0320 	orrmi.w	r3, r3, #32
 80087c8:	6029      	str	r1, [r5, #0]
 80087ca:	bf48      	it	mi
 80087cc:	6023      	strmi	r3, [r4, #0]
 80087ce:	b91e      	cbnz	r6, 80087d8 <_printf_i+0x1a4>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	f023 0320 	bic.w	r3, r3, #32
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	2310      	movs	r3, #16
 80087da:	e7a7      	b.n	800872c <_printf_i+0xf8>
 80087dc:	4824      	ldr	r0, [pc, #144]	; (8008870 <_printf_i+0x23c>)
 80087de:	e7e4      	b.n	80087aa <_printf_i+0x176>
 80087e0:	4615      	mov	r5, r2
 80087e2:	e7bd      	b.n	8008760 <_printf_i+0x12c>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	6826      	ldr	r6, [r4, #0]
 80087e8:	6961      	ldr	r1, [r4, #20]
 80087ea:	1d18      	adds	r0, r3, #4
 80087ec:	6028      	str	r0, [r5, #0]
 80087ee:	0635      	lsls	r5, r6, #24
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	d501      	bpl.n	80087f8 <_printf_i+0x1c4>
 80087f4:	6019      	str	r1, [r3, #0]
 80087f6:	e002      	b.n	80087fe <_printf_i+0x1ca>
 80087f8:	0670      	lsls	r0, r6, #25
 80087fa:	d5fb      	bpl.n	80087f4 <_printf_i+0x1c0>
 80087fc:	8019      	strh	r1, [r3, #0]
 80087fe:	2300      	movs	r3, #0
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	4615      	mov	r5, r2
 8008804:	e7bc      	b.n	8008780 <_printf_i+0x14c>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	602a      	str	r2, [r5, #0]
 800880c:	681d      	ldr	r5, [r3, #0]
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	2100      	movs	r1, #0
 8008812:	4628      	mov	r0, r5
 8008814:	f7f7 fcdc 	bl	80001d0 <memchr>
 8008818:	b108      	cbz	r0, 800881e <_printf_i+0x1ea>
 800881a:	1b40      	subs	r0, r0, r5
 800881c:	6060      	str	r0, [r4, #4]
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	2300      	movs	r3, #0
 8008824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008828:	e7aa      	b.n	8008780 <_printf_i+0x14c>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	462a      	mov	r2, r5
 800882e:	4649      	mov	r1, r9
 8008830:	4640      	mov	r0, r8
 8008832:	47d0      	blx	sl
 8008834:	3001      	adds	r0, #1
 8008836:	d0ad      	beq.n	8008794 <_printf_i+0x160>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	079b      	lsls	r3, r3, #30
 800883c:	d413      	bmi.n	8008866 <_printf_i+0x232>
 800883e:	68e0      	ldr	r0, [r4, #12]
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	4298      	cmp	r0, r3
 8008844:	bfb8      	it	lt
 8008846:	4618      	movlt	r0, r3
 8008848:	e7a6      	b.n	8008798 <_printf_i+0x164>
 800884a:	2301      	movs	r3, #1
 800884c:	4632      	mov	r2, r6
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	47d0      	blx	sl
 8008854:	3001      	adds	r0, #1
 8008856:	d09d      	beq.n	8008794 <_printf_i+0x160>
 8008858:	3501      	adds	r5, #1
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	9903      	ldr	r1, [sp, #12]
 800885e:	1a5b      	subs	r3, r3, r1
 8008860:	42ab      	cmp	r3, r5
 8008862:	dcf2      	bgt.n	800884a <_printf_i+0x216>
 8008864:	e7eb      	b.n	800883e <_printf_i+0x20a>
 8008866:	2500      	movs	r5, #0
 8008868:	f104 0619 	add.w	r6, r4, #25
 800886c:	e7f5      	b.n	800885a <_printf_i+0x226>
 800886e:	bf00      	nop
 8008870:	0800c7fe 	.word	0x0800c7fe
 8008874:	0800c80f 	.word	0x0800c80f

08008878 <_scanf_float>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	b087      	sub	sp, #28
 800887e:	4617      	mov	r7, r2
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	688b      	ldr	r3, [r1, #8]
 8008884:	1e5a      	subs	r2, r3, #1
 8008886:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800888a:	bf83      	ittte	hi
 800888c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008890:	195b      	addhi	r3, r3, r5
 8008892:	9302      	strhi	r3, [sp, #8]
 8008894:	2300      	movls	r3, #0
 8008896:	bf86      	itte	hi
 8008898:	f240 135d 	movwhi	r3, #349	; 0x15d
 800889c:	608b      	strhi	r3, [r1, #8]
 800889e:	9302      	strls	r3, [sp, #8]
 80088a0:	680b      	ldr	r3, [r1, #0]
 80088a2:	468b      	mov	fp, r1
 80088a4:	2500      	movs	r5, #0
 80088a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80088ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088b2:	4680      	mov	r8, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	465e      	mov	r6, fp
 80088b8:	46aa      	mov	sl, r5
 80088ba:	46a9      	mov	r9, r5
 80088bc:	9501      	str	r5, [sp, #4]
 80088be:	68a2      	ldr	r2, [r4, #8]
 80088c0:	b152      	cbz	r2, 80088d8 <_scanf_float+0x60>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b4e      	cmp	r3, #78	; 0x4e
 80088c8:	d864      	bhi.n	8008994 <_scanf_float+0x11c>
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d83c      	bhi.n	8008948 <_scanf_float+0xd0>
 80088ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088d2:	b2c8      	uxtb	r0, r1
 80088d4:	280e      	cmp	r0, #14
 80088d6:	d93a      	bls.n	800894e <_scanf_float+0xd6>
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	d003      	beq.n	80088e6 <_scanf_float+0x6e>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ea:	f1ba 0f01 	cmp.w	sl, #1
 80088ee:	f200 8113 	bhi.w	8008b18 <_scanf_float+0x2a0>
 80088f2:	455e      	cmp	r6, fp
 80088f4:	f200 8105 	bhi.w	8008b02 <_scanf_float+0x28a>
 80088f8:	2501      	movs	r5, #1
 80088fa:	4628      	mov	r0, r5
 80088fc:	b007      	add	sp, #28
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008906:	2a0d      	cmp	r2, #13
 8008908:	d8e6      	bhi.n	80088d8 <_scanf_float+0x60>
 800890a:	a101      	add	r1, pc, #4	; (adr r1, 8008910 <_scanf_float+0x98>)
 800890c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008910:	08008a4f 	.word	0x08008a4f
 8008914:	080088d9 	.word	0x080088d9
 8008918:	080088d9 	.word	0x080088d9
 800891c:	080088d9 	.word	0x080088d9
 8008920:	08008aaf 	.word	0x08008aaf
 8008924:	08008a87 	.word	0x08008a87
 8008928:	080088d9 	.word	0x080088d9
 800892c:	080088d9 	.word	0x080088d9
 8008930:	08008a5d 	.word	0x08008a5d
 8008934:	080088d9 	.word	0x080088d9
 8008938:	080088d9 	.word	0x080088d9
 800893c:	080088d9 	.word	0x080088d9
 8008940:	080088d9 	.word	0x080088d9
 8008944:	08008a15 	.word	0x08008a15
 8008948:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800894c:	e7db      	b.n	8008906 <_scanf_float+0x8e>
 800894e:	290e      	cmp	r1, #14
 8008950:	d8c2      	bhi.n	80088d8 <_scanf_float+0x60>
 8008952:	a001      	add	r0, pc, #4	; (adr r0, 8008958 <_scanf_float+0xe0>)
 8008954:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008958:	08008a07 	.word	0x08008a07
 800895c:	080088d9 	.word	0x080088d9
 8008960:	08008a07 	.word	0x08008a07
 8008964:	08008a9b 	.word	0x08008a9b
 8008968:	080088d9 	.word	0x080088d9
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089f1 	.word	0x080089f1
 8008974:	080089f1 	.word	0x080089f1
 8008978:	080089f1 	.word	0x080089f1
 800897c:	080089f1 	.word	0x080089f1
 8008980:	080089f1 	.word	0x080089f1
 8008984:	080089f1 	.word	0x080089f1
 8008988:	080089f1 	.word	0x080089f1
 800898c:	080089f1 	.word	0x080089f1
 8008990:	080089f1 	.word	0x080089f1
 8008994:	2b6e      	cmp	r3, #110	; 0x6e
 8008996:	d809      	bhi.n	80089ac <_scanf_float+0x134>
 8008998:	2b60      	cmp	r3, #96	; 0x60
 800899a:	d8b2      	bhi.n	8008902 <_scanf_float+0x8a>
 800899c:	2b54      	cmp	r3, #84	; 0x54
 800899e:	d077      	beq.n	8008a90 <_scanf_float+0x218>
 80089a0:	2b59      	cmp	r3, #89	; 0x59
 80089a2:	d199      	bne.n	80088d8 <_scanf_float+0x60>
 80089a4:	2d07      	cmp	r5, #7
 80089a6:	d197      	bne.n	80088d8 <_scanf_float+0x60>
 80089a8:	2508      	movs	r5, #8
 80089aa:	e029      	b.n	8008a00 <_scanf_float+0x188>
 80089ac:	2b74      	cmp	r3, #116	; 0x74
 80089ae:	d06f      	beq.n	8008a90 <_scanf_float+0x218>
 80089b0:	2b79      	cmp	r3, #121	; 0x79
 80089b2:	e7f6      	b.n	80089a2 <_scanf_float+0x12a>
 80089b4:	6821      	ldr	r1, [r4, #0]
 80089b6:	05c8      	lsls	r0, r1, #23
 80089b8:	d51a      	bpl.n	80089f0 <_scanf_float+0x178>
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089c0:	6021      	str	r1, [r4, #0]
 80089c2:	f109 0901 	add.w	r9, r9, #1
 80089c6:	b11b      	cbz	r3, 80089d0 <_scanf_float+0x158>
 80089c8:	3b01      	subs	r3, #1
 80089ca:	3201      	adds	r2, #1
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	60a2      	str	r2, [r4, #8]
 80089d0:	68a3      	ldr	r3, [r4, #8]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3b01      	subs	r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	607b      	str	r3, [r7, #4]
 80089e4:	f340 8084 	ble.w	8008af0 <_scanf_float+0x278>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	603b      	str	r3, [r7, #0]
 80089ee:	e766      	b.n	80088be <_scanf_float+0x46>
 80089f0:	eb1a 0f05 	cmn.w	sl, r5
 80089f4:	f47f af70 	bne.w	80088d8 <_scanf_float+0x60>
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	f806 3b01 	strb.w	r3, [r6], #1
 8008a04:	e7e4      	b.n	80089d0 <_scanf_float+0x158>
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	0610      	lsls	r0, r2, #24
 8008a0a:	f57f af65 	bpl.w	80088d8 <_scanf_float+0x60>
 8008a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a12:	e7f4      	b.n	80089fe <_scanf_float+0x186>
 8008a14:	f1ba 0f00 	cmp.w	sl, #0
 8008a18:	d10e      	bne.n	8008a38 <_scanf_float+0x1c0>
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d10e      	bne.n	8008a3e <_scanf_float+0x1c6>
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a2a:	d108      	bne.n	8008a3e <_scanf_float+0x1c6>
 8008a2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	f04f 0a01 	mov.w	sl, #1
 8008a36:	e7e3      	b.n	8008a00 <_scanf_float+0x188>
 8008a38:	f1ba 0f02 	cmp.w	sl, #2
 8008a3c:	d055      	beq.n	8008aea <_scanf_float+0x272>
 8008a3e:	2d01      	cmp	r5, #1
 8008a40:	d002      	beq.n	8008a48 <_scanf_float+0x1d0>
 8008a42:	2d04      	cmp	r5, #4
 8008a44:	f47f af48 	bne.w	80088d8 <_scanf_float+0x60>
 8008a48:	3501      	adds	r5, #1
 8008a4a:	b2ed      	uxtb	r5, r5
 8008a4c:	e7d8      	b.n	8008a00 <_scanf_float+0x188>
 8008a4e:	f1ba 0f01 	cmp.w	sl, #1
 8008a52:	f47f af41 	bne.w	80088d8 <_scanf_float+0x60>
 8008a56:	f04f 0a02 	mov.w	sl, #2
 8008a5a:	e7d1      	b.n	8008a00 <_scanf_float+0x188>
 8008a5c:	b97d      	cbnz	r5, 8008a7e <_scanf_float+0x206>
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	f47f af3c 	bne.w	80088de <_scanf_float+0x66>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a70:	f47f af39 	bne.w	80088e6 <_scanf_float+0x6e>
 8008a74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	2501      	movs	r5, #1
 8008a7c:	e7c0      	b.n	8008a00 <_scanf_float+0x188>
 8008a7e:	2d03      	cmp	r5, #3
 8008a80:	d0e2      	beq.n	8008a48 <_scanf_float+0x1d0>
 8008a82:	2d05      	cmp	r5, #5
 8008a84:	e7de      	b.n	8008a44 <_scanf_float+0x1cc>
 8008a86:	2d02      	cmp	r5, #2
 8008a88:	f47f af26 	bne.w	80088d8 <_scanf_float+0x60>
 8008a8c:	2503      	movs	r5, #3
 8008a8e:	e7b7      	b.n	8008a00 <_scanf_float+0x188>
 8008a90:	2d06      	cmp	r5, #6
 8008a92:	f47f af21 	bne.w	80088d8 <_scanf_float+0x60>
 8008a96:	2507      	movs	r5, #7
 8008a98:	e7b2      	b.n	8008a00 <_scanf_float+0x188>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	0591      	lsls	r1, r2, #22
 8008a9e:	f57f af1b 	bpl.w	80088d8 <_scanf_float+0x60>
 8008aa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008aa6:	6022      	str	r2, [r4, #0]
 8008aa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008aac:	e7a8      	b.n	8008a00 <_scanf_float+0x188>
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ab4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ab8:	d006      	beq.n	8008ac8 <_scanf_float+0x250>
 8008aba:	0550      	lsls	r0, r2, #21
 8008abc:	f57f af0c 	bpl.w	80088d8 <_scanf_float+0x60>
 8008ac0:	f1b9 0f00 	cmp.w	r9, #0
 8008ac4:	f43f af0f 	beq.w	80088e6 <_scanf_float+0x6e>
 8008ac8:	0591      	lsls	r1, r2, #22
 8008aca:	bf58      	it	pl
 8008acc:	9901      	ldrpl	r1, [sp, #4]
 8008ace:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ad2:	bf58      	it	pl
 8008ad4:	eba9 0101 	subpl.w	r1, r9, r1
 8008ad8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008adc:	bf58      	it	pl
 8008ade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	f04f 0900 	mov.w	r9, #0
 8008ae8:	e78a      	b.n	8008a00 <_scanf_float+0x188>
 8008aea:	f04f 0a03 	mov.w	sl, #3
 8008aee:	e787      	b.n	8008a00 <_scanf_float+0x188>
 8008af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008af4:	4639      	mov	r1, r7
 8008af6:	4640      	mov	r0, r8
 8008af8:	4798      	blx	r3
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f aedf 	beq.w	80088be <_scanf_float+0x46>
 8008b00:	e6ea      	b.n	80088d8 <_scanf_float+0x60>
 8008b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b0a:	463a      	mov	r2, r7
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4798      	blx	r3
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	e6ec      	b.n	80088f2 <_scanf_float+0x7a>
 8008b18:	1e6b      	subs	r3, r5, #1
 8008b1a:	2b06      	cmp	r3, #6
 8008b1c:	d825      	bhi.n	8008b6a <_scanf_float+0x2f2>
 8008b1e:	2d02      	cmp	r5, #2
 8008b20:	d836      	bhi.n	8008b90 <_scanf_float+0x318>
 8008b22:	455e      	cmp	r6, fp
 8008b24:	f67f aee8 	bls.w	80088f8 <_scanf_float+0x80>
 8008b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b30:	463a      	mov	r2, r7
 8008b32:	4640      	mov	r0, r8
 8008b34:	4798      	blx	r3
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	e7f1      	b.n	8008b22 <_scanf_float+0x2aa>
 8008b3e:	9802      	ldr	r0, [sp, #8]
 8008b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b48:	9002      	str	r0, [sp, #8]
 8008b4a:	463a      	mov	r2, r7
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	4798      	blx	r3
 8008b50:	6923      	ldr	r3, [r4, #16]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b5a:	fa5f fa8a 	uxtb.w	sl, sl
 8008b5e:	f1ba 0f02 	cmp.w	sl, #2
 8008b62:	d1ec      	bne.n	8008b3e <_scanf_float+0x2c6>
 8008b64:	3d03      	subs	r5, #3
 8008b66:	b2ed      	uxtb	r5, r5
 8008b68:	1b76      	subs	r6, r6, r5
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	05da      	lsls	r2, r3, #23
 8008b6e:	d52f      	bpl.n	8008bd0 <_scanf_float+0x358>
 8008b70:	055b      	lsls	r3, r3, #21
 8008b72:	d510      	bpl.n	8008b96 <_scanf_float+0x31e>
 8008b74:	455e      	cmp	r6, fp
 8008b76:	f67f aebf 	bls.w	80088f8 <_scanf_float+0x80>
 8008b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b82:	463a      	mov	r2, r7
 8008b84:	4640      	mov	r0, r8
 8008b86:	4798      	blx	r3
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	e7f1      	b.n	8008b74 <_scanf_float+0x2fc>
 8008b90:	46aa      	mov	sl, r5
 8008b92:	9602      	str	r6, [sp, #8]
 8008b94:	e7df      	b.n	8008b56 <_scanf_float+0x2de>
 8008b96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	2965      	cmp	r1, #101	; 0x65
 8008b9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ba2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	d00c      	beq.n	8008bc4 <_scanf_float+0x34c>
 8008baa:	2945      	cmp	r1, #69	; 0x45
 8008bac:	d00a      	beq.n	8008bc4 <_scanf_float+0x34c>
 8008bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4798      	blx	r3
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	1eb5      	subs	r5, r6, #2
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc8:	463a      	mov	r2, r7
 8008bca:	4640      	mov	r0, r8
 8008bcc:	4798      	blx	r3
 8008bce:	462e      	mov	r6, r5
 8008bd0:	6825      	ldr	r5, [r4, #0]
 8008bd2:	f015 0510 	ands.w	r5, r5, #16
 8008bd6:	d158      	bne.n	8008c8a <_scanf_float+0x412>
 8008bd8:	7035      	strb	r5, [r6, #0]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be4:	d11c      	bne.n	8008c20 <_scanf_float+0x3a8>
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	454b      	cmp	r3, r9
 8008bea:	eba3 0209 	sub.w	r2, r3, r9
 8008bee:	d124      	bne.n	8008c3a <_scanf_float+0x3c2>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	f002 fc2f 	bl	800b458 <_strtod_r>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	6821      	ldr	r1, [r4, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f011 0f02 	tst.w	r1, #2
 8008c04:	ec57 6b10 	vmov	r6, r7, d0
 8008c08:	f103 0204 	add.w	r2, r3, #4
 8008c0c:	d020      	beq.n	8008c50 <_scanf_float+0x3d8>
 8008c0e:	9903      	ldr	r1, [sp, #12]
 8008c10:	600a      	str	r2, [r1, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	e9c3 6700 	strd	r6, r7, [r3]
 8008c18:	68e3      	ldr	r3, [r4, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60e3      	str	r3, [r4, #12]
 8008c1e:	e66c      	b.n	80088fa <_scanf_float+0x82>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0e4      	beq.n	8008bf0 <_scanf_float+0x378>
 8008c26:	9905      	ldr	r1, [sp, #20]
 8008c28:	230a      	movs	r3, #10
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	3101      	adds	r1, #1
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f002 fc9a 	bl	800b568 <_strtol_r>
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	9e05      	ldr	r6, [sp, #20]
 8008c38:	1ac2      	subs	r2, r0, r3
 8008c3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	bf28      	it	cs
 8008c42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c46:	4912      	ldr	r1, [pc, #72]	; (8008c90 <_scanf_float+0x418>)
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f000 f8e7 	bl	8008e1c <siprintf>
 8008c4e:	e7cf      	b.n	8008bf0 <_scanf_float+0x378>
 8008c50:	f011 0f04 	tst.w	r1, #4
 8008c54:	9903      	ldr	r1, [sp, #12]
 8008c56:	600a      	str	r2, [r1, #0]
 8008c58:	d1db      	bne.n	8008c12 <_scanf_float+0x39a>
 8008c5a:	f8d3 8000 	ldr.w	r8, [r3]
 8008c5e:	ee10 2a10 	vmov	r2, s0
 8008c62:	ee10 0a10 	vmov	r0, s0
 8008c66:	463b      	mov	r3, r7
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 ff5f 	bl	8000b2c <__aeabi_dcmpun>
 8008c6e:	b128      	cbz	r0, 8008c7c <_scanf_float+0x404>
 8008c70:	4808      	ldr	r0, [pc, #32]	; (8008c94 <_scanf_float+0x41c>)
 8008c72:	f000 f9b7 	bl	8008fe4 <nanf>
 8008c76:	ed88 0a00 	vstr	s0, [r8]
 8008c7a:	e7cd      	b.n	8008c18 <_scanf_float+0x3a0>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ffb2 	bl	8000be8 <__aeabi_d2f>
 8008c84:	f8c8 0000 	str.w	r0, [r8]
 8008c88:	e7c6      	b.n	8008c18 <_scanf_float+0x3a0>
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	e635      	b.n	80088fa <_scanf_float+0x82>
 8008c8e:	bf00      	nop
 8008c90:	0800c820 	.word	0x0800c820
 8008c94:	0800cbb5 	.word	0x0800cbb5

08008c98 <std>:
 8008c98:	2300      	movs	r3, #0
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ca6:	6083      	str	r3, [r0, #8]
 8008ca8:	8181      	strh	r1, [r0, #12]
 8008caa:	6643      	str	r3, [r0, #100]	; 0x64
 8008cac:	81c2      	strh	r2, [r0, #14]
 8008cae:	6183      	str	r3, [r0, #24]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	305c      	adds	r0, #92	; 0x5c
 8008cb6:	f000 f914 	bl	8008ee2 <memset>
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <std+0x58>)
 8008cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <std+0x5c>)
 8008cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <std+0x60>)
 8008cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <std+0x64>)
 8008cc8:	6323      	str	r3, [r4, #48]	; 0x30
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <std+0x68>)
 8008ccc:	6224      	str	r4, [r4, #32]
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d006      	beq.n	8008ce0 <std+0x48>
 8008cd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cd6:	4294      	cmp	r4, r2
 8008cd8:	d002      	beq.n	8008ce0 <std+0x48>
 8008cda:	33d0      	adds	r3, #208	; 0xd0
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	d105      	bne.n	8008cec <std+0x54>
 8008ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce8:	f000 b978 	b.w	8008fdc <__retarget_lock_init_recursive>
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	08008e5d 	.word	0x08008e5d
 8008cf4:	08008e7f 	.word	0x08008e7f
 8008cf8:	08008eb7 	.word	0x08008eb7
 8008cfc:	08008edb 	.word	0x08008edb
 8008d00:	20000418 	.word	0x20000418

08008d04 <stdio_exit_handler>:
 8008d04:	4a02      	ldr	r2, [pc, #8]	; (8008d10 <stdio_exit_handler+0xc>)
 8008d06:	4903      	ldr	r1, [pc, #12]	; (8008d14 <stdio_exit_handler+0x10>)
 8008d08:	4803      	ldr	r0, [pc, #12]	; (8008d18 <stdio_exit_handler+0x14>)
 8008d0a:	f000 b869 	b.w	8008de0 <_fwalk_sglue>
 8008d0e:	bf00      	nop
 8008d10:	2000000c 	.word	0x2000000c
 8008d14:	0800b929 	.word	0x0800b929
 8008d18:	20000018 	.word	0x20000018

08008d1c <cleanup_stdio>:
 8008d1c:	6841      	ldr	r1, [r0, #4]
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <cleanup_stdio+0x34>)
 8008d20:	4299      	cmp	r1, r3
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	d001      	beq.n	8008d2c <cleanup_stdio+0x10>
 8008d28:	f002 fdfe 	bl	800b928 <_fflush_r>
 8008d2c:	68a1      	ldr	r1, [r4, #8]
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <cleanup_stdio+0x38>)
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <cleanup_stdio+0x1e>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f002 fdf7 	bl	800b928 <_fflush_r>
 8008d3a:	68e1      	ldr	r1, [r4, #12]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <cleanup_stdio+0x3c>)
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d004      	beq.n	8008d4c <cleanup_stdio+0x30>
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d48:	f002 bdee 	b.w	800b928 <_fflush_r>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000418 	.word	0x20000418
 8008d54:	20000480 	.word	0x20000480
 8008d58:	200004e8 	.word	0x200004e8

08008d5c <global_stdio_init.part.0>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <global_stdio_init.part.0+0x30>)
 8008d60:	4c0b      	ldr	r4, [pc, #44]	; (8008d90 <global_stdio_init.part.0+0x34>)
 8008d62:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <global_stdio_init.part.0+0x38>)
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2104      	movs	r1, #4
 8008d6c:	f7ff ff94 	bl	8008c98 <std>
 8008d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d74:	2201      	movs	r2, #1
 8008d76:	2109      	movs	r1, #9
 8008d78:	f7ff ff8e 	bl	8008c98 <std>
 8008d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d80:	2202      	movs	r2, #2
 8008d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d86:	2112      	movs	r1, #18
 8008d88:	f7ff bf86 	b.w	8008c98 <std>
 8008d8c:	20000550 	.word	0x20000550
 8008d90:	20000418 	.word	0x20000418
 8008d94:	08008d05 	.word	0x08008d05

08008d98 <__sfp_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__sfp_lock_acquire+0x8>)
 8008d9a:	f000 b920 	b.w	8008fde <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20000559 	.word	0x20000559

08008da4 <__sfp_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sfp_lock_release+0x8>)
 8008da6:	f000 b91b 	b.w	8008fe0 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	20000559 	.word	0x20000559

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sfp_lock_acquire>
 8008db8:	6a23      	ldr	r3, [r4, #32]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sfp_lock_release>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <__sinit+0x28>)
 8008dc6:	6223      	str	r3, [r4, #32]
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <__sinit+0x2c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f5      	bne.n	8008dbc <__sinit+0xc>
 8008dd0:	f7ff ffc4 	bl	8008d5c <global_stdio_init.part.0>
 8008dd4:	e7f2      	b.n	8008dbc <__sinit+0xc>
 8008dd6:	bf00      	nop
 8008dd8:	08008d1d 	.word	0x08008d1d
 8008ddc:	20000550 	.word	0x20000550

08008de0 <_fwalk_sglue>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4607      	mov	r7, r0
 8008de6:	4688      	mov	r8, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	2600      	movs	r6, #0
 8008dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df0:	f1b9 0901 	subs.w	r9, r9, #1
 8008df4:	d505      	bpl.n	8008e02 <_fwalk_sglue+0x22>
 8008df6:	6824      	ldr	r4, [r4, #0]
 8008df8:	2c00      	cmp	r4, #0
 8008dfa:	d1f7      	bne.n	8008dec <_fwalk_sglue+0xc>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d907      	bls.n	8008e18 <_fwalk_sglue+0x38>
 8008e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d003      	beq.n	8008e18 <_fwalk_sglue+0x38>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4638      	mov	r0, r7
 8008e14:	47c0      	blx	r8
 8008e16:	4306      	orrs	r6, r0
 8008e18:	3568      	adds	r5, #104	; 0x68
 8008e1a:	e7e9      	b.n	8008df0 <_fwalk_sglue+0x10>

08008e1c <siprintf>:
 8008e1c:	b40e      	push	{r1, r2, r3}
 8008e1e:	b500      	push	{lr}
 8008e20:	b09c      	sub	sp, #112	; 0x70
 8008e22:	ab1d      	add	r3, sp, #116	; 0x74
 8008e24:	9002      	str	r0, [sp, #8]
 8008e26:	9006      	str	r0, [sp, #24]
 8008e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e2c:	4809      	ldr	r0, [pc, #36]	; (8008e54 <siprintf+0x38>)
 8008e2e:	9107      	str	r1, [sp, #28]
 8008e30:	9104      	str	r1, [sp, #16]
 8008e32:	4909      	ldr	r1, [pc, #36]	; (8008e58 <siprintf+0x3c>)
 8008e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	a902      	add	r1, sp, #8
 8008e40:	f002 fbee 	bl	800b620 <_svfiprintf_r>
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	b01c      	add	sp, #112	; 0x70
 8008e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e50:	b003      	add	sp, #12
 8008e52:	4770      	bx	lr
 8008e54:	20000064 	.word	0x20000064
 8008e58:	ffff0208 	.word	0xffff0208

08008e5c <__sread>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	f000 f86c 	bl	8008f40 <_read_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	bfab      	itete	ge
 8008e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e70:	181b      	addge	r3, r3, r0
 8008e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e76:	bfac      	ite	ge
 8008e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e7a:	81a3      	strhlt	r3, [r4, #12]
 8008e7c:	bd10      	pop	{r4, pc}

08008e7e <__swrite>:
 8008e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e82:	461f      	mov	r7, r3
 8008e84:	898b      	ldrh	r3, [r1, #12]
 8008e86:	05db      	lsls	r3, r3, #23
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	d505      	bpl.n	8008e9c <__swrite+0x1e>
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	2302      	movs	r3, #2
 8008e96:	2200      	movs	r2, #0
 8008e98:	f000 f840 	bl	8008f1c <_lseek_r>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	f000 b857 	b.w	8008f64 <_write_r>

08008eb6 <__sseek>:
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	460c      	mov	r4, r1
 8008eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebe:	f000 f82d 	bl	8008f1c <_lseek_r>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	bf15      	itete	ne
 8008ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ed2:	81a3      	strheq	r3, [r4, #12]
 8008ed4:	bf18      	it	ne
 8008ed6:	81a3      	strhne	r3, [r4, #12]
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <__sclose>:
 8008eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ede:	f000 b80d 	b.w	8008efc <_close_r>

08008ee2 <memset>:
 8008ee2:	4402      	add	r2, r0
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d100      	bne.n	8008eec <memset+0xa>
 8008eea:	4770      	bx	lr
 8008eec:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef0:	e7f9      	b.n	8008ee6 <memset+0x4>
	...

08008ef4 <_localeconv_r>:
 8008ef4:	4800      	ldr	r0, [pc, #0]	; (8008ef8 <_localeconv_r+0x4>)
 8008ef6:	4770      	bx	lr
 8008ef8:	20000158 	.word	0x20000158

08008efc <_close_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d06      	ldr	r5, [pc, #24]	; (8008f18 <_close_r+0x1c>)
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	f7f8 fc27 	bl	800175a <_close>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_close_r+0x1a>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_close_r+0x1a>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	20000554 	.word	0x20000554

08008f1c <_lseek_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	; (8008f3c <_lseek_r+0x20>)
 8008f20:	4604      	mov	r4, r0
 8008f22:	4608      	mov	r0, r1
 8008f24:	4611      	mov	r1, r2
 8008f26:	2200      	movs	r2, #0
 8008f28:	602a      	str	r2, [r5, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f7f8 fc3c 	bl	80017a8 <_lseek>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_lseek_r+0x1e>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_lseek_r+0x1e>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20000554 	.word	0x20000554

08008f40 <_read_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d07      	ldr	r5, [pc, #28]	; (8008f60 <_read_r+0x20>)
 8008f44:	4604      	mov	r4, r0
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f7f8 fbca 	bl	80016e8 <_read>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_read_r+0x1e>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_read_r+0x1e>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000554 	.word	0x20000554

08008f64 <_write_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	; (8008f84 <_write_r+0x20>)
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7f8 fbd5 	bl	8001722 <_write>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_write_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_write_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20000554 	.word	0x20000554

08008f88 <__errno>:
 8008f88:	4b01      	ldr	r3, [pc, #4]	; (8008f90 <__errno+0x8>)
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000064 	.word	0x20000064

08008f94 <__libc_init_array>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4d0d      	ldr	r5, [pc, #52]	; (8008fcc <__libc_init_array+0x38>)
 8008f98:	4c0d      	ldr	r4, [pc, #52]	; (8008fd0 <__libc_init_array+0x3c>)
 8008f9a:	1b64      	subs	r4, r4, r5
 8008f9c:	10a4      	asrs	r4, r4, #2
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	42a6      	cmp	r6, r4
 8008fa2:	d109      	bne.n	8008fb8 <__libc_init_array+0x24>
 8008fa4:	4d0b      	ldr	r5, [pc, #44]	; (8008fd4 <__libc_init_array+0x40>)
 8008fa6:	4c0c      	ldr	r4, [pc, #48]	; (8008fd8 <__libc_init_array+0x44>)
 8008fa8:	f003 fbd6 	bl	800c758 <_init>
 8008fac:	1b64      	subs	r4, r4, r5
 8008fae:	10a4      	asrs	r4, r4, #2
 8008fb0:	2600      	movs	r6, #0
 8008fb2:	42a6      	cmp	r6, r4
 8008fb4:	d105      	bne.n	8008fc2 <__libc_init_array+0x2e>
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fbc:	4798      	blx	r3
 8008fbe:	3601      	adds	r6, #1
 8008fc0:	e7ee      	b.n	8008fa0 <__libc_init_array+0xc>
 8008fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc6:	4798      	blx	r3
 8008fc8:	3601      	adds	r6, #1
 8008fca:	e7f2      	b.n	8008fb2 <__libc_init_array+0x1e>
 8008fcc:	0800cc20 	.word	0x0800cc20
 8008fd0:	0800cc20 	.word	0x0800cc20
 8008fd4:	0800cc20 	.word	0x0800cc20
 8008fd8:	0800cc24 	.word	0x0800cc24

08008fdc <__retarget_lock_init_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <__retarget_lock_acquire_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <__retarget_lock_release_recursive>:
 8008fe0:	4770      	bx	lr
	...

08008fe4 <nanf>:
 8008fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008fec <nanf+0x8>
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	7fc00000 	.word	0x7fc00000

08008ff0 <quorem>:
 8008ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	6903      	ldr	r3, [r0, #16]
 8008ff6:	690c      	ldr	r4, [r1, #16]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	db7e      	blt.n	80090fc <quorem+0x10c>
 8008ffe:	3c01      	subs	r4, #1
 8009000:	f101 0814 	add.w	r8, r1, #20
 8009004:	f100 0514 	add.w	r5, r0, #20
 8009008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009016:	3301      	adds	r3, #1
 8009018:	429a      	cmp	r2, r3
 800901a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800901e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009022:	fbb2 f6f3 	udiv	r6, r2, r3
 8009026:	d331      	bcc.n	800908c <quorem+0x9c>
 8009028:	f04f 0e00 	mov.w	lr, #0
 800902c:	4640      	mov	r0, r8
 800902e:	46ac      	mov	ip, r5
 8009030:	46f2      	mov	sl, lr
 8009032:	f850 2b04 	ldr.w	r2, [r0], #4
 8009036:	b293      	uxth	r3, r2
 8009038:	fb06 e303 	mla	r3, r6, r3, lr
 800903c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009040:	0c1a      	lsrs	r2, r3, #16
 8009042:	b29b      	uxth	r3, r3
 8009044:	ebaa 0303 	sub.w	r3, sl, r3
 8009048:	f8dc a000 	ldr.w	sl, [ip]
 800904c:	fa13 f38a 	uxtah	r3, r3, sl
 8009050:	fb06 220e 	mla	r2, r6, lr, r2
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800905c:	b292      	uxth	r2, r2
 800905e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009066:	f8bd 3000 	ldrh.w	r3, [sp]
 800906a:	4581      	cmp	r9, r0
 800906c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009070:	f84c 3b04 	str.w	r3, [ip], #4
 8009074:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009078:	d2db      	bcs.n	8009032 <quorem+0x42>
 800907a:	f855 300b 	ldr.w	r3, [r5, fp]
 800907e:	b92b      	cbnz	r3, 800908c <quorem+0x9c>
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	3b04      	subs	r3, #4
 8009084:	429d      	cmp	r5, r3
 8009086:	461a      	mov	r2, r3
 8009088:	d32c      	bcc.n	80090e4 <quorem+0xf4>
 800908a:	613c      	str	r4, [r7, #16]
 800908c:	4638      	mov	r0, r7
 800908e:	f001 f9ef 	bl	800a470 <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	db22      	blt.n	80090dc <quorem+0xec>
 8009096:	3601      	adds	r6, #1
 8009098:	4629      	mov	r1, r5
 800909a:	2000      	movs	r0, #0
 800909c:	f858 2b04 	ldr.w	r2, [r8], #4
 80090a0:	f8d1 c000 	ldr.w	ip, [r1]
 80090a4:	b293      	uxth	r3, r2
 80090a6:	1ac3      	subs	r3, r0, r3
 80090a8:	0c12      	lsrs	r2, r2, #16
 80090aa:	fa13 f38c 	uxtah	r3, r3, ip
 80090ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80090b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090bc:	45c1      	cmp	r9, r8
 80090be:	f841 3b04 	str.w	r3, [r1], #4
 80090c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090c6:	d2e9      	bcs.n	800909c <quorem+0xac>
 80090c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d0:	b922      	cbnz	r2, 80090dc <quorem+0xec>
 80090d2:	3b04      	subs	r3, #4
 80090d4:	429d      	cmp	r5, r3
 80090d6:	461a      	mov	r2, r3
 80090d8:	d30a      	bcc.n	80090f0 <quorem+0x100>
 80090da:	613c      	str	r4, [r7, #16]
 80090dc:	4630      	mov	r0, r6
 80090de:	b003      	add	sp, #12
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	6812      	ldr	r2, [r2, #0]
 80090e6:	3b04      	subs	r3, #4
 80090e8:	2a00      	cmp	r2, #0
 80090ea:	d1ce      	bne.n	800908a <quorem+0x9a>
 80090ec:	3c01      	subs	r4, #1
 80090ee:	e7c9      	b.n	8009084 <quorem+0x94>
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	3b04      	subs	r3, #4
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d1f0      	bne.n	80090da <quorem+0xea>
 80090f8:	3c01      	subs	r4, #1
 80090fa:	e7eb      	b.n	80090d4 <quorem+0xe4>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e7ee      	b.n	80090de <quorem+0xee>

08009100 <_dtoa_r>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	ed2d 8b04 	vpush	{d8-d9}
 8009108:	69c5      	ldr	r5, [r0, #28]
 800910a:	b093      	sub	sp, #76	; 0x4c
 800910c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009110:	ec57 6b10 	vmov	r6, r7, d0
 8009114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009118:	9107      	str	r1, [sp, #28]
 800911a:	4604      	mov	r4, r0
 800911c:	920a      	str	r2, [sp, #40]	; 0x28
 800911e:	930d      	str	r3, [sp, #52]	; 0x34
 8009120:	b975      	cbnz	r5, 8009140 <_dtoa_r+0x40>
 8009122:	2010      	movs	r0, #16
 8009124:	f000 fe2a 	bl	8009d7c <malloc>
 8009128:	4602      	mov	r2, r0
 800912a:	61e0      	str	r0, [r4, #28]
 800912c:	b920      	cbnz	r0, 8009138 <_dtoa_r+0x38>
 800912e:	4bae      	ldr	r3, [pc, #696]	; (80093e8 <_dtoa_r+0x2e8>)
 8009130:	21ef      	movs	r1, #239	; 0xef
 8009132:	48ae      	ldr	r0, [pc, #696]	; (80093ec <_dtoa_r+0x2ec>)
 8009134:	f002 fc74 	bl	800ba20 <__assert_func>
 8009138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800913c:	6005      	str	r5, [r0, #0]
 800913e:	60c5      	str	r5, [r0, #12]
 8009140:	69e3      	ldr	r3, [r4, #28]
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	b151      	cbz	r1, 800915c <_dtoa_r+0x5c>
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	604a      	str	r2, [r1, #4]
 800914a:	2301      	movs	r3, #1
 800914c:	4093      	lsls	r3, r2
 800914e:	608b      	str	r3, [r1, #8]
 8009150:	4620      	mov	r0, r4
 8009152:	f000 ff07 	bl	8009f64 <_Bfree>
 8009156:	69e3      	ldr	r3, [r4, #28]
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	1e3b      	subs	r3, r7, #0
 800915e:	bfbb      	ittet	lt
 8009160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009164:	9303      	strlt	r3, [sp, #12]
 8009166:	2300      	movge	r3, #0
 8009168:	2201      	movlt	r2, #1
 800916a:	bfac      	ite	ge
 800916c:	f8c8 3000 	strge.w	r3, [r8]
 8009170:	f8c8 2000 	strlt.w	r2, [r8]
 8009174:	4b9e      	ldr	r3, [pc, #632]	; (80093f0 <_dtoa_r+0x2f0>)
 8009176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800917a:	ea33 0308 	bics.w	r3, r3, r8
 800917e:	d11b      	bne.n	80091b8 <_dtoa_r+0xb8>
 8009180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009182:	f242 730f 	movw	r3, #9999	; 0x270f
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800918c:	4333      	orrs	r3, r6
 800918e:	f000 8593 	beq.w	8009cb8 <_dtoa_r+0xbb8>
 8009192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009194:	b963      	cbnz	r3, 80091b0 <_dtoa_r+0xb0>
 8009196:	4b97      	ldr	r3, [pc, #604]	; (80093f4 <_dtoa_r+0x2f4>)
 8009198:	e027      	b.n	80091ea <_dtoa_r+0xea>
 800919a:	4b97      	ldr	r3, [pc, #604]	; (80093f8 <_dtoa_r+0x2f8>)
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	9800      	ldr	r0, [sp, #0]
 80091a6:	b013      	add	sp, #76	; 0x4c
 80091a8:	ecbd 8b04 	vpop	{d8-d9}
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	4b90      	ldr	r3, [pc, #576]	; (80093f4 <_dtoa_r+0x2f4>)
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	3303      	adds	r3, #3
 80091b6:	e7f3      	b.n	80091a0 <_dtoa_r+0xa0>
 80091b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	ec51 0b17 	vmov	r0, r1, d7
 80091c2:	eeb0 8a47 	vmov.f32	s16, s14
 80091c6:	eef0 8a67 	vmov.f32	s17, s15
 80091ca:	2300      	movs	r3, #0
 80091cc:	f7f7 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d0:	4681      	mov	r9, r0
 80091d2:	b160      	cbz	r0, 80091ee <_dtoa_r+0xee>
 80091d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091d6:	2301      	movs	r3, #1
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8568 	beq.w	8009cb2 <_dtoa_r+0xbb2>
 80091e2:	4b86      	ldr	r3, [pc, #536]	; (80093fc <_dtoa_r+0x2fc>)
 80091e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	e7da      	b.n	80091a4 <_dtoa_r+0xa4>
 80091ee:	aa10      	add	r2, sp, #64	; 0x40
 80091f0:	a911      	add	r1, sp, #68	; 0x44
 80091f2:	4620      	mov	r0, r4
 80091f4:	eeb0 0a48 	vmov.f32	s0, s16
 80091f8:	eef0 0a68 	vmov.f32	s1, s17
 80091fc:	f001 fa4e 	bl	800a69c <__d2b>
 8009200:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009204:	4682      	mov	sl, r0
 8009206:	2d00      	cmp	r5, #0
 8009208:	d07f      	beq.n	800930a <_dtoa_r+0x20a>
 800920a:	ee18 3a90 	vmov	r3, s17
 800920e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009212:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009216:	ec51 0b18 	vmov	r0, r1, d8
 800921a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800921e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009222:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009226:	4619      	mov	r1, r3
 8009228:	2200      	movs	r2, #0
 800922a:	4b75      	ldr	r3, [pc, #468]	; (8009400 <_dtoa_r+0x300>)
 800922c:	f7f7 f82c 	bl	8000288 <__aeabi_dsub>
 8009230:	a367      	add	r3, pc, #412	; (adr r3, 80093d0 <_dtoa_r+0x2d0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	a367      	add	r3, pc, #412	; (adr r3, 80093d8 <_dtoa_r+0x2d8>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f7 f824 	bl	800028c <__adddf3>
 8009244:	4606      	mov	r6, r0
 8009246:	4628      	mov	r0, r5
 8009248:	460f      	mov	r7, r1
 800924a:	f7f7 f96b 	bl	8000524 <__aeabi_i2d>
 800924e:	a364      	add	r3, pc, #400	; (adr r3, 80093e0 <_dtoa_r+0x2e0>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 f9d0 	bl	80005f8 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	f7f7 fc76 	bl	8000b58 <__aeabi_d2iz>
 800926c:	2200      	movs	r2, #0
 800926e:	4683      	mov	fp, r0
 8009270:	2300      	movs	r3, #0
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 fc31 	bl	8000adc <__aeabi_dcmplt>
 800927a:	b148      	cbz	r0, 8009290 <_dtoa_r+0x190>
 800927c:	4658      	mov	r0, fp
 800927e:	f7f7 f951 	bl	8000524 <__aeabi_i2d>
 8009282:	4632      	mov	r2, r6
 8009284:	463b      	mov	r3, r7
 8009286:	f7f7 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800928a:	b908      	cbnz	r0, 8009290 <_dtoa_r+0x190>
 800928c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009290:	f1bb 0f16 	cmp.w	fp, #22
 8009294:	d857      	bhi.n	8009346 <_dtoa_r+0x246>
 8009296:	4b5b      	ldr	r3, [pc, #364]	; (8009404 <_dtoa_r+0x304>)
 8009298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	ec51 0b18 	vmov	r0, r1, d8
 80092a4:	f7f7 fc1a 	bl	8000adc <__aeabi_dcmplt>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d04e      	beq.n	800934a <_dtoa_r+0x24a>
 80092ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092b0:	2300      	movs	r3, #0
 80092b2:	930c      	str	r3, [sp, #48]	; 0x30
 80092b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b6:	1b5b      	subs	r3, r3, r5
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	bf45      	ittet	mi
 80092bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80092c0:	9305      	strmi	r3, [sp, #20]
 80092c2:	2300      	movpl	r3, #0
 80092c4:	2300      	movmi	r3, #0
 80092c6:	9206      	str	r2, [sp, #24]
 80092c8:	bf54      	ite	pl
 80092ca:	9305      	strpl	r3, [sp, #20]
 80092cc:	9306      	strmi	r3, [sp, #24]
 80092ce:	f1bb 0f00 	cmp.w	fp, #0
 80092d2:	db3c      	blt.n	800934e <_dtoa_r+0x24e>
 80092d4:	9b06      	ldr	r3, [sp, #24]
 80092d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80092da:	445b      	add	r3, fp
 80092dc:	9306      	str	r3, [sp, #24]
 80092de:	2300      	movs	r3, #0
 80092e0:	9308      	str	r3, [sp, #32]
 80092e2:	9b07      	ldr	r3, [sp, #28]
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	d868      	bhi.n	80093ba <_dtoa_r+0x2ba>
 80092e8:	2b05      	cmp	r3, #5
 80092ea:	bfc4      	itt	gt
 80092ec:	3b04      	subgt	r3, #4
 80092ee:	9307      	strgt	r3, [sp, #28]
 80092f0:	9b07      	ldr	r3, [sp, #28]
 80092f2:	f1a3 0302 	sub.w	r3, r3, #2
 80092f6:	bfcc      	ite	gt
 80092f8:	2500      	movgt	r5, #0
 80092fa:	2501      	movle	r5, #1
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	f200 8085 	bhi.w	800940c <_dtoa_r+0x30c>
 8009302:	e8df f003 	tbb	[pc, r3]
 8009306:	3b2e      	.short	0x3b2e
 8009308:	5839      	.short	0x5839
 800930a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800930e:	441d      	add	r5, r3
 8009310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009314:	2b20      	cmp	r3, #32
 8009316:	bfc1      	itttt	gt
 8009318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800931c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009320:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009324:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009328:	bfd6      	itet	le
 800932a:	f1c3 0320 	rsble	r3, r3, #32
 800932e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009332:	fa06 f003 	lslle.w	r0, r6, r3
 8009336:	f7f7 f8e5 	bl	8000504 <__aeabi_ui2d>
 800933a:	2201      	movs	r2, #1
 800933c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009340:	3d01      	subs	r5, #1
 8009342:	920e      	str	r2, [sp, #56]	; 0x38
 8009344:	e76f      	b.n	8009226 <_dtoa_r+0x126>
 8009346:	2301      	movs	r3, #1
 8009348:	e7b3      	b.n	80092b2 <_dtoa_r+0x1b2>
 800934a:	900c      	str	r0, [sp, #48]	; 0x30
 800934c:	e7b2      	b.n	80092b4 <_dtoa_r+0x1b4>
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	eba3 030b 	sub.w	r3, r3, fp
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	f1cb 0300 	rsb	r3, fp, #0
 800935a:	9308      	str	r3, [sp, #32]
 800935c:	2300      	movs	r3, #0
 800935e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009360:	e7bf      	b.n	80092e2 <_dtoa_r+0x1e2>
 8009362:	2300      	movs	r3, #0
 8009364:	9309      	str	r3, [sp, #36]	; 0x24
 8009366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc52      	bgt.n	8009412 <_dtoa_r+0x312>
 800936c:	2301      	movs	r3, #1
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	461a      	mov	r2, r3
 8009374:	920a      	str	r2, [sp, #40]	; 0x28
 8009376:	e00b      	b.n	8009390 <_dtoa_r+0x290>
 8009378:	2301      	movs	r3, #1
 800937a:	e7f3      	b.n	8009364 <_dtoa_r+0x264>
 800937c:	2300      	movs	r3, #0
 800937e:	9309      	str	r3, [sp, #36]	; 0x24
 8009380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009382:	445b      	add	r3, fp
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	3301      	adds	r3, #1
 8009388:	2b01      	cmp	r3, #1
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	bfb8      	it	lt
 800938e:	2301      	movlt	r3, #1
 8009390:	69e0      	ldr	r0, [r4, #28]
 8009392:	2100      	movs	r1, #0
 8009394:	2204      	movs	r2, #4
 8009396:	f102 0614 	add.w	r6, r2, #20
 800939a:	429e      	cmp	r6, r3
 800939c:	d93d      	bls.n	800941a <_dtoa_r+0x31a>
 800939e:	6041      	str	r1, [r0, #4]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fd9f 	bl	8009ee4 <_Balloc>
 80093a6:	9000      	str	r0, [sp, #0]
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d139      	bne.n	8009420 <_dtoa_r+0x320>
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <_dtoa_r+0x308>)
 80093ae:	4602      	mov	r2, r0
 80093b0:	f240 11af 	movw	r1, #431	; 0x1af
 80093b4:	e6bd      	b.n	8009132 <_dtoa_r+0x32>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7e1      	b.n	800937e <_dtoa_r+0x27e>
 80093ba:	2501      	movs	r5, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	9509      	str	r5, [sp, #36]	; 0x24
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	2200      	movs	r2, #0
 80093cc:	2312      	movs	r3, #18
 80093ce:	e7d1      	b.n	8009374 <_dtoa_r+0x274>
 80093d0:	636f4361 	.word	0x636f4361
 80093d4:	3fd287a7 	.word	0x3fd287a7
 80093d8:	8b60c8b3 	.word	0x8b60c8b3
 80093dc:	3fc68a28 	.word	0x3fc68a28
 80093e0:	509f79fb 	.word	0x509f79fb
 80093e4:	3fd34413 	.word	0x3fd34413
 80093e8:	0800c832 	.word	0x0800c832
 80093ec:	0800c849 	.word	0x0800c849
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	0800c82e 	.word	0x0800c82e
 80093f8:	0800c825 	.word	0x0800c825
 80093fc:	0800c7fd 	.word	0x0800c7fd
 8009400:	3ff80000 	.word	0x3ff80000
 8009404:	0800c938 	.word	0x0800c938
 8009408:	0800c8a1 	.word	0x0800c8a1
 800940c:	2301      	movs	r3, #1
 800940e:	9309      	str	r3, [sp, #36]	; 0x24
 8009410:	e7d7      	b.n	80093c2 <_dtoa_r+0x2c2>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	e7ba      	b.n	8009390 <_dtoa_r+0x290>
 800941a:	3101      	adds	r1, #1
 800941c:	0052      	lsls	r2, r2, #1
 800941e:	e7ba      	b.n	8009396 <_dtoa_r+0x296>
 8009420:	69e3      	ldr	r3, [r4, #28]
 8009422:	9a00      	ldr	r2, [sp, #0]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	2b0e      	cmp	r3, #14
 800942a:	f200 80a8 	bhi.w	800957e <_dtoa_r+0x47e>
 800942e:	2d00      	cmp	r5, #0
 8009430:	f000 80a5 	beq.w	800957e <_dtoa_r+0x47e>
 8009434:	f1bb 0f00 	cmp.w	fp, #0
 8009438:	dd38      	ble.n	80094ac <_dtoa_r+0x3ac>
 800943a:	4bc0      	ldr	r3, [pc, #768]	; (800973c <_dtoa_r+0x63c>)
 800943c:	f00b 020f 	and.w	r2, fp, #15
 8009440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009444:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009448:	e9d3 6700 	ldrd	r6, r7, [r3]
 800944c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009450:	d019      	beq.n	8009486 <_dtoa_r+0x386>
 8009452:	4bbb      	ldr	r3, [pc, #748]	; (8009740 <_dtoa_r+0x640>)
 8009454:	ec51 0b18 	vmov	r0, r1, d8
 8009458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800945c:	f7f7 f9f6 	bl	800084c <__aeabi_ddiv>
 8009460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009464:	f008 080f 	and.w	r8, r8, #15
 8009468:	2503      	movs	r5, #3
 800946a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009740 <_dtoa_r+0x640>
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	d10a      	bne.n	800948a <_dtoa_r+0x38a>
 8009474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	f7f7 f9e6 	bl	800084c <__aeabi_ddiv>
 8009480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009484:	e02b      	b.n	80094de <_dtoa_r+0x3de>
 8009486:	2502      	movs	r5, #2
 8009488:	e7ef      	b.n	800946a <_dtoa_r+0x36a>
 800948a:	f018 0f01 	tst.w	r8, #1
 800948e:	d008      	beq.n	80094a2 <_dtoa_r+0x3a2>
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	3501      	adds	r5, #1
 800949e:	4606      	mov	r6, r0
 80094a0:	460f      	mov	r7, r1
 80094a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094a6:	f109 0908 	add.w	r9, r9, #8
 80094aa:	e7e0      	b.n	800946e <_dtoa_r+0x36e>
 80094ac:	f000 809f 	beq.w	80095ee <_dtoa_r+0x4ee>
 80094b0:	f1cb 0600 	rsb	r6, fp, #0
 80094b4:	4ba1      	ldr	r3, [pc, #644]	; (800973c <_dtoa_r+0x63c>)
 80094b6:	4fa2      	ldr	r7, [pc, #648]	; (8009740 <_dtoa_r+0x640>)
 80094b8:	f006 020f 	and.w	r2, r6, #15
 80094bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	ec51 0b18 	vmov	r0, r1, d8
 80094c8:	f7f7 f896 	bl	80005f8 <__aeabi_dmul>
 80094cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d0:	1136      	asrs	r6, r6, #4
 80094d2:	2300      	movs	r3, #0
 80094d4:	2502      	movs	r5, #2
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	d17e      	bne.n	80095d8 <_dtoa_r+0x4d8>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1d0      	bne.n	8009480 <_dtoa_r+0x380>
 80094de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8084 	beq.w	80095f2 <_dtoa_r+0x4f2>
 80094ea:	4b96      	ldr	r3, [pc, #600]	; (8009744 <_dtoa_r+0x644>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f7 faf3 	bl	8000adc <__aeabi_dcmplt>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d07b      	beq.n	80095f2 <_dtoa_r+0x4f2>
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d078      	beq.n	80095f2 <_dtoa_r+0x4f2>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	dd39      	ble.n	800957a <_dtoa_r+0x47a>
 8009506:	4b90      	ldr	r3, [pc, #576]	; (8009748 <_dtoa_r+0x648>)
 8009508:	2200      	movs	r2, #0
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f7 f873 	bl	80005f8 <__aeabi_dmul>
 8009512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009516:	9e01      	ldr	r6, [sp, #4]
 8009518:	f10b 37ff 	add.w	r7, fp, #4294967295
 800951c:	3501      	adds	r5, #1
 800951e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009522:	4628      	mov	r0, r5
 8009524:	f7f6 fffe 	bl	8000524 <__aeabi_i2d>
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	4b86      	ldr	r3, [pc, #536]	; (800974c <_dtoa_r+0x64c>)
 8009532:	2200      	movs	r2, #0
 8009534:	f7f6 feaa 	bl	800028c <__adddf3>
 8009538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800953c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	2e00      	cmp	r6, #0
 8009544:	d158      	bne.n	80095f8 <_dtoa_r+0x4f8>
 8009546:	4b82      	ldr	r3, [pc, #520]	; (8009750 <_dtoa_r+0x650>)
 8009548:	2200      	movs	r2, #0
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f6 fe9b 	bl	8000288 <__aeabi_dsub>
 8009552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009556:	4680      	mov	r8, r0
 8009558:	4689      	mov	r9, r1
 800955a:	f7f7 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800955e:	2800      	cmp	r0, #0
 8009560:	f040 8296 	bne.w	8009a90 <_dtoa_r+0x990>
 8009564:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009568:	4640      	mov	r0, r8
 800956a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800956e:	4649      	mov	r1, r9
 8009570:	f7f7 fab4 	bl	8000adc <__aeabi_dcmplt>
 8009574:	2800      	cmp	r0, #0
 8009576:	f040 8289 	bne.w	8009a8c <_dtoa_r+0x98c>
 800957a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800957e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009580:	2b00      	cmp	r3, #0
 8009582:	f2c0 814e 	blt.w	8009822 <_dtoa_r+0x722>
 8009586:	f1bb 0f0e 	cmp.w	fp, #14
 800958a:	f300 814a 	bgt.w	8009822 <_dtoa_r+0x722>
 800958e:	4b6b      	ldr	r3, [pc, #428]	; (800973c <_dtoa_r+0x63c>)
 8009590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	f280 80dc 	bge.w	8009758 <_dtoa_r+0x658>
 80095a0:	9b04      	ldr	r3, [sp, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f300 80d8 	bgt.w	8009758 <_dtoa_r+0x658>
 80095a8:	f040 826f 	bne.w	8009a8a <_dtoa_r+0x98a>
 80095ac:	4b68      	ldr	r3, [pc, #416]	; (8009750 <_dtoa_r+0x650>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 f820 	bl	80005f8 <__aeabi_dmul>
 80095b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095bc:	f7f7 faa2 	bl	8000b04 <__aeabi_dcmpge>
 80095c0:	9e04      	ldr	r6, [sp, #16]
 80095c2:	4637      	mov	r7, r6
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f040 8245 	bne.w	8009a54 <_dtoa_r+0x954>
 80095ca:	9d00      	ldr	r5, [sp, #0]
 80095cc:	2331      	movs	r3, #49	; 0x31
 80095ce:	f805 3b01 	strb.w	r3, [r5], #1
 80095d2:	f10b 0b01 	add.w	fp, fp, #1
 80095d6:	e241      	b.n	8009a5c <_dtoa_r+0x95c>
 80095d8:	07f2      	lsls	r2, r6, #31
 80095da:	d505      	bpl.n	80095e8 <_dtoa_r+0x4e8>
 80095dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e0:	f7f7 f80a 	bl	80005f8 <__aeabi_dmul>
 80095e4:	3501      	adds	r5, #1
 80095e6:	2301      	movs	r3, #1
 80095e8:	1076      	asrs	r6, r6, #1
 80095ea:	3708      	adds	r7, #8
 80095ec:	e773      	b.n	80094d6 <_dtoa_r+0x3d6>
 80095ee:	2502      	movs	r5, #2
 80095f0:	e775      	b.n	80094de <_dtoa_r+0x3de>
 80095f2:	9e04      	ldr	r6, [sp, #16]
 80095f4:	465f      	mov	r7, fp
 80095f6:	e792      	b.n	800951e <_dtoa_r+0x41e>
 80095f8:	9900      	ldr	r1, [sp, #0]
 80095fa:	4b50      	ldr	r3, [pc, #320]	; (800973c <_dtoa_r+0x63c>)
 80095fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009600:	4431      	add	r1, r6
 8009602:	9102      	str	r1, [sp, #8]
 8009604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009606:	eeb0 9a47 	vmov.f32	s18, s14
 800960a:	eef0 9a67 	vmov.f32	s19, s15
 800960e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009616:	2900      	cmp	r1, #0
 8009618:	d044      	beq.n	80096a4 <_dtoa_r+0x5a4>
 800961a:	494e      	ldr	r1, [pc, #312]	; (8009754 <_dtoa_r+0x654>)
 800961c:	2000      	movs	r0, #0
 800961e:	f7f7 f915 	bl	800084c <__aeabi_ddiv>
 8009622:	ec53 2b19 	vmov	r2, r3, d9
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	9d00      	ldr	r5, [sp, #0]
 800962c:	ec41 0b19 	vmov	d9, r0, r1
 8009630:	4649      	mov	r1, r9
 8009632:	4640      	mov	r0, r8
 8009634:	f7f7 fa90 	bl	8000b58 <__aeabi_d2iz>
 8009638:	4606      	mov	r6, r0
 800963a:	f7f6 ff73 	bl	8000524 <__aeabi_i2d>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	f7f6 fe1f 	bl	8000288 <__aeabi_dsub>
 800964a:	3630      	adds	r6, #48	; 0x30
 800964c:	f805 6b01 	strb.w	r6, [r5], #1
 8009650:	ec53 2b19 	vmov	r2, r3, d9
 8009654:	4680      	mov	r8, r0
 8009656:	4689      	mov	r9, r1
 8009658:	f7f7 fa40 	bl	8000adc <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	d164      	bne.n	800972a <_dtoa_r+0x62a>
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	4937      	ldr	r1, [pc, #220]	; (8009744 <_dtoa_r+0x644>)
 8009666:	2000      	movs	r0, #0
 8009668:	f7f6 fe0e 	bl	8000288 <__aeabi_dsub>
 800966c:	ec53 2b19 	vmov	r2, r3, d9
 8009670:	f7f7 fa34 	bl	8000adc <__aeabi_dcmplt>
 8009674:	2800      	cmp	r0, #0
 8009676:	f040 80b6 	bne.w	80097e6 <_dtoa_r+0x6e6>
 800967a:	9b02      	ldr	r3, [sp, #8]
 800967c:	429d      	cmp	r5, r3
 800967e:	f43f af7c 	beq.w	800957a <_dtoa_r+0x47a>
 8009682:	4b31      	ldr	r3, [pc, #196]	; (8009748 <_dtoa_r+0x648>)
 8009684:	ec51 0b19 	vmov	r0, r1, d9
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4b2e      	ldr	r3, [pc, #184]	; (8009748 <_dtoa_r+0x648>)
 8009690:	ec41 0b19 	vmov	d9, r0, r1
 8009694:	2200      	movs	r2, #0
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f6 ffad 	bl	80005f8 <__aeabi_dmul>
 800969e:	4680      	mov	r8, r0
 80096a0:	4689      	mov	r9, r1
 80096a2:	e7c5      	b.n	8009630 <_dtoa_r+0x530>
 80096a4:	ec51 0b17 	vmov	r0, r1, d7
 80096a8:	f7f6 ffa6 	bl	80005f8 <__aeabi_dmul>
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	9d00      	ldr	r5, [sp, #0]
 80096b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80096b2:	ec41 0b19 	vmov	d9, r0, r1
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	f7f7 fa4d 	bl	8000b58 <__aeabi_d2iz>
 80096be:	4606      	mov	r6, r0
 80096c0:	f7f6 ff30 	bl	8000524 <__aeabi_i2d>
 80096c4:	3630      	adds	r6, #48	; 0x30
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4640      	mov	r0, r8
 80096cc:	4649      	mov	r1, r9
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	f805 6b01 	strb.w	r6, [r5], #1
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	429d      	cmp	r5, r3
 80096da:	4680      	mov	r8, r0
 80096dc:	4689      	mov	r9, r1
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	d124      	bne.n	800972e <_dtoa_r+0x62e>
 80096e4:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <_dtoa_r+0x654>)
 80096e6:	ec51 0b19 	vmov	r0, r1, d9
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f7 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d173      	bne.n	80097e6 <_dtoa_r+0x6e6>
 80096fe:	ec53 2b19 	vmov	r2, r3, d9
 8009702:	4914      	ldr	r1, [pc, #80]	; (8009754 <_dtoa_r+0x654>)
 8009704:	2000      	movs	r0, #0
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f7 f9e3 	bl	8000adc <__aeabi_dcmplt>
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f af2f 	beq.w	800957a <_dtoa_r+0x47a>
 800971c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800971e:	1e6b      	subs	r3, r5, #1
 8009720:	930f      	str	r3, [sp, #60]	; 0x3c
 8009722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009726:	2b30      	cmp	r3, #48	; 0x30
 8009728:	d0f8      	beq.n	800971c <_dtoa_r+0x61c>
 800972a:	46bb      	mov	fp, r7
 800972c:	e04a      	b.n	80097c4 <_dtoa_r+0x6c4>
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <_dtoa_r+0x648>)
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4680      	mov	r8, r0
 8009736:	4689      	mov	r9, r1
 8009738:	e7bd      	b.n	80096b6 <_dtoa_r+0x5b6>
 800973a:	bf00      	nop
 800973c:	0800c938 	.word	0x0800c938
 8009740:	0800c910 	.word	0x0800c910
 8009744:	3ff00000 	.word	0x3ff00000
 8009748:	40240000 	.word	0x40240000
 800974c:	401c0000 	.word	0x401c0000
 8009750:	40140000 	.word	0x40140000
 8009754:	3fe00000 	.word	0x3fe00000
 8009758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800975c:	9d00      	ldr	r5, [sp, #0]
 800975e:	4642      	mov	r2, r8
 8009760:	464b      	mov	r3, r9
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f7 f871 	bl	800084c <__aeabi_ddiv>
 800976a:	f7f7 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800976e:	9001      	str	r0, [sp, #4]
 8009770:	f7f6 fed8 	bl	8000524 <__aeabi_i2d>
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	f7f6 ff3e 	bl	80005f8 <__aeabi_dmul>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f6 fd80 	bl	8000288 <__aeabi_dsub>
 8009788:	9e01      	ldr	r6, [sp, #4]
 800978a:	9f04      	ldr	r7, [sp, #16]
 800978c:	3630      	adds	r6, #48	; 0x30
 800978e:	f805 6b01 	strb.w	r6, [r5], #1
 8009792:	9e00      	ldr	r6, [sp, #0]
 8009794:	1bae      	subs	r6, r5, r6
 8009796:	42b7      	cmp	r7, r6
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	d134      	bne.n	8009808 <_dtoa_r+0x708>
 800979e:	f7f6 fd75 	bl	800028c <__adddf3>
 80097a2:	4642      	mov	r2, r8
 80097a4:	464b      	mov	r3, r9
 80097a6:	4606      	mov	r6, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	f7f7 f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 80097ae:	b9c8      	cbnz	r0, 80097e4 <_dtoa_r+0x6e4>
 80097b0:	4642      	mov	r2, r8
 80097b2:	464b      	mov	r3, r9
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f7 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80097bc:	b110      	cbz	r0, 80097c4 <_dtoa_r+0x6c4>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	07db      	lsls	r3, r3, #31
 80097c2:	d40f      	bmi.n	80097e4 <_dtoa_r+0x6e4>
 80097c4:	4651      	mov	r1, sl
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 fbcc 	bl	8009f64 <_Bfree>
 80097cc:	2300      	movs	r3, #0
 80097ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097d0:	702b      	strb	r3, [r5, #0]
 80097d2:	f10b 0301 	add.w	r3, fp, #1
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f43f ace2 	beq.w	80091a4 <_dtoa_r+0xa4>
 80097e0:	601d      	str	r5, [r3, #0]
 80097e2:	e4df      	b.n	80091a4 <_dtoa_r+0xa4>
 80097e4:	465f      	mov	r7, fp
 80097e6:	462b      	mov	r3, r5
 80097e8:	461d      	mov	r5, r3
 80097ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ee:	2a39      	cmp	r2, #57	; 0x39
 80097f0:	d106      	bne.n	8009800 <_dtoa_r+0x700>
 80097f2:	9a00      	ldr	r2, [sp, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1f7      	bne.n	80097e8 <_dtoa_r+0x6e8>
 80097f8:	9900      	ldr	r1, [sp, #0]
 80097fa:	2230      	movs	r2, #48	; 0x30
 80097fc:	3701      	adds	r7, #1
 80097fe:	700a      	strb	r2, [r1, #0]
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	3201      	adds	r2, #1
 8009804:	701a      	strb	r2, [r3, #0]
 8009806:	e790      	b.n	800972a <_dtoa_r+0x62a>
 8009808:	4ba3      	ldr	r3, [pc, #652]	; (8009a98 <_dtoa_r+0x998>)
 800980a:	2200      	movs	r2, #0
 800980c:	f7f6 fef4 	bl	80005f8 <__aeabi_dmul>
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	f7f7 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800981c:	2800      	cmp	r0, #0
 800981e:	d09e      	beq.n	800975e <_dtoa_r+0x65e>
 8009820:	e7d0      	b.n	80097c4 <_dtoa_r+0x6c4>
 8009822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009824:	2a00      	cmp	r2, #0
 8009826:	f000 80ca 	beq.w	80099be <_dtoa_r+0x8be>
 800982a:	9a07      	ldr	r2, [sp, #28]
 800982c:	2a01      	cmp	r2, #1
 800982e:	f300 80ad 	bgt.w	800998c <_dtoa_r+0x88c>
 8009832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009834:	2a00      	cmp	r2, #0
 8009836:	f000 80a5 	beq.w	8009984 <_dtoa_r+0x884>
 800983a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800983e:	9e08      	ldr	r6, [sp, #32]
 8009840:	9d05      	ldr	r5, [sp, #20]
 8009842:	9a05      	ldr	r2, [sp, #20]
 8009844:	441a      	add	r2, r3
 8009846:	9205      	str	r2, [sp, #20]
 8009848:	9a06      	ldr	r2, [sp, #24]
 800984a:	2101      	movs	r1, #1
 800984c:	441a      	add	r2, r3
 800984e:	4620      	mov	r0, r4
 8009850:	9206      	str	r2, [sp, #24]
 8009852:	f000 fc87 	bl	800a164 <__i2b>
 8009856:	4607      	mov	r7, r0
 8009858:	b165      	cbz	r5, 8009874 <_dtoa_r+0x774>
 800985a:	9b06      	ldr	r3, [sp, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	dd09      	ble.n	8009874 <_dtoa_r+0x774>
 8009860:	42ab      	cmp	r3, r5
 8009862:	9a05      	ldr	r2, [sp, #20]
 8009864:	bfa8      	it	ge
 8009866:	462b      	movge	r3, r5
 8009868:	1ad2      	subs	r2, r2, r3
 800986a:	9205      	str	r2, [sp, #20]
 800986c:	9a06      	ldr	r2, [sp, #24]
 800986e:	1aed      	subs	r5, r5, r3
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	9306      	str	r3, [sp, #24]
 8009874:	9b08      	ldr	r3, [sp, #32]
 8009876:	b1f3      	cbz	r3, 80098b6 <_dtoa_r+0x7b6>
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80a3 	beq.w	80099c6 <_dtoa_r+0x8c6>
 8009880:	2e00      	cmp	r6, #0
 8009882:	dd10      	ble.n	80098a6 <_dtoa_r+0x7a6>
 8009884:	4639      	mov	r1, r7
 8009886:	4632      	mov	r2, r6
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fd2b 	bl	800a2e4 <__pow5mult>
 800988e:	4652      	mov	r2, sl
 8009890:	4601      	mov	r1, r0
 8009892:	4607      	mov	r7, r0
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fc7b 	bl	800a190 <__multiply>
 800989a:	4651      	mov	r1, sl
 800989c:	4680      	mov	r8, r0
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fb60 	bl	8009f64 <_Bfree>
 80098a4:	46c2      	mov	sl, r8
 80098a6:	9b08      	ldr	r3, [sp, #32]
 80098a8:	1b9a      	subs	r2, r3, r6
 80098aa:	d004      	beq.n	80098b6 <_dtoa_r+0x7b6>
 80098ac:	4651      	mov	r1, sl
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fd18 	bl	800a2e4 <__pow5mult>
 80098b4:	4682      	mov	sl, r0
 80098b6:	2101      	movs	r1, #1
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fc53 	bl	800a164 <__i2b>
 80098be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	4606      	mov	r6, r0
 80098c4:	f340 8081 	ble.w	80099ca <_dtoa_r+0x8ca>
 80098c8:	461a      	mov	r2, r3
 80098ca:	4601      	mov	r1, r0
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fd09 	bl	800a2e4 <__pow5mult>
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	4606      	mov	r6, r0
 80098d8:	dd7a      	ble.n	80099d0 <_dtoa_r+0x8d0>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	6933      	ldr	r3, [r6, #16]
 80098e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098e4:	6918      	ldr	r0, [r3, #16]
 80098e6:	f000 fbef 	bl	800a0c8 <__hi0bits>
 80098ea:	f1c0 0020 	rsb	r0, r0, #32
 80098ee:	9b06      	ldr	r3, [sp, #24]
 80098f0:	4418      	add	r0, r3
 80098f2:	f010 001f 	ands.w	r0, r0, #31
 80098f6:	f000 8094 	beq.w	8009a22 <_dtoa_r+0x922>
 80098fa:	f1c0 0320 	rsb	r3, r0, #32
 80098fe:	2b04      	cmp	r3, #4
 8009900:	f340 8085 	ble.w	8009a0e <_dtoa_r+0x90e>
 8009904:	9b05      	ldr	r3, [sp, #20]
 8009906:	f1c0 001c 	rsb	r0, r0, #28
 800990a:	4403      	add	r3, r0
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	4403      	add	r3, r0
 8009912:	4405      	add	r5, r0
 8009914:	9306      	str	r3, [sp, #24]
 8009916:	9b05      	ldr	r3, [sp, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	dd05      	ble.n	8009928 <_dtoa_r+0x828>
 800991c:	4651      	mov	r1, sl
 800991e:	461a      	mov	r2, r3
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fd39 	bl	800a398 <__lshift>
 8009926:	4682      	mov	sl, r0
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	dd05      	ble.n	800993a <_dtoa_r+0x83a>
 800992e:	4631      	mov	r1, r6
 8009930:	461a      	mov	r2, r3
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fd30 	bl	800a398 <__lshift>
 8009938:	4606      	mov	r6, r0
 800993a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800993c:	2b00      	cmp	r3, #0
 800993e:	d072      	beq.n	8009a26 <_dtoa_r+0x926>
 8009940:	4631      	mov	r1, r6
 8009942:	4650      	mov	r0, sl
 8009944:	f000 fd94 	bl	800a470 <__mcmp>
 8009948:	2800      	cmp	r0, #0
 800994a:	da6c      	bge.n	8009a26 <_dtoa_r+0x926>
 800994c:	2300      	movs	r3, #0
 800994e:	4651      	mov	r1, sl
 8009950:	220a      	movs	r2, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fb28 	bl	8009fa8 <__multadd>
 8009958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800995e:	4682      	mov	sl, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 81b0 	beq.w	8009cc6 <_dtoa_r+0xbc6>
 8009966:	2300      	movs	r3, #0
 8009968:	4639      	mov	r1, r7
 800996a:	220a      	movs	r2, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fb1b 	bl	8009fa8 <__multadd>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	4607      	mov	r7, r0
 8009978:	f300 8096 	bgt.w	8009aa8 <_dtoa_r+0x9a8>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	2b02      	cmp	r3, #2
 8009980:	dc59      	bgt.n	8009a36 <_dtoa_r+0x936>
 8009982:	e091      	b.n	8009aa8 <_dtoa_r+0x9a8>
 8009984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800998a:	e758      	b.n	800983e <_dtoa_r+0x73e>
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	1e5e      	subs	r6, r3, #1
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	42b3      	cmp	r3, r6
 8009994:	bfbf      	itttt	lt
 8009996:	9b08      	ldrlt	r3, [sp, #32]
 8009998:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800999a:	9608      	strlt	r6, [sp, #32]
 800999c:	1af3      	sublt	r3, r6, r3
 800999e:	bfb4      	ite	lt
 80099a0:	18d2      	addlt	r2, r2, r3
 80099a2:	1b9e      	subge	r6, r3, r6
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	bfbc      	itt	lt
 80099a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80099aa:	2600      	movlt	r6, #0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bfb7      	itett	lt
 80099b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80099b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80099b8:	1a9d      	sublt	r5, r3, r2
 80099ba:	2300      	movlt	r3, #0
 80099bc:	e741      	b.n	8009842 <_dtoa_r+0x742>
 80099be:	9e08      	ldr	r6, [sp, #32]
 80099c0:	9d05      	ldr	r5, [sp, #20]
 80099c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099c4:	e748      	b.n	8009858 <_dtoa_r+0x758>
 80099c6:	9a08      	ldr	r2, [sp, #32]
 80099c8:	e770      	b.n	80098ac <_dtoa_r+0x7ac>
 80099ca:	9b07      	ldr	r3, [sp, #28]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	dc19      	bgt.n	8009a04 <_dtoa_r+0x904>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	b9bb      	cbnz	r3, 8009a04 <_dtoa_r+0x904>
 80099d4:	9b03      	ldr	r3, [sp, #12]
 80099d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099da:	b99b      	cbnz	r3, 8009a04 <_dtoa_r+0x904>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099e2:	0d1b      	lsrs	r3, r3, #20
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	b183      	cbz	r3, 8009a0a <_dtoa_r+0x90a>
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	3301      	adds	r3, #1
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	3301      	adds	r3, #1
 80099f2:	9306      	str	r3, [sp, #24]
 80099f4:	f04f 0801 	mov.w	r8, #1
 80099f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f47f af6f 	bne.w	80098de <_dtoa_r+0x7de>
 8009a00:	2001      	movs	r0, #1
 8009a02:	e774      	b.n	80098ee <_dtoa_r+0x7ee>
 8009a04:	f04f 0800 	mov.w	r8, #0
 8009a08:	e7f6      	b.n	80099f8 <_dtoa_r+0x8f8>
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	e7f4      	b.n	80099f8 <_dtoa_r+0x8f8>
 8009a0e:	d082      	beq.n	8009916 <_dtoa_r+0x816>
 8009a10:	9a05      	ldr	r2, [sp, #20]
 8009a12:	331c      	adds	r3, #28
 8009a14:	441a      	add	r2, r3
 8009a16:	9205      	str	r2, [sp, #20]
 8009a18:	9a06      	ldr	r2, [sp, #24]
 8009a1a:	441a      	add	r2, r3
 8009a1c:	441d      	add	r5, r3
 8009a1e:	9206      	str	r2, [sp, #24]
 8009a20:	e779      	b.n	8009916 <_dtoa_r+0x816>
 8009a22:	4603      	mov	r3, r0
 8009a24:	e7f4      	b.n	8009a10 <_dtoa_r+0x910>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc37      	bgt.n	8009a9c <_dtoa_r+0x99c>
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	dd34      	ble.n	8009a9c <_dtoa_r+0x99c>
 8009a32:	9b04      	ldr	r3, [sp, #16]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	b963      	cbnz	r3, 8009a54 <_dtoa_r+0x954>
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fab2 	bl	8009fa8 <__multadd>
 8009a44:	4601      	mov	r1, r0
 8009a46:	4606      	mov	r6, r0
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f000 fd11 	bl	800a470 <__mcmp>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f73f adbb 	bgt.w	80095ca <_dtoa_r+0x4ca>
 8009a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a56:	9d00      	ldr	r5, [sp, #0]
 8009a58:	ea6f 0b03 	mvn.w	fp, r3
 8009a5c:	f04f 0800 	mov.w	r8, #0
 8009a60:	4631      	mov	r1, r6
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fa7e 	bl	8009f64 <_Bfree>
 8009a68:	2f00      	cmp	r7, #0
 8009a6a:	f43f aeab 	beq.w	80097c4 <_dtoa_r+0x6c4>
 8009a6e:	f1b8 0f00 	cmp.w	r8, #0
 8009a72:	d005      	beq.n	8009a80 <_dtoa_r+0x980>
 8009a74:	45b8      	cmp	r8, r7
 8009a76:	d003      	beq.n	8009a80 <_dtoa_r+0x980>
 8009a78:	4641      	mov	r1, r8
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fa72 	bl	8009f64 <_Bfree>
 8009a80:	4639      	mov	r1, r7
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fa6e 	bl	8009f64 <_Bfree>
 8009a88:	e69c      	b.n	80097c4 <_dtoa_r+0x6c4>
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	4637      	mov	r7, r6
 8009a8e:	e7e1      	b.n	8009a54 <_dtoa_r+0x954>
 8009a90:	46bb      	mov	fp, r7
 8009a92:	4637      	mov	r7, r6
 8009a94:	e599      	b.n	80095ca <_dtoa_r+0x4ca>
 8009a96:	bf00      	nop
 8009a98:	40240000 	.word	0x40240000
 8009a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80c8 	beq.w	8009c34 <_dtoa_r+0xb34>
 8009aa4:	9b04      	ldr	r3, [sp, #16]
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	dd05      	ble.n	8009ab8 <_dtoa_r+0x9b8>
 8009aac:	4639      	mov	r1, r7
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fc71 	bl	800a398 <__lshift>
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	f1b8 0f00 	cmp.w	r8, #0
 8009abc:	d05b      	beq.n	8009b76 <_dtoa_r+0xa76>
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fa0f 	bl	8009ee4 <_Balloc>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <_dtoa_r+0x9d6>
 8009aca:	4b83      	ldr	r3, [pc, #524]	; (8009cd8 <_dtoa_r+0xbd8>)
 8009acc:	4602      	mov	r2, r0
 8009ace:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ad2:	f7ff bb2e 	b.w	8009132 <_dtoa_r+0x32>
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	3202      	adds	r2, #2
 8009ada:	0092      	lsls	r2, r2, #2
 8009adc:	f107 010c 	add.w	r1, r7, #12
 8009ae0:	300c      	adds	r0, #12
 8009ae2:	f001 ff85 	bl	800b9f0 <memcpy>
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 fc54 	bl	800a398 <__lshift>
 8009af0:	9b00      	ldr	r3, [sp, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afa:	4413      	add	r3, r2
 8009afc:	9308      	str	r3, [sp, #32]
 8009afe:	9b02      	ldr	r3, [sp, #8]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	46b8      	mov	r8, r7
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	4607      	mov	r7, r0
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	4650      	mov	r0, sl
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	f7ff fa6c 	bl	8008ff0 <quorem>
 8009b18:	4641      	mov	r1, r8
 8009b1a:	9002      	str	r0, [sp, #8]
 8009b1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b20:	4650      	mov	r0, sl
 8009b22:	f000 fca5 	bl	800a470 <__mcmp>
 8009b26:	463a      	mov	r2, r7
 8009b28:	9005      	str	r0, [sp, #20]
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fcbb 	bl	800a4a8 <__mdiff>
 8009b32:	68c2      	ldr	r2, [r0, #12]
 8009b34:	4605      	mov	r5, r0
 8009b36:	bb02      	cbnz	r2, 8009b7a <_dtoa_r+0xa7a>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f000 fc98 	bl	800a470 <__mcmp>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4629      	mov	r1, r5
 8009b44:	4620      	mov	r0, r4
 8009b46:	9209      	str	r2, [sp, #36]	; 0x24
 8009b48:	f000 fa0c 	bl	8009f64 <_Bfree>
 8009b4c:	9b07      	ldr	r3, [sp, #28]
 8009b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b50:	9d04      	ldr	r5, [sp, #16]
 8009b52:	ea43 0102 	orr.w	r1, r3, r2
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	4319      	orrs	r1, r3
 8009b5a:	d110      	bne.n	8009b7e <_dtoa_r+0xa7e>
 8009b5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b60:	d029      	beq.n	8009bb6 <_dtoa_r+0xab6>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dd02      	ble.n	8009b6e <_dtoa_r+0xa6e>
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	f883 9000 	strb.w	r9, [r3]
 8009b74:	e774      	b.n	8009a60 <_dtoa_r+0x960>
 8009b76:	4638      	mov	r0, r7
 8009b78:	e7ba      	b.n	8009af0 <_dtoa_r+0x9f0>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	e7e1      	b.n	8009b42 <_dtoa_r+0xa42>
 8009b7e:	9b05      	ldr	r3, [sp, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	db04      	blt.n	8009b8e <_dtoa_r+0xa8e>
 8009b84:	9907      	ldr	r1, [sp, #28]
 8009b86:	430b      	orrs	r3, r1
 8009b88:	9906      	ldr	r1, [sp, #24]
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	d120      	bne.n	8009bd0 <_dtoa_r+0xad0>
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	dded      	ble.n	8009b6e <_dtoa_r+0xa6e>
 8009b92:	4651      	mov	r1, sl
 8009b94:	2201      	movs	r2, #1
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fbfe 	bl	800a398 <__lshift>
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	f000 fc66 	bl	800a470 <__mcmp>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	dc03      	bgt.n	8009bb0 <_dtoa_r+0xab0>
 8009ba8:	d1e1      	bne.n	8009b6e <_dtoa_r+0xa6e>
 8009baa:	f019 0f01 	tst.w	r9, #1
 8009bae:	d0de      	beq.n	8009b6e <_dtoa_r+0xa6e>
 8009bb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bb4:	d1d8      	bne.n	8009b68 <_dtoa_r+0xa68>
 8009bb6:	9a01      	ldr	r2, [sp, #4]
 8009bb8:	2339      	movs	r3, #57	; 0x39
 8009bba:	7013      	strb	r3, [r2, #0]
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bc6:	2a39      	cmp	r2, #57	; 0x39
 8009bc8:	d06c      	beq.n	8009ca4 <_dtoa_r+0xba4>
 8009bca:	3201      	adds	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e747      	b.n	8009a60 <_dtoa_r+0x960>
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	dd07      	ble.n	8009be4 <_dtoa_r+0xae4>
 8009bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bd8:	d0ed      	beq.n	8009bb6 <_dtoa_r+0xab6>
 8009bda:	9a01      	ldr	r2, [sp, #4]
 8009bdc:	f109 0301 	add.w	r3, r9, #1
 8009be0:	7013      	strb	r3, [r2, #0]
 8009be2:	e73d      	b.n	8009a60 <_dtoa_r+0x960>
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	9a08      	ldr	r2, [sp, #32]
 8009be8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d043      	beq.n	8009c78 <_dtoa_r+0xb78>
 8009bf0:	4651      	mov	r1, sl
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	220a      	movs	r2, #10
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 f9d6 	bl	8009fa8 <__multadd>
 8009bfc:	45b8      	cmp	r8, r7
 8009bfe:	4682      	mov	sl, r0
 8009c00:	f04f 0300 	mov.w	r3, #0
 8009c04:	f04f 020a 	mov.w	r2, #10
 8009c08:	4641      	mov	r1, r8
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	d107      	bne.n	8009c1e <_dtoa_r+0xb1e>
 8009c0e:	f000 f9cb 	bl	8009fa8 <__multadd>
 8009c12:	4680      	mov	r8, r0
 8009c14:	4607      	mov	r7, r0
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	e775      	b.n	8009b0a <_dtoa_r+0xa0a>
 8009c1e:	f000 f9c3 	bl	8009fa8 <__multadd>
 8009c22:	4639      	mov	r1, r7
 8009c24:	4680      	mov	r8, r0
 8009c26:	2300      	movs	r3, #0
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f9bc 	bl	8009fa8 <__multadd>
 8009c30:	4607      	mov	r7, r0
 8009c32:	e7f0      	b.n	8009c16 <_dtoa_r+0xb16>
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	9d00      	ldr	r5, [sp, #0]
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	f7ff f9d7 	bl	8008ff0 <quorem>
 8009c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	f805 9b01 	strb.w	r9, [r5], #1
 8009c4c:	1aea      	subs	r2, r5, r3
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	dd07      	ble.n	8009c64 <_dtoa_r+0xb64>
 8009c54:	4651      	mov	r1, sl
 8009c56:	2300      	movs	r3, #0
 8009c58:	220a      	movs	r2, #10
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f9a4 	bl	8009fa8 <__multadd>
 8009c60:	4682      	mov	sl, r0
 8009c62:	e7ea      	b.n	8009c3a <_dtoa_r+0xb3a>
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfc8      	it	gt
 8009c6a:	461d      	movgt	r5, r3
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	bfd8      	it	le
 8009c70:	2501      	movle	r5, #1
 8009c72:	441d      	add	r5, r3
 8009c74:	f04f 0800 	mov.w	r8, #0
 8009c78:	4651      	mov	r1, sl
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fb8b 	bl	800a398 <__lshift>
 8009c82:	4631      	mov	r1, r6
 8009c84:	4682      	mov	sl, r0
 8009c86:	f000 fbf3 	bl	800a470 <__mcmp>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	dc96      	bgt.n	8009bbc <_dtoa_r+0xabc>
 8009c8e:	d102      	bne.n	8009c96 <_dtoa_r+0xb96>
 8009c90:	f019 0f01 	tst.w	r9, #1
 8009c94:	d192      	bne.n	8009bbc <_dtoa_r+0xabc>
 8009c96:	462b      	mov	r3, r5
 8009c98:	461d      	mov	r5, r3
 8009c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c9e:	2a30      	cmp	r2, #48	; 0x30
 8009ca0:	d0fa      	beq.n	8009c98 <_dtoa_r+0xb98>
 8009ca2:	e6dd      	b.n	8009a60 <_dtoa_r+0x960>
 8009ca4:	9a00      	ldr	r2, [sp, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d189      	bne.n	8009bbe <_dtoa_r+0xabe>
 8009caa:	f10b 0b01 	add.w	fp, fp, #1
 8009cae:	2331      	movs	r3, #49	; 0x31
 8009cb0:	e796      	b.n	8009be0 <_dtoa_r+0xae0>
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <_dtoa_r+0xbdc>)
 8009cb4:	f7ff ba99 	b.w	80091ea <_dtoa_r+0xea>
 8009cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f47f aa6d 	bne.w	800919a <_dtoa_r+0x9a>
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <_dtoa_r+0xbe0>)
 8009cc2:	f7ff ba92 	b.w	80091ea <_dtoa_r+0xea>
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dcb5      	bgt.n	8009c38 <_dtoa_r+0xb38>
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	f73f aeb1 	bgt.w	8009a36 <_dtoa_r+0x936>
 8009cd4:	e7b0      	b.n	8009c38 <_dtoa_r+0xb38>
 8009cd6:	bf00      	nop
 8009cd8:	0800c8a1 	.word	0x0800c8a1
 8009cdc:	0800c7fc 	.word	0x0800c7fc
 8009ce0:	0800c825 	.word	0x0800c825

08009ce4 <_free_r>:
 8009ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d044      	beq.n	8009d74 <_free_r+0x90>
 8009cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cee:	9001      	str	r0, [sp, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8009cf6:	bfb8      	it	lt
 8009cf8:	18e4      	addlt	r4, r4, r3
 8009cfa:	f000 f8e7 	bl	8009ecc <__malloc_lock>
 8009cfe:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <_free_r+0x94>)
 8009d00:	9801      	ldr	r0, [sp, #4]
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	b933      	cbnz	r3, 8009d14 <_free_r+0x30>
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	6014      	str	r4, [r2, #0]
 8009d0a:	b003      	add	sp, #12
 8009d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d10:	f000 b8e2 	b.w	8009ed8 <__malloc_unlock>
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d908      	bls.n	8009d2a <_free_r+0x46>
 8009d18:	6825      	ldr	r5, [r4, #0]
 8009d1a:	1961      	adds	r1, r4, r5
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	bf01      	itttt	eq
 8009d20:	6819      	ldreq	r1, [r3, #0]
 8009d22:	685b      	ldreq	r3, [r3, #4]
 8009d24:	1949      	addeq	r1, r1, r5
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	e7ed      	b.n	8009d06 <_free_r+0x22>
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	b10b      	cbz	r3, 8009d34 <_free_r+0x50>
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d9fa      	bls.n	8009d2a <_free_r+0x46>
 8009d34:	6811      	ldr	r1, [r2, #0]
 8009d36:	1855      	adds	r5, r2, r1
 8009d38:	42a5      	cmp	r5, r4
 8009d3a:	d10b      	bne.n	8009d54 <_free_r+0x70>
 8009d3c:	6824      	ldr	r4, [r4, #0]
 8009d3e:	4421      	add	r1, r4
 8009d40:	1854      	adds	r4, r2, r1
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	d1e0      	bne.n	8009d0a <_free_r+0x26>
 8009d48:	681c      	ldr	r4, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	6053      	str	r3, [r2, #4]
 8009d4e:	440c      	add	r4, r1
 8009d50:	6014      	str	r4, [r2, #0]
 8009d52:	e7da      	b.n	8009d0a <_free_r+0x26>
 8009d54:	d902      	bls.n	8009d5c <_free_r+0x78>
 8009d56:	230c      	movs	r3, #12
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	e7d6      	b.n	8009d0a <_free_r+0x26>
 8009d5c:	6825      	ldr	r5, [r4, #0]
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf04      	itt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	bf04      	itt	eq
 8009d6c:	1949      	addeq	r1, r1, r5
 8009d6e:	6021      	streq	r1, [r4, #0]
 8009d70:	6054      	str	r4, [r2, #4]
 8009d72:	e7ca      	b.n	8009d0a <_free_r+0x26>
 8009d74:	b003      	add	sp, #12
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	2000055c 	.word	0x2000055c

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	; (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b823 	b.w	8009dcc <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	20000064 	.word	0x20000064

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0e      	ldr	r6, [pc, #56]	; (8009dc8 <sbrk_aligned+0x3c>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f001 fe1a 	bl	800b9d0 <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f001 fe15 	bl	800b9d0 <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <sbrk_aligned+0x34>
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d007      	beq.n	8009dc4 <sbrk_aligned+0x38>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f001 fe0a 	bl	800b9d0 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d101      	bne.n	8009dc4 <sbrk_aligned+0x38>
 8009dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	20000560 	.word	0x20000560

08009dcc <_malloc_r>:
 8009dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd0:	1ccd      	adds	r5, r1, #3
 8009dd2:	f025 0503 	bic.w	r5, r5, #3
 8009dd6:	3508      	adds	r5, #8
 8009dd8:	2d0c      	cmp	r5, #12
 8009dda:	bf38      	it	cc
 8009ddc:	250c      	movcc	r5, #12
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	4607      	mov	r7, r0
 8009de2:	db01      	blt.n	8009de8 <_malloc_r+0x1c>
 8009de4:	42a9      	cmp	r1, r5
 8009de6:	d905      	bls.n	8009df4 <_malloc_r+0x28>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	2600      	movs	r6, #0
 8009dee:	4630      	mov	r0, r6
 8009df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ec8 <_malloc_r+0xfc>
 8009df8:	f000 f868 	bl	8009ecc <__malloc_lock>
 8009dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8009e00:	461c      	mov	r4, r3
 8009e02:	bb5c      	cbnz	r4, 8009e5c <_malloc_r+0x90>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4638      	mov	r0, r7
 8009e08:	f7ff ffc0 	bl	8009d8c <sbrk_aligned>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	4604      	mov	r4, r0
 8009e10:	d155      	bne.n	8009ebe <_malloc_r+0xf2>
 8009e12:	f8d8 4000 	ldr.w	r4, [r8]
 8009e16:	4626      	mov	r6, r4
 8009e18:	2e00      	cmp	r6, #0
 8009e1a:	d145      	bne.n	8009ea8 <_malloc_r+0xdc>
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	d048      	beq.n	8009eb2 <_malloc_r+0xe6>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4638      	mov	r0, r7
 8009e26:	eb04 0903 	add.w	r9, r4, r3
 8009e2a:	f001 fdd1 	bl	800b9d0 <_sbrk_r>
 8009e2e:	4581      	cmp	r9, r0
 8009e30:	d13f      	bne.n	8009eb2 <_malloc_r+0xe6>
 8009e32:	6821      	ldr	r1, [r4, #0]
 8009e34:	1a6d      	subs	r5, r5, r1
 8009e36:	4629      	mov	r1, r5
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f7ff ffa7 	bl	8009d8c <sbrk_aligned>
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d037      	beq.n	8009eb2 <_malloc_r+0xe6>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	442b      	add	r3, r5
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d038      	beq.n	8009ec2 <_malloc_r+0xf6>
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	42a2      	cmp	r2, r4
 8009e54:	d12b      	bne.n	8009eae <_malloc_r+0xe2>
 8009e56:	2200      	movs	r2, #0
 8009e58:	605a      	str	r2, [r3, #4]
 8009e5a:	e00f      	b.n	8009e7c <_malloc_r+0xb0>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	1b52      	subs	r2, r2, r5
 8009e60:	d41f      	bmi.n	8009ea2 <_malloc_r+0xd6>
 8009e62:	2a0b      	cmp	r2, #11
 8009e64:	d917      	bls.n	8009e96 <_malloc_r+0xca>
 8009e66:	1961      	adds	r1, r4, r5
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	6025      	str	r5, [r4, #0]
 8009e6c:	bf18      	it	ne
 8009e6e:	6059      	strne	r1, [r3, #4]
 8009e70:	6863      	ldr	r3, [r4, #4]
 8009e72:	bf08      	it	eq
 8009e74:	f8c8 1000 	streq.w	r1, [r8]
 8009e78:	5162      	str	r2, [r4, r5]
 8009e7a:	604b      	str	r3, [r1, #4]
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f104 060b 	add.w	r6, r4, #11
 8009e82:	f000 f829 	bl	8009ed8 <__malloc_unlock>
 8009e86:	f026 0607 	bic.w	r6, r6, #7
 8009e8a:	1d23      	adds	r3, r4, #4
 8009e8c:	1af2      	subs	r2, r6, r3
 8009e8e:	d0ae      	beq.n	8009dee <_malloc_r+0x22>
 8009e90:	1b9b      	subs	r3, r3, r6
 8009e92:	50a3      	str	r3, [r4, r2]
 8009e94:	e7ab      	b.n	8009dee <_malloc_r+0x22>
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	6862      	ldr	r2, [r4, #4]
 8009e9a:	d1dd      	bne.n	8009e58 <_malloc_r+0x8c>
 8009e9c:	f8c8 2000 	str.w	r2, [r8]
 8009ea0:	e7ec      	b.n	8009e7c <_malloc_r+0xb0>
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	6864      	ldr	r4, [r4, #4]
 8009ea6:	e7ac      	b.n	8009e02 <_malloc_r+0x36>
 8009ea8:	4634      	mov	r4, r6
 8009eaa:	6876      	ldr	r6, [r6, #4]
 8009eac:	e7b4      	b.n	8009e18 <_malloc_r+0x4c>
 8009eae:	4613      	mov	r3, r2
 8009eb0:	e7cc      	b.n	8009e4c <_malloc_r+0x80>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	603b      	str	r3, [r7, #0]
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f000 f80e 	bl	8009ed8 <__malloc_unlock>
 8009ebc:	e797      	b.n	8009dee <_malloc_r+0x22>
 8009ebe:	6025      	str	r5, [r4, #0]
 8009ec0:	e7dc      	b.n	8009e7c <_malloc_r+0xb0>
 8009ec2:	605b      	str	r3, [r3, #4]
 8009ec4:	deff      	udf	#255	; 0xff
 8009ec6:	bf00      	nop
 8009ec8:	2000055c 	.word	0x2000055c

08009ecc <__malloc_lock>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__malloc_lock+0x8>)
 8009ece:	f7ff b886 	b.w	8008fde <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20000558 	.word	0x20000558

08009ed8 <__malloc_unlock>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__malloc_unlock+0x8>)
 8009eda:	f7ff b881 	b.w	8008fe0 <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20000558 	.word	0x20000558

08009ee4 <_Balloc>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	69c6      	ldr	r6, [r0, #28]
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	b976      	cbnz	r6, 8009f0c <_Balloc+0x28>
 8009eee:	2010      	movs	r0, #16
 8009ef0:	f7ff ff44 	bl	8009d7c <malloc>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	61e0      	str	r0, [r4, #28]
 8009ef8:	b920      	cbnz	r0, 8009f04 <_Balloc+0x20>
 8009efa:	4b18      	ldr	r3, [pc, #96]	; (8009f5c <_Balloc+0x78>)
 8009efc:	4818      	ldr	r0, [pc, #96]	; (8009f60 <_Balloc+0x7c>)
 8009efe:	216b      	movs	r1, #107	; 0x6b
 8009f00:	f001 fd8e 	bl	800ba20 <__assert_func>
 8009f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f08:	6006      	str	r6, [r0, #0]
 8009f0a:	60c6      	str	r6, [r0, #12]
 8009f0c:	69e6      	ldr	r6, [r4, #28]
 8009f0e:	68f3      	ldr	r3, [r6, #12]
 8009f10:	b183      	cbz	r3, 8009f34 <_Balloc+0x50>
 8009f12:	69e3      	ldr	r3, [r4, #28]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f1a:	b9b8      	cbnz	r0, 8009f4c <_Balloc+0x68>
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8009f22:	1d72      	adds	r2, r6, #5
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	4620      	mov	r0, r4
 8009f28:	f001 fd98 	bl	800ba5c <_calloc_r>
 8009f2c:	b160      	cbz	r0, 8009f48 <_Balloc+0x64>
 8009f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f32:	e00e      	b.n	8009f52 <_Balloc+0x6e>
 8009f34:	2221      	movs	r2, #33	; 0x21
 8009f36:	2104      	movs	r1, #4
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 fd8f 	bl	800ba5c <_calloc_r>
 8009f3e:	69e3      	ldr	r3, [r4, #28]
 8009f40:	60f0      	str	r0, [r6, #12]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e4      	bne.n	8009f12 <_Balloc+0x2e>
 8009f48:	2000      	movs	r0, #0
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	6802      	ldr	r2, [r0, #0]
 8009f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f52:	2300      	movs	r3, #0
 8009f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f58:	e7f7      	b.n	8009f4a <_Balloc+0x66>
 8009f5a:	bf00      	nop
 8009f5c:	0800c832 	.word	0x0800c832
 8009f60:	0800c8b2 	.word	0x0800c8b2

08009f64 <_Bfree>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	69c6      	ldr	r6, [r0, #28]
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b976      	cbnz	r6, 8009f8c <_Bfree+0x28>
 8009f6e:	2010      	movs	r0, #16
 8009f70:	f7ff ff04 	bl	8009d7c <malloc>
 8009f74:	4602      	mov	r2, r0
 8009f76:	61e8      	str	r0, [r5, #28]
 8009f78:	b920      	cbnz	r0, 8009f84 <_Bfree+0x20>
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <_Bfree+0x3c>)
 8009f7c:	4809      	ldr	r0, [pc, #36]	; (8009fa4 <_Bfree+0x40>)
 8009f7e:	218f      	movs	r1, #143	; 0x8f
 8009f80:	f001 fd4e 	bl	800ba20 <__assert_func>
 8009f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f88:	6006      	str	r6, [r0, #0]
 8009f8a:	60c6      	str	r6, [r0, #12]
 8009f8c:	b13c      	cbz	r4, 8009f9e <_Bfree+0x3a>
 8009f8e:	69eb      	ldr	r3, [r5, #28]
 8009f90:	6862      	ldr	r2, [r4, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f98:	6021      	str	r1, [r4, #0]
 8009f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	0800c832 	.word	0x0800c832
 8009fa4:	0800c8b2 	.word	0x0800c8b2

08009fa8 <__multadd>:
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	690d      	ldr	r5, [r1, #16]
 8009fae:	4607      	mov	r7, r0
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	461e      	mov	r6, r3
 8009fb4:	f101 0c14 	add.w	ip, r1, #20
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f8dc 3000 	ldr.w	r3, [ip]
 8009fbe:	b299      	uxth	r1, r3
 8009fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8009fc4:	0c1e      	lsrs	r6, r3, #16
 8009fc6:	0c0b      	lsrs	r3, r1, #16
 8009fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8009fcc:	b289      	uxth	r1, r1
 8009fce:	3001      	adds	r0, #1
 8009fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fd4:	4285      	cmp	r5, r0
 8009fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8009fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fde:	dcec      	bgt.n	8009fba <__multadd+0x12>
 8009fe0:	b30e      	cbz	r6, 800a026 <__multadd+0x7e>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	dc19      	bgt.n	800a01c <__multadd+0x74>
 8009fe8:	6861      	ldr	r1, [r4, #4]
 8009fea:	4638      	mov	r0, r7
 8009fec:	3101      	adds	r1, #1
 8009fee:	f7ff ff79 	bl	8009ee4 <_Balloc>
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	b928      	cbnz	r0, 800a002 <__multadd+0x5a>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <__multadd+0x84>)
 8009ffa:	480d      	ldr	r0, [pc, #52]	; (800a030 <__multadd+0x88>)
 8009ffc:	21ba      	movs	r1, #186	; 0xba
 8009ffe:	f001 fd0f 	bl	800ba20 <__assert_func>
 800a002:	6922      	ldr	r2, [r4, #16]
 800a004:	3202      	adds	r2, #2
 800a006:	f104 010c 	add.w	r1, r4, #12
 800a00a:	0092      	lsls	r2, r2, #2
 800a00c:	300c      	adds	r0, #12
 800a00e:	f001 fcef 	bl	800b9f0 <memcpy>
 800a012:	4621      	mov	r1, r4
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff ffa5 	bl	8009f64 <_Bfree>
 800a01a:	4644      	mov	r4, r8
 800a01c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a020:	3501      	adds	r5, #1
 800a022:	615e      	str	r6, [r3, #20]
 800a024:	6125      	str	r5, [r4, #16]
 800a026:	4620      	mov	r0, r4
 800a028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02c:	0800c8a1 	.word	0x0800c8a1
 800a030:	0800c8b2 	.word	0x0800c8b2

0800a034 <__s2b>:
 800a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a038:	460c      	mov	r4, r1
 800a03a:	4615      	mov	r5, r2
 800a03c:	461f      	mov	r7, r3
 800a03e:	2209      	movs	r2, #9
 800a040:	3308      	adds	r3, #8
 800a042:	4606      	mov	r6, r0
 800a044:	fb93 f3f2 	sdiv	r3, r3, r2
 800a048:	2100      	movs	r1, #0
 800a04a:	2201      	movs	r2, #1
 800a04c:	429a      	cmp	r2, r3
 800a04e:	db09      	blt.n	800a064 <__s2b+0x30>
 800a050:	4630      	mov	r0, r6
 800a052:	f7ff ff47 	bl	8009ee4 <_Balloc>
 800a056:	b940      	cbnz	r0, 800a06a <__s2b+0x36>
 800a058:	4602      	mov	r2, r0
 800a05a:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <__s2b+0x8c>)
 800a05c:	4819      	ldr	r0, [pc, #100]	; (800a0c4 <__s2b+0x90>)
 800a05e:	21d3      	movs	r1, #211	; 0xd3
 800a060:	f001 fcde 	bl	800ba20 <__assert_func>
 800a064:	0052      	lsls	r2, r2, #1
 800a066:	3101      	adds	r1, #1
 800a068:	e7f0      	b.n	800a04c <__s2b+0x18>
 800a06a:	9b08      	ldr	r3, [sp, #32]
 800a06c:	6143      	str	r3, [r0, #20]
 800a06e:	2d09      	cmp	r5, #9
 800a070:	f04f 0301 	mov.w	r3, #1
 800a074:	6103      	str	r3, [r0, #16]
 800a076:	dd16      	ble.n	800a0a6 <__s2b+0x72>
 800a078:	f104 0909 	add.w	r9, r4, #9
 800a07c:	46c8      	mov	r8, r9
 800a07e:	442c      	add	r4, r5
 800a080:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a084:	4601      	mov	r1, r0
 800a086:	3b30      	subs	r3, #48	; 0x30
 800a088:	220a      	movs	r2, #10
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ff8c 	bl	8009fa8 <__multadd>
 800a090:	45a0      	cmp	r8, r4
 800a092:	d1f5      	bne.n	800a080 <__s2b+0x4c>
 800a094:	f1a5 0408 	sub.w	r4, r5, #8
 800a098:	444c      	add	r4, r9
 800a09a:	1b2d      	subs	r5, r5, r4
 800a09c:	1963      	adds	r3, r4, r5
 800a09e:	42bb      	cmp	r3, r7
 800a0a0:	db04      	blt.n	800a0ac <__s2b+0x78>
 800a0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	340a      	adds	r4, #10
 800a0a8:	2509      	movs	r5, #9
 800a0aa:	e7f6      	b.n	800a09a <__s2b+0x66>
 800a0ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	3b30      	subs	r3, #48	; 0x30
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7ff ff76 	bl	8009fa8 <__multadd>
 800a0bc:	e7ee      	b.n	800a09c <__s2b+0x68>
 800a0be:	bf00      	nop
 800a0c0:	0800c8a1 	.word	0x0800c8a1
 800a0c4:	0800c8b2 	.word	0x0800c8b2

0800a0c8 <__hi0bits>:
 800a0c8:	0c03      	lsrs	r3, r0, #16
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	b9d3      	cbnz	r3, 800a104 <__hi0bits+0x3c>
 800a0ce:	0400      	lsls	r0, r0, #16
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0d6:	bf04      	itt	eq
 800a0d8:	0200      	lsleq	r0, r0, #8
 800a0da:	3308      	addeq	r3, #8
 800a0dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0e0:	bf04      	itt	eq
 800a0e2:	0100      	lsleq	r0, r0, #4
 800a0e4:	3304      	addeq	r3, #4
 800a0e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0ea:	bf04      	itt	eq
 800a0ec:	0080      	lsleq	r0, r0, #2
 800a0ee:	3302      	addeq	r3, #2
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	db05      	blt.n	800a100 <__hi0bits+0x38>
 800a0f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0f8:	f103 0301 	add.w	r3, r3, #1
 800a0fc:	bf08      	it	eq
 800a0fe:	2320      	moveq	r3, #32
 800a100:	4618      	mov	r0, r3
 800a102:	4770      	bx	lr
 800a104:	2300      	movs	r3, #0
 800a106:	e7e4      	b.n	800a0d2 <__hi0bits+0xa>

0800a108 <__lo0bits>:
 800a108:	6803      	ldr	r3, [r0, #0]
 800a10a:	f013 0207 	ands.w	r2, r3, #7
 800a10e:	d00c      	beq.n	800a12a <__lo0bits+0x22>
 800a110:	07d9      	lsls	r1, r3, #31
 800a112:	d422      	bmi.n	800a15a <__lo0bits+0x52>
 800a114:	079a      	lsls	r2, r3, #30
 800a116:	bf49      	itett	mi
 800a118:	085b      	lsrmi	r3, r3, #1
 800a11a:	089b      	lsrpl	r3, r3, #2
 800a11c:	6003      	strmi	r3, [r0, #0]
 800a11e:	2201      	movmi	r2, #1
 800a120:	bf5c      	itt	pl
 800a122:	6003      	strpl	r3, [r0, #0]
 800a124:	2202      	movpl	r2, #2
 800a126:	4610      	mov	r0, r2
 800a128:	4770      	bx	lr
 800a12a:	b299      	uxth	r1, r3
 800a12c:	b909      	cbnz	r1, 800a132 <__lo0bits+0x2a>
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	2210      	movs	r2, #16
 800a132:	b2d9      	uxtb	r1, r3
 800a134:	b909      	cbnz	r1, 800a13a <__lo0bits+0x32>
 800a136:	3208      	adds	r2, #8
 800a138:	0a1b      	lsrs	r3, r3, #8
 800a13a:	0719      	lsls	r1, r3, #28
 800a13c:	bf04      	itt	eq
 800a13e:	091b      	lsreq	r3, r3, #4
 800a140:	3204      	addeq	r2, #4
 800a142:	0799      	lsls	r1, r3, #30
 800a144:	bf04      	itt	eq
 800a146:	089b      	lsreq	r3, r3, #2
 800a148:	3202      	addeq	r2, #2
 800a14a:	07d9      	lsls	r1, r3, #31
 800a14c:	d403      	bmi.n	800a156 <__lo0bits+0x4e>
 800a14e:	085b      	lsrs	r3, r3, #1
 800a150:	f102 0201 	add.w	r2, r2, #1
 800a154:	d003      	beq.n	800a15e <__lo0bits+0x56>
 800a156:	6003      	str	r3, [r0, #0]
 800a158:	e7e5      	b.n	800a126 <__lo0bits+0x1e>
 800a15a:	2200      	movs	r2, #0
 800a15c:	e7e3      	b.n	800a126 <__lo0bits+0x1e>
 800a15e:	2220      	movs	r2, #32
 800a160:	e7e1      	b.n	800a126 <__lo0bits+0x1e>
	...

0800a164 <__i2b>:
 800a164:	b510      	push	{r4, lr}
 800a166:	460c      	mov	r4, r1
 800a168:	2101      	movs	r1, #1
 800a16a:	f7ff febb 	bl	8009ee4 <_Balloc>
 800a16e:	4602      	mov	r2, r0
 800a170:	b928      	cbnz	r0, 800a17e <__i2b+0x1a>
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <__i2b+0x24>)
 800a174:	4805      	ldr	r0, [pc, #20]	; (800a18c <__i2b+0x28>)
 800a176:	f240 1145 	movw	r1, #325	; 0x145
 800a17a:	f001 fc51 	bl	800ba20 <__assert_func>
 800a17e:	2301      	movs	r3, #1
 800a180:	6144      	str	r4, [r0, #20]
 800a182:	6103      	str	r3, [r0, #16]
 800a184:	bd10      	pop	{r4, pc}
 800a186:	bf00      	nop
 800a188:	0800c8a1 	.word	0x0800c8a1
 800a18c:	0800c8b2 	.word	0x0800c8b2

0800a190 <__multiply>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	4691      	mov	r9, r2
 800a196:	690a      	ldr	r2, [r1, #16]
 800a198:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	bfb8      	it	lt
 800a1a0:	460b      	movlt	r3, r1
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	bfbc      	itt	lt
 800a1a6:	464c      	movlt	r4, r9
 800a1a8:	4699      	movlt	r9, r3
 800a1aa:	6927      	ldr	r7, [r4, #16]
 800a1ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1b0:	68a3      	ldr	r3, [r4, #8]
 800a1b2:	6861      	ldr	r1, [r4, #4]
 800a1b4:	eb07 060a 	add.w	r6, r7, sl
 800a1b8:	42b3      	cmp	r3, r6
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	bfb8      	it	lt
 800a1be:	3101      	addlt	r1, #1
 800a1c0:	f7ff fe90 	bl	8009ee4 <_Balloc>
 800a1c4:	b930      	cbnz	r0, 800a1d4 <__multiply+0x44>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b44      	ldr	r3, [pc, #272]	; (800a2dc <__multiply+0x14c>)
 800a1ca:	4845      	ldr	r0, [pc, #276]	; (800a2e0 <__multiply+0x150>)
 800a1cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a1d0:	f001 fc26 	bl	800ba20 <__assert_func>
 800a1d4:	f100 0514 	add.w	r5, r0, #20
 800a1d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1dc:	462b      	mov	r3, r5
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4543      	cmp	r3, r8
 800a1e2:	d321      	bcc.n	800a228 <__multiply+0x98>
 800a1e4:	f104 0314 	add.w	r3, r4, #20
 800a1e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1ec:	f109 0314 	add.w	r3, r9, #20
 800a1f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1f4:	9202      	str	r2, [sp, #8]
 800a1f6:	1b3a      	subs	r2, r7, r4
 800a1f8:	3a15      	subs	r2, #21
 800a1fa:	f022 0203 	bic.w	r2, r2, #3
 800a1fe:	3204      	adds	r2, #4
 800a200:	f104 0115 	add.w	r1, r4, #21
 800a204:	428f      	cmp	r7, r1
 800a206:	bf38      	it	cc
 800a208:	2204      	movcc	r2, #4
 800a20a:	9201      	str	r2, [sp, #4]
 800a20c:	9a02      	ldr	r2, [sp, #8]
 800a20e:	9303      	str	r3, [sp, #12]
 800a210:	429a      	cmp	r2, r3
 800a212:	d80c      	bhi.n	800a22e <__multiply+0x9e>
 800a214:	2e00      	cmp	r6, #0
 800a216:	dd03      	ble.n	800a220 <__multiply+0x90>
 800a218:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d05b      	beq.n	800a2d8 <__multiply+0x148>
 800a220:	6106      	str	r6, [r0, #16]
 800a222:	b005      	add	sp, #20
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a228:	f843 2b04 	str.w	r2, [r3], #4
 800a22c:	e7d8      	b.n	800a1e0 <__multiply+0x50>
 800a22e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a232:	f1ba 0f00 	cmp.w	sl, #0
 800a236:	d024      	beq.n	800a282 <__multiply+0xf2>
 800a238:	f104 0e14 	add.w	lr, r4, #20
 800a23c:	46a9      	mov	r9, r5
 800a23e:	f04f 0c00 	mov.w	ip, #0
 800a242:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a246:	f8d9 1000 	ldr.w	r1, [r9]
 800a24a:	fa1f fb82 	uxth.w	fp, r2
 800a24e:	b289      	uxth	r1, r1
 800a250:	fb0a 110b 	mla	r1, sl, fp, r1
 800a254:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a258:	f8d9 2000 	ldr.w	r2, [r9]
 800a25c:	4461      	add	r1, ip
 800a25e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a262:	fb0a c20b 	mla	r2, sl, fp, ip
 800a266:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a26a:	b289      	uxth	r1, r1
 800a26c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a270:	4577      	cmp	r7, lr
 800a272:	f849 1b04 	str.w	r1, [r9], #4
 800a276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a27a:	d8e2      	bhi.n	800a242 <__multiply+0xb2>
 800a27c:	9a01      	ldr	r2, [sp, #4]
 800a27e:	f845 c002 	str.w	ip, [r5, r2]
 800a282:	9a03      	ldr	r2, [sp, #12]
 800a284:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a288:	3304      	adds	r3, #4
 800a28a:	f1b9 0f00 	cmp.w	r9, #0
 800a28e:	d021      	beq.n	800a2d4 <__multiply+0x144>
 800a290:	6829      	ldr	r1, [r5, #0]
 800a292:	f104 0c14 	add.w	ip, r4, #20
 800a296:	46ae      	mov	lr, r5
 800a298:	f04f 0a00 	mov.w	sl, #0
 800a29c:	f8bc b000 	ldrh.w	fp, [ip]
 800a2a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a2a8:	4452      	add	r2, sl
 800a2aa:	b289      	uxth	r1, r1
 800a2ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a2b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a2b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a2c0:	fb09 110a 	mla	r1, r9, sl, r1
 800a2c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a2c8:	4567      	cmp	r7, ip
 800a2ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2ce:	d8e5      	bhi.n	800a29c <__multiply+0x10c>
 800a2d0:	9a01      	ldr	r2, [sp, #4]
 800a2d2:	50a9      	str	r1, [r5, r2]
 800a2d4:	3504      	adds	r5, #4
 800a2d6:	e799      	b.n	800a20c <__multiply+0x7c>
 800a2d8:	3e01      	subs	r6, #1
 800a2da:	e79b      	b.n	800a214 <__multiply+0x84>
 800a2dc:	0800c8a1 	.word	0x0800c8a1
 800a2e0:	0800c8b2 	.word	0x0800c8b2

0800a2e4 <__pow5mult>:
 800a2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e8:	4615      	mov	r5, r2
 800a2ea:	f012 0203 	ands.w	r2, r2, #3
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	d007      	beq.n	800a304 <__pow5mult+0x20>
 800a2f4:	4c25      	ldr	r4, [pc, #148]	; (800a38c <__pow5mult+0xa8>)
 800a2f6:	3a01      	subs	r2, #1
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2fe:	f7ff fe53 	bl	8009fa8 <__multadd>
 800a302:	4607      	mov	r7, r0
 800a304:	10ad      	asrs	r5, r5, #2
 800a306:	d03d      	beq.n	800a384 <__pow5mult+0xa0>
 800a308:	69f4      	ldr	r4, [r6, #28]
 800a30a:	b97c      	cbnz	r4, 800a32c <__pow5mult+0x48>
 800a30c:	2010      	movs	r0, #16
 800a30e:	f7ff fd35 	bl	8009d7c <malloc>
 800a312:	4602      	mov	r2, r0
 800a314:	61f0      	str	r0, [r6, #28]
 800a316:	b928      	cbnz	r0, 800a324 <__pow5mult+0x40>
 800a318:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <__pow5mult+0xac>)
 800a31a:	481e      	ldr	r0, [pc, #120]	; (800a394 <__pow5mult+0xb0>)
 800a31c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a320:	f001 fb7e 	bl	800ba20 <__assert_func>
 800a324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a328:	6004      	str	r4, [r0, #0]
 800a32a:	60c4      	str	r4, [r0, #12]
 800a32c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a334:	b94c      	cbnz	r4, 800a34a <__pow5mult+0x66>
 800a336:	f240 2171 	movw	r1, #625	; 0x271
 800a33a:	4630      	mov	r0, r6
 800a33c:	f7ff ff12 	bl	800a164 <__i2b>
 800a340:	2300      	movs	r3, #0
 800a342:	f8c8 0008 	str.w	r0, [r8, #8]
 800a346:	4604      	mov	r4, r0
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	f04f 0900 	mov.w	r9, #0
 800a34e:	07eb      	lsls	r3, r5, #31
 800a350:	d50a      	bpl.n	800a368 <__pow5mult+0x84>
 800a352:	4639      	mov	r1, r7
 800a354:	4622      	mov	r2, r4
 800a356:	4630      	mov	r0, r6
 800a358:	f7ff ff1a 	bl	800a190 <__multiply>
 800a35c:	4639      	mov	r1, r7
 800a35e:	4680      	mov	r8, r0
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff fdff 	bl	8009f64 <_Bfree>
 800a366:	4647      	mov	r7, r8
 800a368:	106d      	asrs	r5, r5, #1
 800a36a:	d00b      	beq.n	800a384 <__pow5mult+0xa0>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	b938      	cbnz	r0, 800a380 <__pow5mult+0x9c>
 800a370:	4622      	mov	r2, r4
 800a372:	4621      	mov	r1, r4
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff ff0b 	bl	800a190 <__multiply>
 800a37a:	6020      	str	r0, [r4, #0]
 800a37c:	f8c0 9000 	str.w	r9, [r0]
 800a380:	4604      	mov	r4, r0
 800a382:	e7e4      	b.n	800a34e <__pow5mult+0x6a>
 800a384:	4638      	mov	r0, r7
 800a386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38a:	bf00      	nop
 800a38c:	0800ca00 	.word	0x0800ca00
 800a390:	0800c832 	.word	0x0800c832
 800a394:	0800c8b2 	.word	0x0800c8b2

0800a398 <__lshift>:
 800a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	460c      	mov	r4, r1
 800a39e:	6849      	ldr	r1, [r1, #4]
 800a3a0:	6923      	ldr	r3, [r4, #16]
 800a3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3b0:	f108 0601 	add.w	r6, r8, #1
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	db0b      	blt.n	800a3d0 <__lshift+0x38>
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff fd93 	bl	8009ee4 <_Balloc>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b948      	cbnz	r0, 800a3d6 <__lshift+0x3e>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b28      	ldr	r3, [pc, #160]	; (800a468 <__lshift+0xd0>)
 800a3c6:	4829      	ldr	r0, [pc, #164]	; (800a46c <__lshift+0xd4>)
 800a3c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a3cc:	f001 fb28 	bl	800ba20 <__assert_func>
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	e7ee      	b.n	800a3b4 <__lshift+0x1c>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f100 0114 	add.w	r1, r0, #20
 800a3dc:	f100 0210 	add.w	r2, r0, #16
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	4553      	cmp	r3, sl
 800a3e4:	db33      	blt.n	800a44e <__lshift+0xb6>
 800a3e6:	6920      	ldr	r0, [r4, #16]
 800a3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3ec:	f104 0314 	add.w	r3, r4, #20
 800a3f0:	f019 091f 	ands.w	r9, r9, #31
 800a3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3fc:	d02b      	beq.n	800a456 <__lshift+0xbe>
 800a3fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a402:	468a      	mov	sl, r1
 800a404:	2200      	movs	r2, #0
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	fa00 f009 	lsl.w	r0, r0, r9
 800a40c:	4310      	orrs	r0, r2
 800a40e:	f84a 0b04 	str.w	r0, [sl], #4
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	459c      	cmp	ip, r3
 800a418:	fa22 f20e 	lsr.w	r2, r2, lr
 800a41c:	d8f3      	bhi.n	800a406 <__lshift+0x6e>
 800a41e:	ebac 0304 	sub.w	r3, ip, r4
 800a422:	3b15      	subs	r3, #21
 800a424:	f023 0303 	bic.w	r3, r3, #3
 800a428:	3304      	adds	r3, #4
 800a42a:	f104 0015 	add.w	r0, r4, #21
 800a42e:	4584      	cmp	ip, r0
 800a430:	bf38      	it	cc
 800a432:	2304      	movcc	r3, #4
 800a434:	50ca      	str	r2, [r1, r3]
 800a436:	b10a      	cbz	r2, 800a43c <__lshift+0xa4>
 800a438:	f108 0602 	add.w	r6, r8, #2
 800a43c:	3e01      	subs	r6, #1
 800a43e:	4638      	mov	r0, r7
 800a440:	612e      	str	r6, [r5, #16]
 800a442:	4621      	mov	r1, r4
 800a444:	f7ff fd8e 	bl	8009f64 <_Bfree>
 800a448:	4628      	mov	r0, r5
 800a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a452:	3301      	adds	r3, #1
 800a454:	e7c5      	b.n	800a3e2 <__lshift+0x4a>
 800a456:	3904      	subs	r1, #4
 800a458:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a460:	459c      	cmp	ip, r3
 800a462:	d8f9      	bhi.n	800a458 <__lshift+0xc0>
 800a464:	e7ea      	b.n	800a43c <__lshift+0xa4>
 800a466:	bf00      	nop
 800a468:	0800c8a1 	.word	0x0800c8a1
 800a46c:	0800c8b2 	.word	0x0800c8b2

0800a470 <__mcmp>:
 800a470:	b530      	push	{r4, r5, lr}
 800a472:	6902      	ldr	r2, [r0, #16]
 800a474:	690c      	ldr	r4, [r1, #16]
 800a476:	1b12      	subs	r2, r2, r4
 800a478:	d10e      	bne.n	800a498 <__mcmp+0x28>
 800a47a:	f100 0314 	add.w	r3, r0, #20
 800a47e:	3114      	adds	r1, #20
 800a480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a48c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a490:	42a5      	cmp	r5, r4
 800a492:	d003      	beq.n	800a49c <__mcmp+0x2c>
 800a494:	d305      	bcc.n	800a4a2 <__mcmp+0x32>
 800a496:	2201      	movs	r2, #1
 800a498:	4610      	mov	r0, r2
 800a49a:	bd30      	pop	{r4, r5, pc}
 800a49c:	4283      	cmp	r3, r0
 800a49e:	d3f3      	bcc.n	800a488 <__mcmp+0x18>
 800a4a0:	e7fa      	b.n	800a498 <__mcmp+0x28>
 800a4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a6:	e7f7      	b.n	800a498 <__mcmp+0x28>

0800a4a8 <__mdiff>:
 800a4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4690      	mov	r8, r2
 800a4b6:	f7ff ffdb 	bl	800a470 <__mcmp>
 800a4ba:	1e05      	subs	r5, r0, #0
 800a4bc:	d110      	bne.n	800a4e0 <__mdiff+0x38>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7ff fd0f 	bl	8009ee4 <_Balloc>
 800a4c6:	b930      	cbnz	r0, 800a4d6 <__mdiff+0x2e>
 800a4c8:	4b3a      	ldr	r3, [pc, #232]	; (800a5b4 <__mdiff+0x10c>)
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f240 2137 	movw	r1, #567	; 0x237
 800a4d0:	4839      	ldr	r0, [pc, #228]	; (800a5b8 <__mdiff+0x110>)
 800a4d2:	f001 faa5 	bl	800ba20 <__assert_func>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e0:	bfa4      	itt	ge
 800a4e2:	4643      	movge	r3, r8
 800a4e4:	46a0      	movge	r8, r4
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4ec:	bfa6      	itte	ge
 800a4ee:	461c      	movge	r4, r3
 800a4f0:	2500      	movge	r5, #0
 800a4f2:	2501      	movlt	r5, #1
 800a4f4:	f7ff fcf6 	bl	8009ee4 <_Balloc>
 800a4f8:	b920      	cbnz	r0, 800a504 <__mdiff+0x5c>
 800a4fa:	4b2e      	ldr	r3, [pc, #184]	; (800a5b4 <__mdiff+0x10c>)
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f240 2145 	movw	r1, #581	; 0x245
 800a502:	e7e5      	b.n	800a4d0 <__mdiff+0x28>
 800a504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a508:	6926      	ldr	r6, [r4, #16]
 800a50a:	60c5      	str	r5, [r0, #12]
 800a50c:	f104 0914 	add.w	r9, r4, #20
 800a510:	f108 0514 	add.w	r5, r8, #20
 800a514:	f100 0e14 	add.w	lr, r0, #20
 800a518:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a51c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a520:	f108 0210 	add.w	r2, r8, #16
 800a524:	46f2      	mov	sl, lr
 800a526:	2100      	movs	r1, #0
 800a528:	f859 3b04 	ldr.w	r3, [r9], #4
 800a52c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a530:	fa11 f88b 	uxtah	r8, r1, fp
 800a534:	b299      	uxth	r1, r3
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	eba8 0801 	sub.w	r8, r8, r1
 800a53c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a540:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a544:	fa1f f888 	uxth.w	r8, r8
 800a548:	1419      	asrs	r1, r3, #16
 800a54a:	454e      	cmp	r6, r9
 800a54c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a550:	f84a 3b04 	str.w	r3, [sl], #4
 800a554:	d8e8      	bhi.n	800a528 <__mdiff+0x80>
 800a556:	1b33      	subs	r3, r6, r4
 800a558:	3b15      	subs	r3, #21
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	3304      	adds	r3, #4
 800a560:	3415      	adds	r4, #21
 800a562:	42a6      	cmp	r6, r4
 800a564:	bf38      	it	cc
 800a566:	2304      	movcc	r3, #4
 800a568:	441d      	add	r5, r3
 800a56a:	4473      	add	r3, lr
 800a56c:	469e      	mov	lr, r3
 800a56e:	462e      	mov	r6, r5
 800a570:	4566      	cmp	r6, ip
 800a572:	d30e      	bcc.n	800a592 <__mdiff+0xea>
 800a574:	f10c 0203 	add.w	r2, ip, #3
 800a578:	1b52      	subs	r2, r2, r5
 800a57a:	f022 0203 	bic.w	r2, r2, #3
 800a57e:	3d03      	subs	r5, #3
 800a580:	45ac      	cmp	ip, r5
 800a582:	bf38      	it	cc
 800a584:	2200      	movcc	r2, #0
 800a586:	4413      	add	r3, r2
 800a588:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a58c:	b17a      	cbz	r2, 800a5ae <__mdiff+0x106>
 800a58e:	6107      	str	r7, [r0, #16]
 800a590:	e7a4      	b.n	800a4dc <__mdiff+0x34>
 800a592:	f856 8b04 	ldr.w	r8, [r6], #4
 800a596:	fa11 f288 	uxtah	r2, r1, r8
 800a59a:	1414      	asrs	r4, r2, #16
 800a59c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5a0:	b292      	uxth	r2, r2
 800a5a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5a6:	f84e 2b04 	str.w	r2, [lr], #4
 800a5aa:	1421      	asrs	r1, r4, #16
 800a5ac:	e7e0      	b.n	800a570 <__mdiff+0xc8>
 800a5ae:	3f01      	subs	r7, #1
 800a5b0:	e7ea      	b.n	800a588 <__mdiff+0xe0>
 800a5b2:	bf00      	nop
 800a5b4:	0800c8a1 	.word	0x0800c8a1
 800a5b8:	0800c8b2 	.word	0x0800c8b2

0800a5bc <__ulp>:
 800a5bc:	b082      	sub	sp, #8
 800a5be:	ed8d 0b00 	vstr	d0, [sp]
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <__ulp+0x48>)
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dc08      	bgt.n	800a5e2 <__ulp+0x26>
 800a5d0:	425b      	negs	r3, r3
 800a5d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a5d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a5da:	da04      	bge.n	800a5e6 <__ulp+0x2a>
 800a5dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a5e0:	4113      	asrs	r3, r2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	e008      	b.n	800a5f8 <__ulp+0x3c>
 800a5e6:	f1a2 0314 	sub.w	r3, r2, #20
 800a5ea:	2b1e      	cmp	r3, #30
 800a5ec:	bfda      	itte	le
 800a5ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a5f2:	40da      	lsrle	r2, r3
 800a5f4:	2201      	movgt	r2, #1
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	ec41 0b10 	vmov	d0, r0, r1
 800a600:	b002      	add	sp, #8
 800a602:	4770      	bx	lr
 800a604:	7ff00000 	.word	0x7ff00000

0800a608 <__b2d>:
 800a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	6906      	ldr	r6, [r0, #16]
 800a60e:	f100 0814 	add.w	r8, r0, #20
 800a612:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a616:	1f37      	subs	r7, r6, #4
 800a618:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7ff fd53 	bl	800a0c8 <__hi0bits>
 800a622:	f1c0 0320 	rsb	r3, r0, #32
 800a626:	280a      	cmp	r0, #10
 800a628:	600b      	str	r3, [r1, #0]
 800a62a:	491b      	ldr	r1, [pc, #108]	; (800a698 <__b2d+0x90>)
 800a62c:	dc15      	bgt.n	800a65a <__b2d+0x52>
 800a62e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a632:	fa22 f30c 	lsr.w	r3, r2, ip
 800a636:	45b8      	cmp	r8, r7
 800a638:	ea43 0501 	orr.w	r5, r3, r1
 800a63c:	bf34      	ite	cc
 800a63e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a642:	2300      	movcs	r3, #0
 800a644:	3015      	adds	r0, #21
 800a646:	fa02 f000 	lsl.w	r0, r2, r0
 800a64a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a64e:	4303      	orrs	r3, r0
 800a650:	461c      	mov	r4, r3
 800a652:	ec45 4b10 	vmov	d0, r4, r5
 800a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65a:	45b8      	cmp	r8, r7
 800a65c:	bf3a      	itte	cc
 800a65e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a662:	f1a6 0708 	subcc.w	r7, r6, #8
 800a666:	2300      	movcs	r3, #0
 800a668:	380b      	subs	r0, #11
 800a66a:	d012      	beq.n	800a692 <__b2d+0x8a>
 800a66c:	f1c0 0120 	rsb	r1, r0, #32
 800a670:	fa23 f401 	lsr.w	r4, r3, r1
 800a674:	4082      	lsls	r2, r0
 800a676:	4322      	orrs	r2, r4
 800a678:	4547      	cmp	r7, r8
 800a67a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a67e:	bf8c      	ite	hi
 800a680:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a684:	2200      	movls	r2, #0
 800a686:	4083      	lsls	r3, r0
 800a688:	40ca      	lsrs	r2, r1
 800a68a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a68e:	4313      	orrs	r3, r2
 800a690:	e7de      	b.n	800a650 <__b2d+0x48>
 800a692:	ea42 0501 	orr.w	r5, r2, r1
 800a696:	e7db      	b.n	800a650 <__b2d+0x48>
 800a698:	3ff00000 	.word	0x3ff00000

0800a69c <__d2b>:
 800a69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6a0:	460f      	mov	r7, r1
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	ec59 8b10 	vmov	r8, r9, d0
 800a6a8:	4616      	mov	r6, r2
 800a6aa:	f7ff fc1b 	bl	8009ee4 <_Balloc>
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	b930      	cbnz	r0, 800a6c0 <__d2b+0x24>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	4b24      	ldr	r3, [pc, #144]	; (800a748 <__d2b+0xac>)
 800a6b6:	4825      	ldr	r0, [pc, #148]	; (800a74c <__d2b+0xb0>)
 800a6b8:	f240 310f 	movw	r1, #783	; 0x30f
 800a6bc:	f001 f9b0 	bl	800ba20 <__assert_func>
 800a6c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6c8:	bb2d      	cbnz	r5, 800a716 <__d2b+0x7a>
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	f1b8 0300 	subs.w	r3, r8, #0
 800a6d0:	d026      	beq.n	800a720 <__d2b+0x84>
 800a6d2:	4668      	mov	r0, sp
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	f7ff fd17 	bl	800a108 <__lo0bits>
 800a6da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6de:	b1e8      	cbz	r0, 800a71c <__d2b+0x80>
 800a6e0:	f1c0 0320 	rsb	r3, r0, #32
 800a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	40c2      	lsrs	r2, r0
 800a6ec:	6163      	str	r3, [r4, #20]
 800a6ee:	9201      	str	r2, [sp, #4]
 800a6f0:	9b01      	ldr	r3, [sp, #4]
 800a6f2:	61a3      	str	r3, [r4, #24]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bf14      	ite	ne
 800a6f8:	2202      	movne	r2, #2
 800a6fa:	2201      	moveq	r2, #1
 800a6fc:	6122      	str	r2, [r4, #16]
 800a6fe:	b1bd      	cbz	r5, 800a730 <__d2b+0x94>
 800a700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a704:	4405      	add	r5, r0
 800a706:	603d      	str	r5, [r7, #0]
 800a708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a70c:	6030      	str	r0, [r6, #0]
 800a70e:	4620      	mov	r0, r4
 800a710:	b003      	add	sp, #12
 800a712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a71a:	e7d6      	b.n	800a6ca <__d2b+0x2e>
 800a71c:	6161      	str	r1, [r4, #20]
 800a71e:	e7e7      	b.n	800a6f0 <__d2b+0x54>
 800a720:	a801      	add	r0, sp, #4
 800a722:	f7ff fcf1 	bl	800a108 <__lo0bits>
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	6163      	str	r3, [r4, #20]
 800a72a:	3020      	adds	r0, #32
 800a72c:	2201      	movs	r2, #1
 800a72e:	e7e5      	b.n	800a6fc <__d2b+0x60>
 800a730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a738:	6038      	str	r0, [r7, #0]
 800a73a:	6918      	ldr	r0, [r3, #16]
 800a73c:	f7ff fcc4 	bl	800a0c8 <__hi0bits>
 800a740:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a744:	e7e2      	b.n	800a70c <__d2b+0x70>
 800a746:	bf00      	nop
 800a748:	0800c8a1 	.word	0x0800c8a1
 800a74c:	0800c8b2 	.word	0x0800c8b2

0800a750 <__ratio>:
 800a750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	4688      	mov	r8, r1
 800a756:	4669      	mov	r1, sp
 800a758:	4681      	mov	r9, r0
 800a75a:	f7ff ff55 	bl	800a608 <__b2d>
 800a75e:	a901      	add	r1, sp, #4
 800a760:	4640      	mov	r0, r8
 800a762:	ec55 4b10 	vmov	r4, r5, d0
 800a766:	f7ff ff4f 	bl	800a608 <__b2d>
 800a76a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a76e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a772:	eba3 0c02 	sub.w	ip, r3, r2
 800a776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	2b00      	cmp	r3, #0
 800a786:	bfd6      	itet	le
 800a788:	460a      	movle	r2, r1
 800a78a:	462a      	movgt	r2, r5
 800a78c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a790:	468b      	mov	fp, r1
 800a792:	462f      	mov	r7, r5
 800a794:	bfd4      	ite	le
 800a796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a79a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a79e:	4620      	mov	r0, r4
 800a7a0:	ee10 2a10 	vmov	r2, s0
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f6 f850 	bl	800084c <__aeabi_ddiv>
 800a7ac:	ec41 0b10 	vmov	d0, r0, r1
 800a7b0:	b003      	add	sp, #12
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7b6 <__copybits>:
 800a7b6:	3901      	subs	r1, #1
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	1149      	asrs	r1, r1, #5
 800a7bc:	6914      	ldr	r4, [r2, #16]
 800a7be:	3101      	adds	r1, #1
 800a7c0:	f102 0314 	add.w	r3, r2, #20
 800a7c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7cc:	1f05      	subs	r5, r0, #4
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	d30c      	bcc.n	800a7ec <__copybits+0x36>
 800a7d2:	1aa3      	subs	r3, r4, r2
 800a7d4:	3b11      	subs	r3, #17
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	3211      	adds	r2, #17
 800a7dc:	42a2      	cmp	r2, r4
 800a7de:	bf88      	it	hi
 800a7e0:	2300      	movhi	r3, #0
 800a7e2:	4418      	add	r0, r3
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4288      	cmp	r0, r1
 800a7e8:	d305      	bcc.n	800a7f6 <__copybits+0x40>
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7f0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7f4:	e7eb      	b.n	800a7ce <__copybits+0x18>
 800a7f6:	f840 3b04 	str.w	r3, [r0], #4
 800a7fa:	e7f4      	b.n	800a7e6 <__copybits+0x30>

0800a7fc <__any_on>:
 800a7fc:	f100 0214 	add.w	r2, r0, #20
 800a800:	6900      	ldr	r0, [r0, #16]
 800a802:	114b      	asrs	r3, r1, #5
 800a804:	4298      	cmp	r0, r3
 800a806:	b510      	push	{r4, lr}
 800a808:	db11      	blt.n	800a82e <__any_on+0x32>
 800a80a:	dd0a      	ble.n	800a822 <__any_on+0x26>
 800a80c:	f011 011f 	ands.w	r1, r1, #31
 800a810:	d007      	beq.n	800a822 <__any_on+0x26>
 800a812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a816:	fa24 f001 	lsr.w	r0, r4, r1
 800a81a:	fa00 f101 	lsl.w	r1, r0, r1
 800a81e:	428c      	cmp	r4, r1
 800a820:	d10b      	bne.n	800a83a <__any_on+0x3e>
 800a822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a826:	4293      	cmp	r3, r2
 800a828:	d803      	bhi.n	800a832 <__any_on+0x36>
 800a82a:	2000      	movs	r0, #0
 800a82c:	bd10      	pop	{r4, pc}
 800a82e:	4603      	mov	r3, r0
 800a830:	e7f7      	b.n	800a822 <__any_on+0x26>
 800a832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a836:	2900      	cmp	r1, #0
 800a838:	d0f5      	beq.n	800a826 <__any_on+0x2a>
 800a83a:	2001      	movs	r0, #1
 800a83c:	e7f6      	b.n	800a82c <__any_on+0x30>

0800a83e <sulp>:
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	460d      	mov	r5, r1
 800a844:	ec45 4b10 	vmov	d0, r4, r5
 800a848:	4616      	mov	r6, r2
 800a84a:	f7ff feb7 	bl	800a5bc <__ulp>
 800a84e:	ec51 0b10 	vmov	r0, r1, d0
 800a852:	b17e      	cbz	r6, 800a874 <sulp+0x36>
 800a854:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a858:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dd09      	ble.n	800a874 <sulp+0x36>
 800a860:	051b      	lsls	r3, r3, #20
 800a862:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a866:	2400      	movs	r4, #0
 800a868:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a86c:	4622      	mov	r2, r4
 800a86e:	462b      	mov	r3, r5
 800a870:	f7f5 fec2 	bl	80005f8 <__aeabi_dmul>
 800a874:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a878 <_strtod_l>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	ed2d 8b02 	vpush	{d8}
 800a880:	b09b      	sub	sp, #108	; 0x6c
 800a882:	4604      	mov	r4, r0
 800a884:	9213      	str	r2, [sp, #76]	; 0x4c
 800a886:	2200      	movs	r2, #0
 800a888:	9216      	str	r2, [sp, #88]	; 0x58
 800a88a:	460d      	mov	r5, r1
 800a88c:	f04f 0800 	mov.w	r8, #0
 800a890:	f04f 0900 	mov.w	r9, #0
 800a894:	460a      	mov	r2, r1
 800a896:	9215      	str	r2, [sp, #84]	; 0x54
 800a898:	7811      	ldrb	r1, [r2, #0]
 800a89a:	292b      	cmp	r1, #43	; 0x2b
 800a89c:	d04c      	beq.n	800a938 <_strtod_l+0xc0>
 800a89e:	d83a      	bhi.n	800a916 <_strtod_l+0x9e>
 800a8a0:	290d      	cmp	r1, #13
 800a8a2:	d834      	bhi.n	800a90e <_strtod_l+0x96>
 800a8a4:	2908      	cmp	r1, #8
 800a8a6:	d834      	bhi.n	800a912 <_strtod_l+0x9a>
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	d03d      	beq.n	800a928 <_strtod_l+0xb0>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	920a      	str	r2, [sp, #40]	; 0x28
 800a8b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a8b2:	7832      	ldrb	r2, [r6, #0]
 800a8b4:	2a30      	cmp	r2, #48	; 0x30
 800a8b6:	f040 80b4 	bne.w	800aa22 <_strtod_l+0x1aa>
 800a8ba:	7872      	ldrb	r2, [r6, #1]
 800a8bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a8c0:	2a58      	cmp	r2, #88	; 0x58
 800a8c2:	d170      	bne.n	800a9a6 <_strtod_l+0x12e>
 800a8c4:	9302      	str	r3, [sp, #8]
 800a8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	ab16      	add	r3, sp, #88	; 0x58
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	4a8e      	ldr	r2, [pc, #568]	; (800ab08 <_strtod_l+0x290>)
 800a8d0:	ab17      	add	r3, sp, #92	; 0x5c
 800a8d2:	a915      	add	r1, sp, #84	; 0x54
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f001 f93f 	bl	800bb58 <__gethex>
 800a8da:	f010 070f 	ands.w	r7, r0, #15
 800a8de:	4605      	mov	r5, r0
 800a8e0:	d005      	beq.n	800a8ee <_strtod_l+0x76>
 800a8e2:	2f06      	cmp	r7, #6
 800a8e4:	d12a      	bne.n	800a93c <_strtod_l+0xc4>
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9615      	str	r6, [sp, #84]	; 0x54
 800a8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 857f 	bne.w	800b3f4 <_strtod_l+0xb7c>
 800a8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f8:	b1db      	cbz	r3, 800a932 <_strtod_l+0xba>
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a900:	ec43 2b10 	vmov	d0, r2, r3
 800a904:	b01b      	add	sp, #108	; 0x6c
 800a906:	ecbd 8b02 	vpop	{d8}
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	2920      	cmp	r1, #32
 800a910:	d1cc      	bne.n	800a8ac <_strtod_l+0x34>
 800a912:	3201      	adds	r2, #1
 800a914:	e7bf      	b.n	800a896 <_strtod_l+0x1e>
 800a916:	292d      	cmp	r1, #45	; 0x2d
 800a918:	d1c8      	bne.n	800a8ac <_strtod_l+0x34>
 800a91a:	2101      	movs	r1, #1
 800a91c:	910a      	str	r1, [sp, #40]	; 0x28
 800a91e:	1c51      	adds	r1, r2, #1
 800a920:	9115      	str	r1, [sp, #84]	; 0x54
 800a922:	7852      	ldrb	r2, [r2, #1]
 800a924:	2a00      	cmp	r2, #0
 800a926:	d1c3      	bne.n	800a8b0 <_strtod_l+0x38>
 800a928:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a92a:	9515      	str	r5, [sp, #84]	; 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 855f 	bne.w	800b3f0 <_strtod_l+0xb78>
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	e7e3      	b.n	800a900 <_strtod_l+0x88>
 800a938:	2100      	movs	r1, #0
 800a93a:	e7ef      	b.n	800a91c <_strtod_l+0xa4>
 800a93c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a93e:	b13a      	cbz	r2, 800a950 <_strtod_l+0xd8>
 800a940:	2135      	movs	r1, #53	; 0x35
 800a942:	a818      	add	r0, sp, #96	; 0x60
 800a944:	f7ff ff37 	bl	800a7b6 <__copybits>
 800a948:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7ff fb0a 	bl	8009f64 <_Bfree>
 800a950:	3f01      	subs	r7, #1
 800a952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a954:	2f04      	cmp	r7, #4
 800a956:	d806      	bhi.n	800a966 <_strtod_l+0xee>
 800a958:	e8df f007 	tbb	[pc, r7]
 800a95c:	201d0314 	.word	0x201d0314
 800a960:	14          	.byte	0x14
 800a961:	00          	.byte	0x00
 800a962:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a966:	05e9      	lsls	r1, r5, #23
 800a968:	bf48      	it	mi
 800a96a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a96e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a972:	0d1b      	lsrs	r3, r3, #20
 800a974:	051b      	lsls	r3, r3, #20
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1b9      	bne.n	800a8ee <_strtod_l+0x76>
 800a97a:	f7fe fb05 	bl	8008f88 <__errno>
 800a97e:	2322      	movs	r3, #34	; 0x22
 800a980:	6003      	str	r3, [r0, #0]
 800a982:	e7b4      	b.n	800a8ee <_strtod_l+0x76>
 800a984:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a988:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a98c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a990:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a994:	e7e7      	b.n	800a966 <_strtod_l+0xee>
 800a996:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ab10 <_strtod_l+0x298>
 800a99a:	e7e4      	b.n	800a966 <_strtod_l+0xee>
 800a99c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a9a0:	f04f 38ff 	mov.w	r8, #4294967295
 800a9a4:	e7df      	b.n	800a966 <_strtod_l+0xee>
 800a9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	9215      	str	r2, [sp, #84]	; 0x54
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	2b30      	cmp	r3, #48	; 0x30
 800a9b0:	d0f9      	beq.n	800a9a6 <_strtod_l+0x12e>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d09b      	beq.n	800a8ee <_strtod_l+0x76>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f04f 0a00 	mov.w	sl, #0
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a9c6:	46d3      	mov	fp, sl
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a9cc:	7806      	ldrb	r6, [r0, #0]
 800a9ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a9d2:	b2d9      	uxtb	r1, r3
 800a9d4:	2909      	cmp	r1, #9
 800a9d6:	d926      	bls.n	800aa26 <_strtod_l+0x1ae>
 800a9d8:	494c      	ldr	r1, [pc, #304]	; (800ab0c <_strtod_l+0x294>)
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f000 ffe6 	bl	800b9ac <strncmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d030      	beq.n	800aa46 <_strtod_l+0x1ce>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	9005      	str	r0, [sp, #20]
 800a9ea:	465e      	mov	r6, fp
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2a65      	cmp	r2, #101	; 0x65
 800a9f0:	d001      	beq.n	800a9f6 <_strtod_l+0x17e>
 800a9f2:	2a45      	cmp	r2, #69	; 0x45
 800a9f4:	d113      	bne.n	800aa1e <_strtod_l+0x1a6>
 800a9f6:	b91e      	cbnz	r6, 800aa00 <_strtod_l+0x188>
 800a9f8:	9a04      	ldr	r2, [sp, #16]
 800a9fa:	4302      	orrs	r2, r0
 800a9fc:	d094      	beq.n	800a928 <_strtod_l+0xb0>
 800a9fe:	2600      	movs	r6, #0
 800aa00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800aa02:	1c6a      	adds	r2, r5, #1
 800aa04:	9215      	str	r2, [sp, #84]	; 0x54
 800aa06:	786a      	ldrb	r2, [r5, #1]
 800aa08:	2a2b      	cmp	r2, #43	; 0x2b
 800aa0a:	d074      	beq.n	800aaf6 <_strtod_l+0x27e>
 800aa0c:	2a2d      	cmp	r2, #45	; 0x2d
 800aa0e:	d078      	beq.n	800ab02 <_strtod_l+0x28a>
 800aa10:	f04f 0c00 	mov.w	ip, #0
 800aa14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa18:	2909      	cmp	r1, #9
 800aa1a:	d97f      	bls.n	800ab1c <_strtod_l+0x2a4>
 800aa1c:	9515      	str	r5, [sp, #84]	; 0x54
 800aa1e:	2700      	movs	r7, #0
 800aa20:	e09e      	b.n	800ab60 <_strtod_l+0x2e8>
 800aa22:	2300      	movs	r3, #0
 800aa24:	e7c8      	b.n	800a9b8 <_strtod_l+0x140>
 800aa26:	f1bb 0f08 	cmp.w	fp, #8
 800aa2a:	bfd8      	it	le
 800aa2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aa2e:	f100 0001 	add.w	r0, r0, #1
 800aa32:	bfda      	itte	le
 800aa34:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa38:	9309      	strle	r3, [sp, #36]	; 0x24
 800aa3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800aa3e:	f10b 0b01 	add.w	fp, fp, #1
 800aa42:	9015      	str	r0, [sp, #84]	; 0x54
 800aa44:	e7c1      	b.n	800a9ca <_strtod_l+0x152>
 800aa46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	9215      	str	r2, [sp, #84]	; 0x54
 800aa4c:	785a      	ldrb	r2, [r3, #1]
 800aa4e:	f1bb 0f00 	cmp.w	fp, #0
 800aa52:	d037      	beq.n	800aac4 <_strtod_l+0x24c>
 800aa54:	9005      	str	r0, [sp, #20]
 800aa56:	465e      	mov	r6, fp
 800aa58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d912      	bls.n	800aa86 <_strtod_l+0x20e>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7c4      	b.n	800a9ee <_strtod_l+0x176>
 800aa64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	9215      	str	r2, [sp, #84]	; 0x54
 800aa6a:	785a      	ldrb	r2, [r3, #1]
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	2a30      	cmp	r2, #48	; 0x30
 800aa70:	d0f8      	beq.n	800aa64 <_strtod_l+0x1ec>
 800aa72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa76:	2b08      	cmp	r3, #8
 800aa78:	f200 84c1 	bhi.w	800b3fe <_strtod_l+0xb86>
 800aa7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa7e:	9005      	str	r0, [sp, #20]
 800aa80:	2000      	movs	r0, #0
 800aa82:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa84:	4606      	mov	r6, r0
 800aa86:	3a30      	subs	r2, #48	; 0x30
 800aa88:	f100 0301 	add.w	r3, r0, #1
 800aa8c:	d014      	beq.n	800aab8 <_strtod_l+0x240>
 800aa8e:	9905      	ldr	r1, [sp, #20]
 800aa90:	4419      	add	r1, r3
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	4633      	mov	r3, r6
 800aa96:	eb00 0c06 	add.w	ip, r0, r6
 800aa9a:	210a      	movs	r1, #10
 800aa9c:	4563      	cmp	r3, ip
 800aa9e:	d113      	bne.n	800aac8 <_strtod_l+0x250>
 800aaa0:	1833      	adds	r3, r6, r0
 800aaa2:	2b08      	cmp	r3, #8
 800aaa4:	f106 0601 	add.w	r6, r6, #1
 800aaa8:	4406      	add	r6, r0
 800aaaa:	dc1a      	bgt.n	800aae2 <_strtod_l+0x26a>
 800aaac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaae:	230a      	movs	r3, #10
 800aab0:	fb03 2301 	mla	r3, r3, r1, r2
 800aab4:	9309      	str	r3, [sp, #36]	; 0x24
 800aab6:	2300      	movs	r3, #0
 800aab8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaba:	1c51      	adds	r1, r2, #1
 800aabc:	9115      	str	r1, [sp, #84]	; 0x54
 800aabe:	7852      	ldrb	r2, [r2, #1]
 800aac0:	4618      	mov	r0, r3
 800aac2:	e7c9      	b.n	800aa58 <_strtod_l+0x1e0>
 800aac4:	4658      	mov	r0, fp
 800aac6:	e7d2      	b.n	800aa6e <_strtod_l+0x1f6>
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	f103 0301 	add.w	r3, r3, #1
 800aace:	dc03      	bgt.n	800aad8 <_strtod_l+0x260>
 800aad0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aad2:	434f      	muls	r7, r1
 800aad4:	9709      	str	r7, [sp, #36]	; 0x24
 800aad6:	e7e1      	b.n	800aa9c <_strtod_l+0x224>
 800aad8:	2b10      	cmp	r3, #16
 800aada:	bfd8      	it	le
 800aadc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aae0:	e7dc      	b.n	800aa9c <_strtod_l+0x224>
 800aae2:	2e10      	cmp	r6, #16
 800aae4:	bfdc      	itt	le
 800aae6:	230a      	movle	r3, #10
 800aae8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aaec:	e7e3      	b.n	800aab6 <_strtod_l+0x23e>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	9305      	str	r3, [sp, #20]
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e780      	b.n	800a9f8 <_strtod_l+0x180>
 800aaf6:	f04f 0c00 	mov.w	ip, #0
 800aafa:	1caa      	adds	r2, r5, #2
 800aafc:	9215      	str	r2, [sp, #84]	; 0x54
 800aafe:	78aa      	ldrb	r2, [r5, #2]
 800ab00:	e788      	b.n	800aa14 <_strtod_l+0x19c>
 800ab02:	f04f 0c01 	mov.w	ip, #1
 800ab06:	e7f8      	b.n	800aafa <_strtod_l+0x282>
 800ab08:	0800ca10 	.word	0x0800ca10
 800ab0c:	0800ca0c 	.word	0x0800ca0c
 800ab10:	7ff00000 	.word	0x7ff00000
 800ab14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab16:	1c51      	adds	r1, r2, #1
 800ab18:	9115      	str	r1, [sp, #84]	; 0x54
 800ab1a:	7852      	ldrb	r2, [r2, #1]
 800ab1c:	2a30      	cmp	r2, #48	; 0x30
 800ab1e:	d0f9      	beq.n	800ab14 <_strtod_l+0x29c>
 800ab20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab24:	2908      	cmp	r1, #8
 800ab26:	f63f af7a 	bhi.w	800aa1e <_strtod_l+0x1a6>
 800ab2a:	3a30      	subs	r2, #48	; 0x30
 800ab2c:	9208      	str	r2, [sp, #32]
 800ab2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab30:	920c      	str	r2, [sp, #48]	; 0x30
 800ab32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab34:	1c57      	adds	r7, r2, #1
 800ab36:	9715      	str	r7, [sp, #84]	; 0x54
 800ab38:	7852      	ldrb	r2, [r2, #1]
 800ab3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab3e:	f1be 0f09 	cmp.w	lr, #9
 800ab42:	d938      	bls.n	800abb6 <_strtod_l+0x33e>
 800ab44:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab46:	1a7f      	subs	r7, r7, r1
 800ab48:	2f08      	cmp	r7, #8
 800ab4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab4e:	dc03      	bgt.n	800ab58 <_strtod_l+0x2e0>
 800ab50:	9908      	ldr	r1, [sp, #32]
 800ab52:	428f      	cmp	r7, r1
 800ab54:	bfa8      	it	ge
 800ab56:	460f      	movge	r7, r1
 800ab58:	f1bc 0f00 	cmp.w	ip, #0
 800ab5c:	d000      	beq.n	800ab60 <_strtod_l+0x2e8>
 800ab5e:	427f      	negs	r7, r7
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	d14f      	bne.n	800ac04 <_strtod_l+0x38c>
 800ab64:	9904      	ldr	r1, [sp, #16]
 800ab66:	4301      	orrs	r1, r0
 800ab68:	f47f aec1 	bne.w	800a8ee <_strtod_l+0x76>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f47f aedb 	bne.w	800a928 <_strtod_l+0xb0>
 800ab72:	2a69      	cmp	r2, #105	; 0x69
 800ab74:	d029      	beq.n	800abca <_strtod_l+0x352>
 800ab76:	dc26      	bgt.n	800abc6 <_strtod_l+0x34e>
 800ab78:	2a49      	cmp	r2, #73	; 0x49
 800ab7a:	d026      	beq.n	800abca <_strtod_l+0x352>
 800ab7c:	2a4e      	cmp	r2, #78	; 0x4e
 800ab7e:	f47f aed3 	bne.w	800a928 <_strtod_l+0xb0>
 800ab82:	499b      	ldr	r1, [pc, #620]	; (800adf0 <_strtod_l+0x578>)
 800ab84:	a815      	add	r0, sp, #84	; 0x54
 800ab86:	f001 fa27 	bl	800bfd8 <__match>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f43f aecc 	beq.w	800a928 <_strtod_l+0xb0>
 800ab90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b28      	cmp	r3, #40	; 0x28
 800ab96:	d12f      	bne.n	800abf8 <_strtod_l+0x380>
 800ab98:	4996      	ldr	r1, [pc, #600]	; (800adf4 <_strtod_l+0x57c>)
 800ab9a:	aa18      	add	r2, sp, #96	; 0x60
 800ab9c:	a815      	add	r0, sp, #84	; 0x54
 800ab9e:	f001 fa2f 	bl	800c000 <__hexnan>
 800aba2:	2805      	cmp	r0, #5
 800aba4:	d128      	bne.n	800abf8 <_strtod_l+0x380>
 800aba6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aba8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800abb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800abb4:	e69b      	b.n	800a8ee <_strtod_l+0x76>
 800abb6:	9f08      	ldr	r7, [sp, #32]
 800abb8:	210a      	movs	r1, #10
 800abba:	fb01 2107 	mla	r1, r1, r7, r2
 800abbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800abc2:	9208      	str	r2, [sp, #32]
 800abc4:	e7b5      	b.n	800ab32 <_strtod_l+0x2ba>
 800abc6:	2a6e      	cmp	r2, #110	; 0x6e
 800abc8:	e7d9      	b.n	800ab7e <_strtod_l+0x306>
 800abca:	498b      	ldr	r1, [pc, #556]	; (800adf8 <_strtod_l+0x580>)
 800abcc:	a815      	add	r0, sp, #84	; 0x54
 800abce:	f001 fa03 	bl	800bfd8 <__match>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f43f aea8 	beq.w	800a928 <_strtod_l+0xb0>
 800abd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abda:	4988      	ldr	r1, [pc, #544]	; (800adfc <_strtod_l+0x584>)
 800abdc:	3b01      	subs	r3, #1
 800abde:	a815      	add	r0, sp, #84	; 0x54
 800abe0:	9315      	str	r3, [sp, #84]	; 0x54
 800abe2:	f001 f9f9 	bl	800bfd8 <__match>
 800abe6:	b910      	cbnz	r0, 800abee <_strtod_l+0x376>
 800abe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abea:	3301      	adds	r3, #1
 800abec:	9315      	str	r3, [sp, #84]	; 0x54
 800abee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ae0c <_strtod_l+0x594>
 800abf2:	f04f 0800 	mov.w	r8, #0
 800abf6:	e67a      	b.n	800a8ee <_strtod_l+0x76>
 800abf8:	4881      	ldr	r0, [pc, #516]	; (800ae00 <_strtod_l+0x588>)
 800abfa:	f000 ff09 	bl	800ba10 <nan>
 800abfe:	ec59 8b10 	vmov	r8, r9, d0
 800ac02:	e674      	b.n	800a8ee <_strtod_l+0x76>
 800ac04:	9b05      	ldr	r3, [sp, #20]
 800ac06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac08:	1afb      	subs	r3, r7, r3
 800ac0a:	f1bb 0f00 	cmp.w	fp, #0
 800ac0e:	bf08      	it	eq
 800ac10:	46b3      	moveq	fp, r6
 800ac12:	2e10      	cmp	r6, #16
 800ac14:	9308      	str	r3, [sp, #32]
 800ac16:	4635      	mov	r5, r6
 800ac18:	bfa8      	it	ge
 800ac1a:	2510      	movge	r5, #16
 800ac1c:	f7f5 fc72 	bl	8000504 <__aeabi_ui2d>
 800ac20:	2e09      	cmp	r6, #9
 800ac22:	4680      	mov	r8, r0
 800ac24:	4689      	mov	r9, r1
 800ac26:	dd13      	ble.n	800ac50 <_strtod_l+0x3d8>
 800ac28:	4b76      	ldr	r3, [pc, #472]	; (800ae04 <_strtod_l+0x58c>)
 800ac2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	4680      	mov	r8, r0
 800ac38:	4650      	mov	r0, sl
 800ac3a:	4689      	mov	r9, r1
 800ac3c:	f7f5 fc62 	bl	8000504 <__aeabi_ui2d>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4640      	mov	r0, r8
 800ac46:	4649      	mov	r1, r9
 800ac48:	f7f5 fb20 	bl	800028c <__adddf3>
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	2e0f      	cmp	r6, #15
 800ac52:	dc38      	bgt.n	800acc6 <_strtod_l+0x44e>
 800ac54:	9b08      	ldr	r3, [sp, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f43f ae49 	beq.w	800a8ee <_strtod_l+0x76>
 800ac5c:	dd24      	ble.n	800aca8 <_strtod_l+0x430>
 800ac5e:	2b16      	cmp	r3, #22
 800ac60:	dc0b      	bgt.n	800ac7a <_strtod_l+0x402>
 800ac62:	4968      	ldr	r1, [pc, #416]	; (800ae04 <_strtod_l+0x58c>)
 800ac64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	464b      	mov	r3, r9
 800ac70:	f7f5 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	e639      	b.n	800a8ee <_strtod_l+0x76>
 800ac7a:	9a08      	ldr	r2, [sp, #32]
 800ac7c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ac80:	4293      	cmp	r3, r2
 800ac82:	db20      	blt.n	800acc6 <_strtod_l+0x44e>
 800ac84:	4c5f      	ldr	r4, [pc, #380]	; (800ae04 <_strtod_l+0x58c>)
 800ac86:	f1c6 060f 	rsb	r6, r6, #15
 800ac8a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ac8e:	4642      	mov	r2, r8
 800ac90:	464b      	mov	r3, r9
 800ac92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	1b9e      	subs	r6, r3, r6
 800ac9e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aca2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aca6:	e7e3      	b.n	800ac70 <_strtod_l+0x3f8>
 800aca8:	9b08      	ldr	r3, [sp, #32]
 800acaa:	3316      	adds	r3, #22
 800acac:	db0b      	blt.n	800acc6 <_strtod_l+0x44e>
 800acae:	9b05      	ldr	r3, [sp, #20]
 800acb0:	1bdf      	subs	r7, r3, r7
 800acb2:	4b54      	ldr	r3, [pc, #336]	; (800ae04 <_strtod_l+0x58c>)
 800acb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800acb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 fdc4 	bl	800084c <__aeabi_ddiv>
 800acc4:	e7d6      	b.n	800ac74 <_strtod_l+0x3fc>
 800acc6:	9b08      	ldr	r3, [sp, #32]
 800acc8:	1b75      	subs	r5, r6, r5
 800acca:	441d      	add	r5, r3
 800accc:	2d00      	cmp	r5, #0
 800acce:	dd70      	ble.n	800adb2 <_strtod_l+0x53a>
 800acd0:	f015 030f 	ands.w	r3, r5, #15
 800acd4:	d00a      	beq.n	800acec <_strtod_l+0x474>
 800acd6:	494b      	ldr	r1, [pc, #300]	; (800ae04 <_strtod_l+0x58c>)
 800acd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	f035 050f 	bics.w	r5, r5, #15
 800acf0:	d04d      	beq.n	800ad8e <_strtod_l+0x516>
 800acf2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800acf6:	dd22      	ble.n	800ad3e <_strtod_l+0x4c6>
 800acf8:	2500      	movs	r5, #0
 800acfa:	46ab      	mov	fp, r5
 800acfc:	9509      	str	r5, [sp, #36]	; 0x24
 800acfe:	9505      	str	r5, [sp, #20]
 800ad00:	2322      	movs	r3, #34	; 0x22
 800ad02:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ae0c <_strtod_l+0x594>
 800ad06:	6023      	str	r3, [r4, #0]
 800ad08:	f04f 0800 	mov.w	r8, #0
 800ad0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f43f aded 	beq.w	800a8ee <_strtod_l+0x76>
 800ad14:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad16:	4620      	mov	r0, r4
 800ad18:	f7ff f924 	bl	8009f64 <_Bfree>
 800ad1c:	9905      	ldr	r1, [sp, #20]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f7ff f920 	bl	8009f64 <_Bfree>
 800ad24:	4659      	mov	r1, fp
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff f91c 	bl	8009f64 <_Bfree>
 800ad2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff f918 	bl	8009f64 <_Bfree>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4620      	mov	r0, r4
 800ad38:	f7ff f914 	bl	8009f64 <_Bfree>
 800ad3c:	e5d7      	b.n	800a8ee <_strtod_l+0x76>
 800ad3e:	4b32      	ldr	r3, [pc, #200]	; (800ae08 <_strtod_l+0x590>)
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	2300      	movs	r3, #0
 800ad44:	112d      	asrs	r5, r5, #4
 800ad46:	4640      	mov	r0, r8
 800ad48:	4649      	mov	r1, r9
 800ad4a:	469a      	mov	sl, r3
 800ad4c:	2d01      	cmp	r5, #1
 800ad4e:	dc21      	bgt.n	800ad94 <_strtod_l+0x51c>
 800ad50:	b10b      	cbz	r3, 800ad56 <_strtod_l+0x4de>
 800ad52:	4680      	mov	r8, r0
 800ad54:	4689      	mov	r9, r1
 800ad56:	492c      	ldr	r1, [pc, #176]	; (800ae08 <_strtod_l+0x590>)
 800ad58:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ad5c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	4b27      	ldr	r3, [pc, #156]	; (800ae0c <_strtod_l+0x594>)
 800ad6e:	460a      	mov	r2, r1
 800ad70:	400b      	ands	r3, r1
 800ad72:	4927      	ldr	r1, [pc, #156]	; (800ae10 <_strtod_l+0x598>)
 800ad74:	428b      	cmp	r3, r1
 800ad76:	4680      	mov	r8, r0
 800ad78:	d8be      	bhi.n	800acf8 <_strtod_l+0x480>
 800ad7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad7e:	428b      	cmp	r3, r1
 800ad80:	bf86      	itte	hi
 800ad82:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ae14 <_strtod_l+0x59c>
 800ad86:	f04f 38ff 	movhi.w	r8, #4294967295
 800ad8a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	e07b      	b.n	800ae8c <_strtod_l+0x614>
 800ad94:	07ea      	lsls	r2, r5, #31
 800ad96:	d505      	bpl.n	800ada4 <_strtod_l+0x52c>
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fc2b 	bl	80005f8 <__aeabi_dmul>
 800ada2:	2301      	movs	r3, #1
 800ada4:	9a04      	ldr	r2, [sp, #16]
 800ada6:	3208      	adds	r2, #8
 800ada8:	f10a 0a01 	add.w	sl, sl, #1
 800adac:	106d      	asrs	r5, r5, #1
 800adae:	9204      	str	r2, [sp, #16]
 800adb0:	e7cc      	b.n	800ad4c <_strtod_l+0x4d4>
 800adb2:	d0ec      	beq.n	800ad8e <_strtod_l+0x516>
 800adb4:	426d      	negs	r5, r5
 800adb6:	f015 020f 	ands.w	r2, r5, #15
 800adba:	d00a      	beq.n	800add2 <_strtod_l+0x55a>
 800adbc:	4b11      	ldr	r3, [pc, #68]	; (800ae04 <_strtod_l+0x58c>)
 800adbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc2:	4640      	mov	r0, r8
 800adc4:	4649      	mov	r1, r9
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fd3f 	bl	800084c <__aeabi_ddiv>
 800adce:	4680      	mov	r8, r0
 800add0:	4689      	mov	r9, r1
 800add2:	112d      	asrs	r5, r5, #4
 800add4:	d0db      	beq.n	800ad8e <_strtod_l+0x516>
 800add6:	2d1f      	cmp	r5, #31
 800add8:	dd1e      	ble.n	800ae18 <_strtod_l+0x5a0>
 800adda:	2500      	movs	r5, #0
 800addc:	46ab      	mov	fp, r5
 800adde:	9509      	str	r5, [sp, #36]	; 0x24
 800ade0:	9505      	str	r5, [sp, #20]
 800ade2:	2322      	movs	r3, #34	; 0x22
 800ade4:	f04f 0800 	mov.w	r8, #0
 800ade8:	f04f 0900 	mov.w	r9, #0
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	e78d      	b.n	800ad0c <_strtod_l+0x494>
 800adf0:	0800c7f9 	.word	0x0800c7f9
 800adf4:	0800ca24 	.word	0x0800ca24
 800adf8:	0800c7f1 	.word	0x0800c7f1
 800adfc:	0800c828 	.word	0x0800c828
 800ae00:	0800cbb5 	.word	0x0800cbb5
 800ae04:	0800c938 	.word	0x0800c938
 800ae08:	0800c910 	.word	0x0800c910
 800ae0c:	7ff00000 	.word	0x7ff00000
 800ae10:	7ca00000 	.word	0x7ca00000
 800ae14:	7fefffff 	.word	0x7fefffff
 800ae18:	f015 0310 	ands.w	r3, r5, #16
 800ae1c:	bf18      	it	ne
 800ae1e:	236a      	movne	r3, #106	; 0x6a
 800ae20:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b1c4 <_strtod_l+0x94c>
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	07ea      	lsls	r2, r5, #31
 800ae2e:	d504      	bpl.n	800ae3a <_strtod_l+0x5c2>
 800ae30:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae34:	f7f5 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	106d      	asrs	r5, r5, #1
 800ae3c:	f10a 0a08 	add.w	sl, sl, #8
 800ae40:	d1f4      	bne.n	800ae2c <_strtod_l+0x5b4>
 800ae42:	b10b      	cbz	r3, 800ae48 <_strtod_l+0x5d0>
 800ae44:	4680      	mov	r8, r0
 800ae46:	4689      	mov	r9, r1
 800ae48:	9b04      	ldr	r3, [sp, #16]
 800ae4a:	b1bb      	cbz	r3, 800ae7c <_strtod_l+0x604>
 800ae4c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ae50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	4649      	mov	r1, r9
 800ae58:	dd10      	ble.n	800ae7c <_strtod_l+0x604>
 800ae5a:	2b1f      	cmp	r3, #31
 800ae5c:	f340 811e 	ble.w	800b09c <_strtod_l+0x824>
 800ae60:	2b34      	cmp	r3, #52	; 0x34
 800ae62:	bfde      	ittt	le
 800ae64:	f04f 33ff 	movle.w	r3, #4294967295
 800ae68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae6c:	4093      	lslle	r3, r2
 800ae6e:	f04f 0800 	mov.w	r8, #0
 800ae72:	bfcc      	ite	gt
 800ae74:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae78:	ea03 0901 	andle.w	r9, r3, r1
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4640      	mov	r0, r8
 800ae82:	4649      	mov	r1, r9
 800ae84:	f7f5 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d1a6      	bne.n	800adda <_strtod_l+0x562>
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae92:	4633      	mov	r3, r6
 800ae94:	465a      	mov	r2, fp
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff f8cc 	bl	800a034 <__s2b>
 800ae9c:	9009      	str	r0, [sp, #36]	; 0x24
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f43f af2a 	beq.w	800acf8 <_strtod_l+0x480>
 800aea4:	9a08      	ldr	r2, [sp, #32]
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	eba3 0307 	sub.w	r3, r3, r7
 800aeae:	bfa8      	it	ge
 800aeb0:	2300      	movge	r3, #0
 800aeb2:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aeba:	9312      	str	r3, [sp, #72]	; 0x48
 800aebc:	46ab      	mov	fp, r5
 800aebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec0:	4620      	mov	r0, r4
 800aec2:	6859      	ldr	r1, [r3, #4]
 800aec4:	f7ff f80e 	bl	8009ee4 <_Balloc>
 800aec8:	9005      	str	r0, [sp, #20]
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f43f af18 	beq.w	800ad00 <_strtod_l+0x488>
 800aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	3202      	adds	r2, #2
 800aed6:	f103 010c 	add.w	r1, r3, #12
 800aeda:	0092      	lsls	r2, r2, #2
 800aedc:	300c      	adds	r0, #12
 800aede:	f000 fd87 	bl	800b9f0 <memcpy>
 800aee2:	ec49 8b10 	vmov	d0, r8, r9
 800aee6:	aa18      	add	r2, sp, #96	; 0x60
 800aee8:	a917      	add	r1, sp, #92	; 0x5c
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff fbd6 	bl	800a69c <__d2b>
 800aef0:	ec49 8b18 	vmov	d8, r8, r9
 800aef4:	9016      	str	r0, [sp, #88]	; 0x58
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f43f af02 	beq.w	800ad00 <_strtod_l+0x488>
 800aefc:	2101      	movs	r1, #1
 800aefe:	4620      	mov	r0, r4
 800af00:	f7ff f930 	bl	800a164 <__i2b>
 800af04:	4683      	mov	fp, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f aefa 	beq.w	800ad00 <_strtod_l+0x488>
 800af0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af10:	2e00      	cmp	r6, #0
 800af12:	bfab      	itete	ge
 800af14:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800af16:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800af18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800af1a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800af1e:	bfac      	ite	ge
 800af20:	eb06 0a03 	addge.w	sl, r6, r3
 800af24:	1b9f      	sublt	r7, r3, r6
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	1af6      	subs	r6, r6, r3
 800af2a:	4416      	add	r6, r2
 800af2c:	4ba0      	ldr	r3, [pc, #640]	; (800b1b0 <_strtod_l+0x938>)
 800af2e:	3e01      	subs	r6, #1
 800af30:	429e      	cmp	r6, r3
 800af32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af36:	f280 80c4 	bge.w	800b0c2 <_strtod_l+0x84a>
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	2b1f      	cmp	r3, #31
 800af3e:	eba2 0203 	sub.w	r2, r2, r3
 800af42:	f04f 0101 	mov.w	r1, #1
 800af46:	f300 80b0 	bgt.w	800b0aa <_strtod_l+0x832>
 800af4a:	fa01 f303 	lsl.w	r3, r1, r3
 800af4e:	930e      	str	r3, [sp, #56]	; 0x38
 800af50:	2300      	movs	r3, #0
 800af52:	930d      	str	r3, [sp, #52]	; 0x34
 800af54:	eb0a 0602 	add.w	r6, sl, r2
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	45b2      	cmp	sl, r6
 800af5c:	4417      	add	r7, r2
 800af5e:	441f      	add	r7, r3
 800af60:	4653      	mov	r3, sl
 800af62:	bfa8      	it	ge
 800af64:	4633      	movge	r3, r6
 800af66:	42bb      	cmp	r3, r7
 800af68:	bfa8      	it	ge
 800af6a:	463b      	movge	r3, r7
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfc2      	ittt	gt
 800af70:	1af6      	subgt	r6, r6, r3
 800af72:	1aff      	subgt	r7, r7, r3
 800af74:	ebaa 0a03 	subgt.w	sl, sl, r3
 800af78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dd17      	ble.n	800afae <_strtod_l+0x736>
 800af7e:	4659      	mov	r1, fp
 800af80:	461a      	mov	r2, r3
 800af82:	4620      	mov	r0, r4
 800af84:	f7ff f9ae 	bl	800a2e4 <__pow5mult>
 800af88:	4683      	mov	fp, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f43f aeb8 	beq.w	800ad00 <_strtod_l+0x488>
 800af90:	4601      	mov	r1, r0
 800af92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af94:	4620      	mov	r0, r4
 800af96:	f7ff f8fb 	bl	800a190 <__multiply>
 800af9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f43f aeaf 	beq.w	800ad00 <_strtod_l+0x488>
 800afa2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afa4:	4620      	mov	r0, r4
 800afa6:	f7fe ffdd 	bl	8009f64 <_Bfree>
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	9316      	str	r3, [sp, #88]	; 0x58
 800afae:	2e00      	cmp	r6, #0
 800afb0:	f300 808c 	bgt.w	800b0cc <_strtod_l+0x854>
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dd08      	ble.n	800afcc <_strtod_l+0x754>
 800afba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afbc:	9905      	ldr	r1, [sp, #20]
 800afbe:	4620      	mov	r0, r4
 800afc0:	f7ff f990 	bl	800a2e4 <__pow5mult>
 800afc4:	9005      	str	r0, [sp, #20]
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f43f ae9a 	beq.w	800ad00 <_strtod_l+0x488>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	dd08      	ble.n	800afe2 <_strtod_l+0x76a>
 800afd0:	9905      	ldr	r1, [sp, #20]
 800afd2:	463a      	mov	r2, r7
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff f9df 	bl	800a398 <__lshift>
 800afda:	9005      	str	r0, [sp, #20]
 800afdc:	2800      	cmp	r0, #0
 800afde:	f43f ae8f 	beq.w	800ad00 <_strtod_l+0x488>
 800afe2:	f1ba 0f00 	cmp.w	sl, #0
 800afe6:	dd08      	ble.n	800affa <_strtod_l+0x782>
 800afe8:	4659      	mov	r1, fp
 800afea:	4652      	mov	r2, sl
 800afec:	4620      	mov	r0, r4
 800afee:	f7ff f9d3 	bl	800a398 <__lshift>
 800aff2:	4683      	mov	fp, r0
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f ae83 	beq.w	800ad00 <_strtod_l+0x488>
 800affa:	9a05      	ldr	r2, [sp, #20]
 800affc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff fa52 	bl	800a4a8 <__mdiff>
 800b004:	4605      	mov	r5, r0
 800b006:	2800      	cmp	r0, #0
 800b008:	f43f ae7a 	beq.w	800ad00 <_strtod_l+0x488>
 800b00c:	68c3      	ldr	r3, [r0, #12]
 800b00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b010:	2300      	movs	r3, #0
 800b012:	60c3      	str	r3, [r0, #12]
 800b014:	4659      	mov	r1, fp
 800b016:	f7ff fa2b 	bl	800a470 <__mcmp>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	da60      	bge.n	800b0e0 <_strtod_l+0x868>
 800b01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b020:	ea53 0308 	orrs.w	r3, r3, r8
 800b024:	f040 8084 	bne.w	800b130 <_strtod_l+0x8b8>
 800b028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d17f      	bne.n	800b130 <_strtod_l+0x8b8>
 800b030:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b034:	0d1b      	lsrs	r3, r3, #20
 800b036:	051b      	lsls	r3, r3, #20
 800b038:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b03c:	d978      	bls.n	800b130 <_strtod_l+0x8b8>
 800b03e:	696b      	ldr	r3, [r5, #20]
 800b040:	b913      	cbnz	r3, 800b048 <_strtod_l+0x7d0>
 800b042:	692b      	ldr	r3, [r5, #16]
 800b044:	2b01      	cmp	r3, #1
 800b046:	dd73      	ble.n	800b130 <_strtod_l+0x8b8>
 800b048:	4629      	mov	r1, r5
 800b04a:	2201      	movs	r2, #1
 800b04c:	4620      	mov	r0, r4
 800b04e:	f7ff f9a3 	bl	800a398 <__lshift>
 800b052:	4659      	mov	r1, fp
 800b054:	4605      	mov	r5, r0
 800b056:	f7ff fa0b 	bl	800a470 <__mcmp>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	dd68      	ble.n	800b130 <_strtod_l+0x8b8>
 800b05e:	9904      	ldr	r1, [sp, #16]
 800b060:	4a54      	ldr	r2, [pc, #336]	; (800b1b4 <_strtod_l+0x93c>)
 800b062:	464b      	mov	r3, r9
 800b064:	2900      	cmp	r1, #0
 800b066:	f000 8084 	beq.w	800b172 <_strtod_l+0x8fa>
 800b06a:	ea02 0109 	and.w	r1, r2, r9
 800b06e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b072:	dc7e      	bgt.n	800b172 <_strtod_l+0x8fa>
 800b074:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b078:	f77f aeb3 	ble.w	800ade2 <_strtod_l+0x56a>
 800b07c:	4b4e      	ldr	r3, [pc, #312]	; (800b1b8 <_strtod_l+0x940>)
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	2200      	movs	r2, #0
 800b084:	f7f5 fab8 	bl	80005f8 <__aeabi_dmul>
 800b088:	4b4a      	ldr	r3, [pc, #296]	; (800b1b4 <_strtod_l+0x93c>)
 800b08a:	400b      	ands	r3, r1
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	2b00      	cmp	r3, #0
 800b092:	f47f ae3f 	bne.w	800ad14 <_strtod_l+0x49c>
 800b096:	2322      	movs	r3, #34	; 0x22
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	e63b      	b.n	800ad14 <_strtod_l+0x49c>
 800b09c:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a4:	ea03 0808 	and.w	r8, r3, r8
 800b0a8:	e6e8      	b.n	800ae7c <_strtod_l+0x604>
 800b0aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b0ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b0b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b0b6:	36e2      	adds	r6, #226	; 0xe2
 800b0b8:	fa01 f306 	lsl.w	r3, r1, r6
 800b0bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b0c0:	e748      	b.n	800af54 <_strtod_l+0x6dc>
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b0ca:	e743      	b.n	800af54 <_strtod_l+0x6dc>
 800b0cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7ff f961 	bl	800a398 <__lshift>
 800b0d6:	9016      	str	r0, [sp, #88]	; 0x58
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	f47f af6b 	bne.w	800afb4 <_strtod_l+0x73c>
 800b0de:	e60f      	b.n	800ad00 <_strtod_l+0x488>
 800b0e0:	46ca      	mov	sl, r9
 800b0e2:	d171      	bne.n	800b1c8 <_strtod_l+0x950>
 800b0e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0ea:	b352      	cbz	r2, 800b142 <_strtod_l+0x8ca>
 800b0ec:	4a33      	ldr	r2, [pc, #204]	; (800b1bc <_strtod_l+0x944>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d12a      	bne.n	800b148 <_strtod_l+0x8d0>
 800b0f2:	9b04      	ldr	r3, [sp, #16]
 800b0f4:	4641      	mov	r1, r8
 800b0f6:	b1fb      	cbz	r3, 800b138 <_strtod_l+0x8c0>
 800b0f8:	4b2e      	ldr	r3, [pc, #184]	; (800b1b4 <_strtod_l+0x93c>)
 800b0fa:	ea09 0303 	and.w	r3, r9, r3
 800b0fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b102:	f04f 32ff 	mov.w	r2, #4294967295
 800b106:	d81a      	bhi.n	800b13e <_strtod_l+0x8c6>
 800b108:	0d1b      	lsrs	r3, r3, #20
 800b10a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b10e:	fa02 f303 	lsl.w	r3, r2, r3
 800b112:	4299      	cmp	r1, r3
 800b114:	d118      	bne.n	800b148 <_strtod_l+0x8d0>
 800b116:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <_strtod_l+0x948>)
 800b118:	459a      	cmp	sl, r3
 800b11a:	d102      	bne.n	800b122 <_strtod_l+0x8aa>
 800b11c:	3101      	adds	r1, #1
 800b11e:	f43f adef 	beq.w	800ad00 <_strtod_l+0x488>
 800b122:	4b24      	ldr	r3, [pc, #144]	; (800b1b4 <_strtod_l+0x93c>)
 800b124:	ea0a 0303 	and.w	r3, sl, r3
 800b128:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b12c:	f04f 0800 	mov.w	r8, #0
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1a2      	bne.n	800b07c <_strtod_l+0x804>
 800b136:	e5ed      	b.n	800ad14 <_strtod_l+0x49c>
 800b138:	f04f 33ff 	mov.w	r3, #4294967295
 800b13c:	e7e9      	b.n	800b112 <_strtod_l+0x89a>
 800b13e:	4613      	mov	r3, r2
 800b140:	e7e7      	b.n	800b112 <_strtod_l+0x89a>
 800b142:	ea53 0308 	orrs.w	r3, r3, r8
 800b146:	d08a      	beq.n	800b05e <_strtod_l+0x7e6>
 800b148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b14a:	b1e3      	cbz	r3, 800b186 <_strtod_l+0x90e>
 800b14c:	ea13 0f0a 	tst.w	r3, sl
 800b150:	d0ee      	beq.n	800b130 <_strtod_l+0x8b8>
 800b152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b154:	9a04      	ldr	r2, [sp, #16]
 800b156:	4640      	mov	r0, r8
 800b158:	4649      	mov	r1, r9
 800b15a:	b1c3      	cbz	r3, 800b18e <_strtod_l+0x916>
 800b15c:	f7ff fb6f 	bl	800a83e <sulp>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	ec51 0b18 	vmov	r0, r1, d8
 800b168:	f7f5 f890 	bl	800028c <__adddf3>
 800b16c:	4680      	mov	r8, r0
 800b16e:	4689      	mov	r9, r1
 800b170:	e7de      	b.n	800b130 <_strtod_l+0x8b8>
 800b172:	4013      	ands	r3, r2
 800b174:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b178:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b17c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b180:	f04f 38ff 	mov.w	r8, #4294967295
 800b184:	e7d4      	b.n	800b130 <_strtod_l+0x8b8>
 800b186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b188:	ea13 0f08 	tst.w	r3, r8
 800b18c:	e7e0      	b.n	800b150 <_strtod_l+0x8d8>
 800b18e:	f7ff fb56 	bl	800a83e <sulp>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	ec51 0b18 	vmov	r0, r1, d8
 800b19a:	f7f5 f875 	bl	8000288 <__aeabi_dsub>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	4689      	mov	r9, r1
 800b1a6:	f7f5 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0c0      	beq.n	800b130 <_strtod_l+0x8b8>
 800b1ae:	e618      	b.n	800ade2 <_strtod_l+0x56a>
 800b1b0:	fffffc02 	.word	0xfffffc02
 800b1b4:	7ff00000 	.word	0x7ff00000
 800b1b8:	39500000 	.word	0x39500000
 800b1bc:	000fffff 	.word	0x000fffff
 800b1c0:	7fefffff 	.word	0x7fefffff
 800b1c4:	0800ca38 	.word	0x0800ca38
 800b1c8:	4659      	mov	r1, fp
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7ff fac0 	bl	800a750 <__ratio>
 800b1d0:	ec57 6b10 	vmov	r6, r7, d0
 800b1d4:	ee10 0a10 	vmov	r0, s0
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 fc86 	bl	8000af0 <__aeabi_dcmple>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d071      	beq.n	800b2cc <_strtod_l+0xa54>
 800b1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d17c      	bne.n	800b2e8 <_strtod_l+0xa70>
 800b1ee:	f1b8 0f00 	cmp.w	r8, #0
 800b1f2:	d15a      	bne.n	800b2aa <_strtod_l+0xa32>
 800b1f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d15d      	bne.n	800b2b8 <_strtod_l+0xa40>
 800b1fc:	4b90      	ldr	r3, [pc, #576]	; (800b440 <_strtod_l+0xbc8>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 fc6a 	bl	8000adc <__aeabi_dcmplt>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d15c      	bne.n	800b2c6 <_strtod_l+0xa4e>
 800b20c:	4630      	mov	r0, r6
 800b20e:	4639      	mov	r1, r7
 800b210:	4b8c      	ldr	r3, [pc, #560]	; (800b444 <_strtod_l+0xbcc>)
 800b212:	2200      	movs	r2, #0
 800b214:	f7f5 f9f0 	bl	80005f8 <__aeabi_dmul>
 800b218:	4606      	mov	r6, r0
 800b21a:	460f      	mov	r7, r1
 800b21c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b220:	9606      	str	r6, [sp, #24]
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b228:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b22c:	4b86      	ldr	r3, [pc, #536]	; (800b448 <_strtod_l+0xbd0>)
 800b22e:	ea0a 0303 	and.w	r3, sl, r3
 800b232:	930d      	str	r3, [sp, #52]	; 0x34
 800b234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b236:	4b85      	ldr	r3, [pc, #532]	; (800b44c <_strtod_l+0xbd4>)
 800b238:	429a      	cmp	r2, r3
 800b23a:	f040 8090 	bne.w	800b35e <_strtod_l+0xae6>
 800b23e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b242:	ec49 8b10 	vmov	d0, r8, r9
 800b246:	f7ff f9b9 	bl	800a5bc <__ulp>
 800b24a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b24e:	ec51 0b10 	vmov	r0, r1, d0
 800b252:	f7f5 f9d1 	bl	80005f8 <__aeabi_dmul>
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	460b      	mov	r3, r1
 800b260:	4979      	ldr	r1, [pc, #484]	; (800b448 <_strtod_l+0xbd0>)
 800b262:	4a7b      	ldr	r2, [pc, #492]	; (800b450 <_strtod_l+0xbd8>)
 800b264:	4019      	ands	r1, r3
 800b266:	4291      	cmp	r1, r2
 800b268:	4680      	mov	r8, r0
 800b26a:	d944      	bls.n	800b2f6 <_strtod_l+0xa7e>
 800b26c:	ee18 2a90 	vmov	r2, s17
 800b270:	4b78      	ldr	r3, [pc, #480]	; (800b454 <_strtod_l+0xbdc>)
 800b272:	429a      	cmp	r2, r3
 800b274:	d104      	bne.n	800b280 <_strtod_l+0xa08>
 800b276:	ee18 3a10 	vmov	r3, s16
 800b27a:	3301      	adds	r3, #1
 800b27c:	f43f ad40 	beq.w	800ad00 <_strtod_l+0x488>
 800b280:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b454 <_strtod_l+0xbdc>
 800b284:	f04f 38ff 	mov.w	r8, #4294967295
 800b288:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7fe fe6a 	bl	8009f64 <_Bfree>
 800b290:	9905      	ldr	r1, [sp, #20]
 800b292:	4620      	mov	r0, r4
 800b294:	f7fe fe66 	bl	8009f64 <_Bfree>
 800b298:	4659      	mov	r1, fp
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7fe fe62 	bl	8009f64 <_Bfree>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7fe fe5e 	bl	8009f64 <_Bfree>
 800b2a8:	e609      	b.n	800aebe <_strtod_l+0x646>
 800b2aa:	f1b8 0f01 	cmp.w	r8, #1
 800b2ae:	d103      	bne.n	800b2b8 <_strtod_l+0xa40>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f43f ad95 	beq.w	800ade2 <_strtod_l+0x56a>
 800b2b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b410 <_strtod_l+0xb98>
 800b2bc:	4f60      	ldr	r7, [pc, #384]	; (800b440 <_strtod_l+0xbc8>)
 800b2be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	e7ae      	b.n	800b224 <_strtod_l+0x9ac>
 800b2c6:	4f5f      	ldr	r7, [pc, #380]	; (800b444 <_strtod_l+0xbcc>)
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	e7a7      	b.n	800b21c <_strtod_l+0x9a4>
 800b2cc:	4b5d      	ldr	r3, [pc, #372]	; (800b444 <_strtod_l+0xbcc>)
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d09c      	beq.n	800b21c <_strtod_l+0x9a4>
 800b2e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b2e6:	e79d      	b.n	800b224 <_strtod_l+0x9ac>
 800b2e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b418 <_strtod_l+0xba0>
 800b2ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2f0:	ec57 6b17 	vmov	r6, r7, d7
 800b2f4:	e796      	b.n	800b224 <_strtod_l+0x9ac>
 800b2f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b2fa:	9b04      	ldr	r3, [sp, #16]
 800b2fc:	46ca      	mov	sl, r9
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1c2      	bne.n	800b288 <_strtod_l+0xa10>
 800b302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b308:	0d1b      	lsrs	r3, r3, #20
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d1bb      	bne.n	800b288 <_strtod_l+0xa10>
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f5 fcd0 	bl	8000cb8 <__aeabi_d2lz>
 800b318:	f7f5 f940 	bl	800059c <__aeabi_l2d>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ffb0 	bl	8000288 <__aeabi_dsub>
 800b328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b32a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b32e:	ea43 0308 	orr.w	r3, r3, r8
 800b332:	4313      	orrs	r3, r2
 800b334:	4606      	mov	r6, r0
 800b336:	460f      	mov	r7, r1
 800b338:	d054      	beq.n	800b3e4 <_strtod_l+0xb6c>
 800b33a:	a339      	add	r3, pc, #228	; (adr r3, 800b420 <_strtod_l+0xba8>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 fbcc 	bl	8000adc <__aeabi_dcmplt>
 800b344:	2800      	cmp	r0, #0
 800b346:	f47f ace5 	bne.w	800ad14 <_strtod_l+0x49c>
 800b34a:	a337      	add	r3, pc, #220	; (adr r3, 800b428 <_strtod_l+0xbb0>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	4630      	mov	r0, r6
 800b352:	4639      	mov	r1, r7
 800b354:	f7f5 fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d095      	beq.n	800b288 <_strtod_l+0xa10>
 800b35c:	e4da      	b.n	800ad14 <_strtod_l+0x49c>
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	b333      	cbz	r3, 800b3b0 <_strtod_l+0xb38>
 800b362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b364:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b368:	d822      	bhi.n	800b3b0 <_strtod_l+0xb38>
 800b36a:	a331      	add	r3, pc, #196	; (adr r3, 800b430 <_strtod_l+0xbb8>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	4630      	mov	r0, r6
 800b372:	4639      	mov	r1, r7
 800b374:	f7f5 fbbc 	bl	8000af0 <__aeabi_dcmple>
 800b378:	b1a0      	cbz	r0, 800b3a4 <_strtod_l+0xb2c>
 800b37a:	4639      	mov	r1, r7
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7f5 fc13 	bl	8000ba8 <__aeabi_d2uiz>
 800b382:	2801      	cmp	r0, #1
 800b384:	bf38      	it	cc
 800b386:	2001      	movcc	r0, #1
 800b388:	f7f5 f8bc 	bl	8000504 <__aeabi_ui2d>
 800b38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b38e:	4606      	mov	r6, r0
 800b390:	460f      	mov	r7, r1
 800b392:	bb23      	cbnz	r3, 800b3de <_strtod_l+0xb66>
 800b394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b398:	9010      	str	r0, [sp, #64]	; 0x40
 800b39a:	9311      	str	r3, [sp, #68]	; 0x44
 800b39c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b3ac:	1a9b      	subs	r3, r3, r2
 800b3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b3b4:	eeb0 0a48 	vmov.f32	s0, s16
 800b3b8:	eef0 0a68 	vmov.f32	s1, s17
 800b3bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b3c0:	f7ff f8fc 	bl	800a5bc <__ulp>
 800b3c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b3c8:	ec53 2b10 	vmov	r2, r3, d0
 800b3cc:	f7f5 f914 	bl	80005f8 <__aeabi_dmul>
 800b3d0:	ec53 2b18 	vmov	r2, r3, d8
 800b3d4:	f7f4 ff5a 	bl	800028c <__adddf3>
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4689      	mov	r9, r1
 800b3dc:	e78d      	b.n	800b2fa <_strtod_l+0xa82>
 800b3de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b3e2:	e7db      	b.n	800b39c <_strtod_l+0xb24>
 800b3e4:	a314      	add	r3, pc, #80	; (adr r3, 800b438 <_strtod_l+0xbc0>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f7f5 fb77 	bl	8000adc <__aeabi_dcmplt>
 800b3ee:	e7b3      	b.n	800b358 <_strtod_l+0xae0>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b3f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	f7ff ba7c 	b.w	800a8f6 <_strtod_l+0x7e>
 800b3fe:	2a65      	cmp	r2, #101	; 0x65
 800b400:	f43f ab75 	beq.w	800aaee <_strtod_l+0x276>
 800b404:	2a45      	cmp	r2, #69	; 0x45
 800b406:	f43f ab72 	beq.w	800aaee <_strtod_l+0x276>
 800b40a:	2301      	movs	r3, #1
 800b40c:	f7ff bbaa 	b.w	800ab64 <_strtod_l+0x2ec>
 800b410:	00000000 	.word	0x00000000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	00000000 	.word	0x00000000
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	94a03595 	.word	0x94a03595
 800b424:	3fdfffff 	.word	0x3fdfffff
 800b428:	35afe535 	.word	0x35afe535
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	ffc00000 	.word	0xffc00000
 800b434:	41dfffff 	.word	0x41dfffff
 800b438:	94a03595 	.word	0x94a03595
 800b43c:	3fcfffff 	.word	0x3fcfffff
 800b440:	3ff00000 	.word	0x3ff00000
 800b444:	3fe00000 	.word	0x3fe00000
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	7fe00000 	.word	0x7fe00000
 800b450:	7c9fffff 	.word	0x7c9fffff
 800b454:	7fefffff 	.word	0x7fefffff

0800b458 <_strtod_r>:
 800b458:	4b01      	ldr	r3, [pc, #4]	; (800b460 <_strtod_r+0x8>)
 800b45a:	f7ff ba0d 	b.w	800a878 <_strtod_l>
 800b45e:	bf00      	nop
 800b460:	20000068 	.word	0x20000068

0800b464 <_strtol_l.constprop.0>:
 800b464:	2b01      	cmp	r3, #1
 800b466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b46a:	d001      	beq.n	800b470 <_strtol_l.constprop.0+0xc>
 800b46c:	2b24      	cmp	r3, #36	; 0x24
 800b46e:	d906      	bls.n	800b47e <_strtol_l.constprop.0+0x1a>
 800b470:	f7fd fd8a 	bl	8008f88 <__errno>
 800b474:	2316      	movs	r3, #22
 800b476:	6003      	str	r3, [r0, #0]
 800b478:	2000      	movs	r0, #0
 800b47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b564 <_strtol_l.constprop.0+0x100>
 800b482:	460d      	mov	r5, r1
 800b484:	462e      	mov	r6, r5
 800b486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b48a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b48e:	f017 0708 	ands.w	r7, r7, #8
 800b492:	d1f7      	bne.n	800b484 <_strtol_l.constprop.0+0x20>
 800b494:	2c2d      	cmp	r4, #45	; 0x2d
 800b496:	d132      	bne.n	800b4fe <_strtol_l.constprop.0+0x9a>
 800b498:	782c      	ldrb	r4, [r5, #0]
 800b49a:	2701      	movs	r7, #1
 800b49c:	1cb5      	adds	r5, r6, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d05b      	beq.n	800b55a <_strtol_l.constprop.0+0xf6>
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d109      	bne.n	800b4ba <_strtol_l.constprop.0+0x56>
 800b4a6:	2c30      	cmp	r4, #48	; 0x30
 800b4a8:	d107      	bne.n	800b4ba <_strtol_l.constprop.0+0x56>
 800b4aa:	782c      	ldrb	r4, [r5, #0]
 800b4ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4b0:	2c58      	cmp	r4, #88	; 0x58
 800b4b2:	d14d      	bne.n	800b550 <_strtol_l.constprop.0+0xec>
 800b4b4:	786c      	ldrb	r4, [r5, #1]
 800b4b6:	2310      	movs	r3, #16
 800b4b8:	3502      	adds	r5, #2
 800b4ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4be:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4c2:	f04f 0e00 	mov.w	lr, #0
 800b4c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4ca:	4676      	mov	r6, lr
 800b4cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b4d4:	f1bc 0f09 	cmp.w	ip, #9
 800b4d8:	d816      	bhi.n	800b508 <_strtol_l.constprop.0+0xa4>
 800b4da:	4664      	mov	r4, ip
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	dd24      	ble.n	800b52a <_strtol_l.constprop.0+0xc6>
 800b4e0:	f1be 3fff 	cmp.w	lr, #4294967295
 800b4e4:	d008      	beq.n	800b4f8 <_strtol_l.constprop.0+0x94>
 800b4e6:	45b1      	cmp	r9, r6
 800b4e8:	d31c      	bcc.n	800b524 <_strtol_l.constprop.0+0xc0>
 800b4ea:	d101      	bne.n	800b4f0 <_strtol_l.constprop.0+0x8c>
 800b4ec:	45a2      	cmp	sl, r4
 800b4ee:	db19      	blt.n	800b524 <_strtol_l.constprop.0+0xc0>
 800b4f0:	fb06 4603 	mla	r6, r6, r3, r4
 800b4f4:	f04f 0e01 	mov.w	lr, #1
 800b4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4fc:	e7e8      	b.n	800b4d0 <_strtol_l.constprop.0+0x6c>
 800b4fe:	2c2b      	cmp	r4, #43	; 0x2b
 800b500:	bf04      	itt	eq
 800b502:	782c      	ldrbeq	r4, [r5, #0]
 800b504:	1cb5      	addeq	r5, r6, #2
 800b506:	e7ca      	b.n	800b49e <_strtol_l.constprop.0+0x3a>
 800b508:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b50c:	f1bc 0f19 	cmp.w	ip, #25
 800b510:	d801      	bhi.n	800b516 <_strtol_l.constprop.0+0xb2>
 800b512:	3c37      	subs	r4, #55	; 0x37
 800b514:	e7e2      	b.n	800b4dc <_strtol_l.constprop.0+0x78>
 800b516:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b51a:	f1bc 0f19 	cmp.w	ip, #25
 800b51e:	d804      	bhi.n	800b52a <_strtol_l.constprop.0+0xc6>
 800b520:	3c57      	subs	r4, #87	; 0x57
 800b522:	e7db      	b.n	800b4dc <_strtol_l.constprop.0+0x78>
 800b524:	f04f 3eff 	mov.w	lr, #4294967295
 800b528:	e7e6      	b.n	800b4f8 <_strtol_l.constprop.0+0x94>
 800b52a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b52e:	d105      	bne.n	800b53c <_strtol_l.constprop.0+0xd8>
 800b530:	2322      	movs	r3, #34	; 0x22
 800b532:	6003      	str	r3, [r0, #0]
 800b534:	4646      	mov	r6, r8
 800b536:	b942      	cbnz	r2, 800b54a <_strtol_l.constprop.0+0xe6>
 800b538:	4630      	mov	r0, r6
 800b53a:	e79e      	b.n	800b47a <_strtol_l.constprop.0+0x16>
 800b53c:	b107      	cbz	r7, 800b540 <_strtol_l.constprop.0+0xdc>
 800b53e:	4276      	negs	r6, r6
 800b540:	2a00      	cmp	r2, #0
 800b542:	d0f9      	beq.n	800b538 <_strtol_l.constprop.0+0xd4>
 800b544:	f1be 0f00 	cmp.w	lr, #0
 800b548:	d000      	beq.n	800b54c <_strtol_l.constprop.0+0xe8>
 800b54a:	1e69      	subs	r1, r5, #1
 800b54c:	6011      	str	r1, [r2, #0]
 800b54e:	e7f3      	b.n	800b538 <_strtol_l.constprop.0+0xd4>
 800b550:	2430      	movs	r4, #48	; 0x30
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1b1      	bne.n	800b4ba <_strtol_l.constprop.0+0x56>
 800b556:	2308      	movs	r3, #8
 800b558:	e7af      	b.n	800b4ba <_strtol_l.constprop.0+0x56>
 800b55a:	2c30      	cmp	r4, #48	; 0x30
 800b55c:	d0a5      	beq.n	800b4aa <_strtol_l.constprop.0+0x46>
 800b55e:	230a      	movs	r3, #10
 800b560:	e7ab      	b.n	800b4ba <_strtol_l.constprop.0+0x56>
 800b562:	bf00      	nop
 800b564:	0800ca61 	.word	0x0800ca61

0800b568 <_strtol_r>:
 800b568:	f7ff bf7c 	b.w	800b464 <_strtol_l.constprop.0>

0800b56c <__ssputs_r>:
 800b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	688e      	ldr	r6, [r1, #8]
 800b572:	461f      	mov	r7, r3
 800b574:	42be      	cmp	r6, r7
 800b576:	680b      	ldr	r3, [r1, #0]
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4690      	mov	r8, r2
 800b57e:	d82c      	bhi.n	800b5da <__ssputs_r+0x6e>
 800b580:	898a      	ldrh	r2, [r1, #12]
 800b582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b586:	d026      	beq.n	800b5d6 <__ssputs_r+0x6a>
 800b588:	6965      	ldr	r5, [r4, #20]
 800b58a:	6909      	ldr	r1, [r1, #16]
 800b58c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b590:	eba3 0901 	sub.w	r9, r3, r1
 800b594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b598:	1c7b      	adds	r3, r7, #1
 800b59a:	444b      	add	r3, r9
 800b59c:	106d      	asrs	r5, r5, #1
 800b59e:	429d      	cmp	r5, r3
 800b5a0:	bf38      	it	cc
 800b5a2:	461d      	movcc	r5, r3
 800b5a4:	0553      	lsls	r3, r2, #21
 800b5a6:	d527      	bpl.n	800b5f8 <__ssputs_r+0x8c>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7fe fc0f 	bl	8009dcc <_malloc_r>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	b360      	cbz	r0, 800b60c <__ssputs_r+0xa0>
 800b5b2:	6921      	ldr	r1, [r4, #16]
 800b5b4:	464a      	mov	r2, r9
 800b5b6:	f000 fa1b 	bl	800b9f0 <memcpy>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	6126      	str	r6, [r4, #16]
 800b5c8:	6165      	str	r5, [r4, #20]
 800b5ca:	444e      	add	r6, r9
 800b5cc:	eba5 0509 	sub.w	r5, r5, r9
 800b5d0:	6026      	str	r6, [r4, #0]
 800b5d2:	60a5      	str	r5, [r4, #8]
 800b5d4:	463e      	mov	r6, r7
 800b5d6:	42be      	cmp	r6, r7
 800b5d8:	d900      	bls.n	800b5dc <__ssputs_r+0x70>
 800b5da:	463e      	mov	r6, r7
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	4632      	mov	r2, r6
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	f000 f9c9 	bl	800b978 <memmove>
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	1b9b      	subs	r3, r3, r6
 800b5ea:	60a3      	str	r3, [r4, #8]
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	4433      	add	r3, r6
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	f000 fdae 	bl	800c15a <_realloc_r>
 800b5fe:	4606      	mov	r6, r0
 800b600:	2800      	cmp	r0, #0
 800b602:	d1e0      	bne.n	800b5c6 <__ssputs_r+0x5a>
 800b604:	6921      	ldr	r1, [r4, #16]
 800b606:	4650      	mov	r0, sl
 800b608:	f7fe fb6c 	bl	8009ce4 <_free_r>
 800b60c:	230c      	movs	r3, #12
 800b60e:	f8ca 3000 	str.w	r3, [sl]
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	e7e9      	b.n	800b5f4 <__ssputs_r+0x88>

0800b620 <_svfiprintf_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	4698      	mov	r8, r3
 800b626:	898b      	ldrh	r3, [r1, #12]
 800b628:	061b      	lsls	r3, r3, #24
 800b62a:	b09d      	sub	sp, #116	; 0x74
 800b62c:	4607      	mov	r7, r0
 800b62e:	460d      	mov	r5, r1
 800b630:	4614      	mov	r4, r2
 800b632:	d50e      	bpl.n	800b652 <_svfiprintf_r+0x32>
 800b634:	690b      	ldr	r3, [r1, #16]
 800b636:	b963      	cbnz	r3, 800b652 <_svfiprintf_r+0x32>
 800b638:	2140      	movs	r1, #64	; 0x40
 800b63a:	f7fe fbc7 	bl	8009dcc <_malloc_r>
 800b63e:	6028      	str	r0, [r5, #0]
 800b640:	6128      	str	r0, [r5, #16]
 800b642:	b920      	cbnz	r0, 800b64e <_svfiprintf_r+0x2e>
 800b644:	230c      	movs	r3, #12
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	e0d0      	b.n	800b7f0 <_svfiprintf_r+0x1d0>
 800b64e:	2340      	movs	r3, #64	; 0x40
 800b650:	616b      	str	r3, [r5, #20]
 800b652:	2300      	movs	r3, #0
 800b654:	9309      	str	r3, [sp, #36]	; 0x24
 800b656:	2320      	movs	r3, #32
 800b658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b65c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b660:	2330      	movs	r3, #48	; 0x30
 800b662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b808 <_svfiprintf_r+0x1e8>
 800b666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b66a:	f04f 0901 	mov.w	r9, #1
 800b66e:	4623      	mov	r3, r4
 800b670:	469a      	mov	sl, r3
 800b672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b676:	b10a      	cbz	r2, 800b67c <_svfiprintf_r+0x5c>
 800b678:	2a25      	cmp	r2, #37	; 0x25
 800b67a:	d1f9      	bne.n	800b670 <_svfiprintf_r+0x50>
 800b67c:	ebba 0b04 	subs.w	fp, sl, r4
 800b680:	d00b      	beq.n	800b69a <_svfiprintf_r+0x7a>
 800b682:	465b      	mov	r3, fp
 800b684:	4622      	mov	r2, r4
 800b686:	4629      	mov	r1, r5
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff ff6f 	bl	800b56c <__ssputs_r>
 800b68e:	3001      	adds	r0, #1
 800b690:	f000 80a9 	beq.w	800b7e6 <_svfiprintf_r+0x1c6>
 800b694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b696:	445a      	add	r2, fp
 800b698:	9209      	str	r2, [sp, #36]	; 0x24
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 80a1 	beq.w	800b7e6 <_svfiprintf_r+0x1c6>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ae:	f10a 0a01 	add.w	sl, sl, #1
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	9307      	str	r3, [sp, #28]
 800b6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b6bc:	4654      	mov	r4, sl
 800b6be:	2205      	movs	r2, #5
 800b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c4:	4850      	ldr	r0, [pc, #320]	; (800b808 <_svfiprintf_r+0x1e8>)
 800b6c6:	f7f4 fd83 	bl	80001d0 <memchr>
 800b6ca:	9a04      	ldr	r2, [sp, #16]
 800b6cc:	b9d8      	cbnz	r0, 800b706 <_svfiprintf_r+0xe6>
 800b6ce:	06d0      	lsls	r0, r2, #27
 800b6d0:	bf44      	itt	mi
 800b6d2:	2320      	movmi	r3, #32
 800b6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d8:	0711      	lsls	r1, r2, #28
 800b6da:	bf44      	itt	mi
 800b6dc:	232b      	movmi	r3, #43	; 0x2b
 800b6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e8:	d015      	beq.n	800b716 <_svfiprintf_r+0xf6>
 800b6ea:	9a07      	ldr	r2, [sp, #28]
 800b6ec:	4654      	mov	r4, sl
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f04f 0c0a 	mov.w	ip, #10
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6fa:	3b30      	subs	r3, #48	; 0x30
 800b6fc:	2b09      	cmp	r3, #9
 800b6fe:	d94d      	bls.n	800b79c <_svfiprintf_r+0x17c>
 800b700:	b1b0      	cbz	r0, 800b730 <_svfiprintf_r+0x110>
 800b702:	9207      	str	r2, [sp, #28]
 800b704:	e014      	b.n	800b730 <_svfiprintf_r+0x110>
 800b706:	eba0 0308 	sub.w	r3, r0, r8
 800b70a:	fa09 f303 	lsl.w	r3, r9, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	46a2      	mov	sl, r4
 800b714:	e7d2      	b.n	800b6bc <_svfiprintf_r+0x9c>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	1d19      	adds	r1, r3, #4
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	9103      	str	r1, [sp, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bfbb      	ittet	lt
 800b722:	425b      	neglt	r3, r3
 800b724:	f042 0202 	orrlt.w	r2, r2, #2
 800b728:	9307      	strge	r3, [sp, #28]
 800b72a:	9307      	strlt	r3, [sp, #28]
 800b72c:	bfb8      	it	lt
 800b72e:	9204      	strlt	r2, [sp, #16]
 800b730:	7823      	ldrb	r3, [r4, #0]
 800b732:	2b2e      	cmp	r3, #46	; 0x2e
 800b734:	d10c      	bne.n	800b750 <_svfiprintf_r+0x130>
 800b736:	7863      	ldrb	r3, [r4, #1]
 800b738:	2b2a      	cmp	r3, #42	; 0x2a
 800b73a:	d134      	bne.n	800b7a6 <_svfiprintf_r+0x186>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	1d1a      	adds	r2, r3, #4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	9203      	str	r2, [sp, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfb8      	it	lt
 800b748:	f04f 33ff 	movlt.w	r3, #4294967295
 800b74c:	3402      	adds	r4, #2
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b818 <_svfiprintf_r+0x1f8>
 800b754:	7821      	ldrb	r1, [r4, #0]
 800b756:	2203      	movs	r2, #3
 800b758:	4650      	mov	r0, sl
 800b75a:	f7f4 fd39 	bl	80001d0 <memchr>
 800b75e:	b138      	cbz	r0, 800b770 <_svfiprintf_r+0x150>
 800b760:	9b04      	ldr	r3, [sp, #16]
 800b762:	eba0 000a 	sub.w	r0, r0, sl
 800b766:	2240      	movs	r2, #64	; 0x40
 800b768:	4082      	lsls	r2, r0
 800b76a:	4313      	orrs	r3, r2
 800b76c:	3401      	adds	r4, #1
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b774:	4825      	ldr	r0, [pc, #148]	; (800b80c <_svfiprintf_r+0x1ec>)
 800b776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b77a:	2206      	movs	r2, #6
 800b77c:	f7f4 fd28 	bl	80001d0 <memchr>
 800b780:	2800      	cmp	r0, #0
 800b782:	d038      	beq.n	800b7f6 <_svfiprintf_r+0x1d6>
 800b784:	4b22      	ldr	r3, [pc, #136]	; (800b810 <_svfiprintf_r+0x1f0>)
 800b786:	bb1b      	cbnz	r3, 800b7d0 <_svfiprintf_r+0x1b0>
 800b788:	9b03      	ldr	r3, [sp, #12]
 800b78a:	3307      	adds	r3, #7
 800b78c:	f023 0307 	bic.w	r3, r3, #7
 800b790:	3308      	adds	r3, #8
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b796:	4433      	add	r3, r6
 800b798:	9309      	str	r3, [sp, #36]	; 0x24
 800b79a:	e768      	b.n	800b66e <_svfiprintf_r+0x4e>
 800b79c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	e7a6      	b.n	800b6f4 <_svfiprintf_r+0xd4>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	3401      	adds	r4, #1
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	f04f 0c0a 	mov.w	ip, #10
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b8:	3a30      	subs	r2, #48	; 0x30
 800b7ba:	2a09      	cmp	r2, #9
 800b7bc:	d903      	bls.n	800b7c6 <_svfiprintf_r+0x1a6>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0c6      	beq.n	800b750 <_svfiprintf_r+0x130>
 800b7c2:	9105      	str	r1, [sp, #20]
 800b7c4:	e7c4      	b.n	800b750 <_svfiprintf_r+0x130>
 800b7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e7f0      	b.n	800b7b2 <_svfiprintf_r+0x192>
 800b7d0:	ab03      	add	r3, sp, #12
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	462a      	mov	r2, r5
 800b7d6:	4b0f      	ldr	r3, [pc, #60]	; (800b814 <_svfiprintf_r+0x1f4>)
 800b7d8:	a904      	add	r1, sp, #16
 800b7da:	4638      	mov	r0, r7
 800b7dc:	f7fc fc86 	bl	80080ec <_printf_float>
 800b7e0:	1c42      	adds	r2, r0, #1
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	d1d6      	bne.n	800b794 <_svfiprintf_r+0x174>
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	065b      	lsls	r3, r3, #25
 800b7ea:	f53f af2d 	bmi.w	800b648 <_svfiprintf_r+0x28>
 800b7ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7f0:	b01d      	add	sp, #116	; 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4b05      	ldr	r3, [pc, #20]	; (800b814 <_svfiprintf_r+0x1f4>)
 800b7fe:	a904      	add	r1, sp, #16
 800b800:	4638      	mov	r0, r7
 800b802:	f7fc ff17 	bl	8008634 <_printf_i>
 800b806:	e7eb      	b.n	800b7e0 <_svfiprintf_r+0x1c0>
 800b808:	0800cb61 	.word	0x0800cb61
 800b80c:	0800cb6b 	.word	0x0800cb6b
 800b810:	080080ed 	.word	0x080080ed
 800b814:	0800b56d 	.word	0x0800b56d
 800b818:	0800cb67 	.word	0x0800cb67

0800b81c <__sflush_r>:
 800b81c:	898a      	ldrh	r2, [r1, #12]
 800b81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b822:	4605      	mov	r5, r0
 800b824:	0710      	lsls	r0, r2, #28
 800b826:	460c      	mov	r4, r1
 800b828:	d458      	bmi.n	800b8dc <__sflush_r+0xc0>
 800b82a:	684b      	ldr	r3, [r1, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dc05      	bgt.n	800b83c <__sflush_r+0x20>
 800b830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	dc02      	bgt.n	800b83c <__sflush_r+0x20>
 800b836:	2000      	movs	r0, #0
 800b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b83e:	2e00      	cmp	r6, #0
 800b840:	d0f9      	beq.n	800b836 <__sflush_r+0x1a>
 800b842:	2300      	movs	r3, #0
 800b844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b848:	682f      	ldr	r7, [r5, #0]
 800b84a:	6a21      	ldr	r1, [r4, #32]
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	d032      	beq.n	800b8b6 <__sflush_r+0x9a>
 800b850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	075a      	lsls	r2, r3, #29
 800b856:	d505      	bpl.n	800b864 <__sflush_r+0x48>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	1ac0      	subs	r0, r0, r3
 800b85c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b85e:	b10b      	cbz	r3, 800b864 <__sflush_r+0x48>
 800b860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b862:	1ac0      	subs	r0, r0, r3
 800b864:	2300      	movs	r3, #0
 800b866:	4602      	mov	r2, r0
 800b868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b86a:	6a21      	ldr	r1, [r4, #32]
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	d106      	bne.n	800b884 <__sflush_r+0x68>
 800b876:	6829      	ldr	r1, [r5, #0]
 800b878:	291d      	cmp	r1, #29
 800b87a:	d82b      	bhi.n	800b8d4 <__sflush_r+0xb8>
 800b87c:	4a29      	ldr	r2, [pc, #164]	; (800b924 <__sflush_r+0x108>)
 800b87e:	410a      	asrs	r2, r1
 800b880:	07d6      	lsls	r6, r2, #31
 800b882:	d427      	bmi.n	800b8d4 <__sflush_r+0xb8>
 800b884:	2200      	movs	r2, #0
 800b886:	6062      	str	r2, [r4, #4]
 800b888:	04d9      	lsls	r1, r3, #19
 800b88a:	6922      	ldr	r2, [r4, #16]
 800b88c:	6022      	str	r2, [r4, #0]
 800b88e:	d504      	bpl.n	800b89a <__sflush_r+0x7e>
 800b890:	1c42      	adds	r2, r0, #1
 800b892:	d101      	bne.n	800b898 <__sflush_r+0x7c>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b903      	cbnz	r3, 800b89a <__sflush_r+0x7e>
 800b898:	6560      	str	r0, [r4, #84]	; 0x54
 800b89a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b89c:	602f      	str	r7, [r5, #0]
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d0c9      	beq.n	800b836 <__sflush_r+0x1a>
 800b8a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8a6:	4299      	cmp	r1, r3
 800b8a8:	d002      	beq.n	800b8b0 <__sflush_r+0x94>
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f7fe fa1a 	bl	8009ce4 <_free_r>
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	6360      	str	r0, [r4, #52]	; 0x34
 800b8b4:	e7c0      	b.n	800b838 <__sflush_r+0x1c>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b0      	blx	r6
 800b8bc:	1c41      	adds	r1, r0, #1
 800b8be:	d1c8      	bne.n	800b852 <__sflush_r+0x36>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0c5      	beq.n	800b852 <__sflush_r+0x36>
 800b8c6:	2b1d      	cmp	r3, #29
 800b8c8:	d001      	beq.n	800b8ce <__sflush_r+0xb2>
 800b8ca:	2b16      	cmp	r3, #22
 800b8cc:	d101      	bne.n	800b8d2 <__sflush_r+0xb6>
 800b8ce:	602f      	str	r7, [r5, #0]
 800b8d0:	e7b1      	b.n	800b836 <__sflush_r+0x1a>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	e7ad      	b.n	800b838 <__sflush_r+0x1c>
 800b8dc:	690f      	ldr	r7, [r1, #16]
 800b8de:	2f00      	cmp	r7, #0
 800b8e0:	d0a9      	beq.n	800b836 <__sflush_r+0x1a>
 800b8e2:	0793      	lsls	r3, r2, #30
 800b8e4:	680e      	ldr	r6, [r1, #0]
 800b8e6:	bf08      	it	eq
 800b8e8:	694b      	ldreq	r3, [r1, #20]
 800b8ea:	600f      	str	r7, [r1, #0]
 800b8ec:	bf18      	it	ne
 800b8ee:	2300      	movne	r3, #0
 800b8f0:	eba6 0807 	sub.w	r8, r6, r7
 800b8f4:	608b      	str	r3, [r1, #8]
 800b8f6:	f1b8 0f00 	cmp.w	r8, #0
 800b8fa:	dd9c      	ble.n	800b836 <__sflush_r+0x1a>
 800b8fc:	6a21      	ldr	r1, [r4, #32]
 800b8fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b900:	4643      	mov	r3, r8
 800b902:	463a      	mov	r2, r7
 800b904:	4628      	mov	r0, r5
 800b906:	47b0      	blx	r6
 800b908:	2800      	cmp	r0, #0
 800b90a:	dc06      	bgt.n	800b91a <__sflush_r+0xfe>
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e78e      	b.n	800b838 <__sflush_r+0x1c>
 800b91a:	4407      	add	r7, r0
 800b91c:	eba8 0800 	sub.w	r8, r8, r0
 800b920:	e7e9      	b.n	800b8f6 <__sflush_r+0xda>
 800b922:	bf00      	nop
 800b924:	dfbffffe 	.word	0xdfbffffe

0800b928 <_fflush_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	690b      	ldr	r3, [r1, #16]
 800b92c:	4605      	mov	r5, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	b913      	cbnz	r3, 800b938 <_fflush_r+0x10>
 800b932:	2500      	movs	r5, #0
 800b934:	4628      	mov	r0, r5
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	b118      	cbz	r0, 800b942 <_fflush_r+0x1a>
 800b93a:	6a03      	ldr	r3, [r0, #32]
 800b93c:	b90b      	cbnz	r3, 800b942 <_fflush_r+0x1a>
 800b93e:	f7fd fa37 	bl	8008db0 <__sinit>
 800b942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0f3      	beq.n	800b932 <_fflush_r+0xa>
 800b94a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b94c:	07d0      	lsls	r0, r2, #31
 800b94e:	d404      	bmi.n	800b95a <_fflush_r+0x32>
 800b950:	0599      	lsls	r1, r3, #22
 800b952:	d402      	bmi.n	800b95a <_fflush_r+0x32>
 800b954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b956:	f7fd fb42 	bl	8008fde <__retarget_lock_acquire_recursive>
 800b95a:	4628      	mov	r0, r5
 800b95c:	4621      	mov	r1, r4
 800b95e:	f7ff ff5d 	bl	800b81c <__sflush_r>
 800b962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b964:	07da      	lsls	r2, r3, #31
 800b966:	4605      	mov	r5, r0
 800b968:	d4e4      	bmi.n	800b934 <_fflush_r+0xc>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	059b      	lsls	r3, r3, #22
 800b96e:	d4e1      	bmi.n	800b934 <_fflush_r+0xc>
 800b970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b972:	f7fd fb35 	bl	8008fe0 <__retarget_lock_release_recursive>
 800b976:	e7dd      	b.n	800b934 <_fflush_r+0xc>

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4402      	add	r2, r0
 800b99a:	4601      	mov	r1, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <strncmp>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	b16a      	cbz	r2, 800b9cc <strncmp+0x20>
 800b9b0:	3901      	subs	r1, #1
 800b9b2:	1884      	adds	r4, r0, r2
 800b9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d103      	bne.n	800b9c8 <strncmp+0x1c>
 800b9c0:	42a0      	cmp	r0, r4
 800b9c2:	d001      	beq.n	800b9c8 <strncmp+0x1c>
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d1f5      	bne.n	800b9b4 <strncmp+0x8>
 800b9c8:	1ad0      	subs	r0, r2, r3
 800b9ca:	bd10      	pop	{r4, pc}
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	e7fc      	b.n	800b9ca <strncmp+0x1e>

0800b9d0 <_sbrk_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d06      	ldr	r5, [pc, #24]	; (800b9ec <_sbrk_r+0x1c>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	f7f5 fef2 	bl	80017c4 <_sbrk>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_sbrk_r+0x1a>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_sbrk_r+0x1a>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	20000554 	.word	0x20000554

0800b9f0 <memcpy>:
 800b9f0:	440a      	add	r2, r1
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9f8:	d100      	bne.n	800b9fc <memcpy+0xc>
 800b9fa:	4770      	bx	lr
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d1f9      	bne.n	800b9fe <memcpy+0xe>
 800ba0a:	bd10      	pop	{r4, pc}
 800ba0c:	0000      	movs	r0, r0
	...

0800ba10 <nan>:
 800ba10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba18 <nan+0x8>
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	7ff80000 	.word	0x7ff80000

0800ba20 <__assert_func>:
 800ba20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba22:	4614      	mov	r4, r2
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <__assert_func+0x2c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	68d8      	ldr	r0, [r3, #12]
 800ba2e:	b14c      	cbz	r4, 800ba44 <__assert_func+0x24>
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <__assert_func+0x30>)
 800ba32:	9100      	str	r1, [sp, #0]
 800ba34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba38:	4906      	ldr	r1, [pc, #24]	; (800ba54 <__assert_func+0x34>)
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	f000 fbca 	bl	800c1d4 <fiprintf>
 800ba40:	f000 fbda 	bl	800c1f8 <abort>
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <__assert_func+0x38>)
 800ba46:	461c      	mov	r4, r3
 800ba48:	e7f3      	b.n	800ba32 <__assert_func+0x12>
 800ba4a:	bf00      	nop
 800ba4c:	20000064 	.word	0x20000064
 800ba50:	0800cb7a 	.word	0x0800cb7a
 800ba54:	0800cb87 	.word	0x0800cb87
 800ba58:	0800cbb5 	.word	0x0800cbb5

0800ba5c <_calloc_r>:
 800ba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ba62:	b94c      	cbnz	r4, 800ba78 <_calloc_r+0x1c>
 800ba64:	4611      	mov	r1, r2
 800ba66:	9201      	str	r2, [sp, #4]
 800ba68:	f7fe f9b0 	bl	8009dcc <_malloc_r>
 800ba6c:	9a01      	ldr	r2, [sp, #4]
 800ba6e:	4605      	mov	r5, r0
 800ba70:	b930      	cbnz	r0, 800ba80 <_calloc_r+0x24>
 800ba72:	4628      	mov	r0, r5
 800ba74:	b003      	add	sp, #12
 800ba76:	bd30      	pop	{r4, r5, pc}
 800ba78:	220c      	movs	r2, #12
 800ba7a:	6002      	str	r2, [r0, #0]
 800ba7c:	2500      	movs	r5, #0
 800ba7e:	e7f8      	b.n	800ba72 <_calloc_r+0x16>
 800ba80:	4621      	mov	r1, r4
 800ba82:	f7fd fa2e 	bl	8008ee2 <memset>
 800ba86:	e7f4      	b.n	800ba72 <_calloc_r+0x16>

0800ba88 <rshift>:
 800ba88:	6903      	ldr	r3, [r0, #16]
 800ba8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba96:	f100 0414 	add.w	r4, r0, #20
 800ba9a:	dd45      	ble.n	800bb28 <rshift+0xa0>
 800ba9c:	f011 011f 	ands.w	r1, r1, #31
 800baa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800baa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800baa8:	d10c      	bne.n	800bac4 <rshift+0x3c>
 800baaa:	f100 0710 	add.w	r7, r0, #16
 800baae:	4629      	mov	r1, r5
 800bab0:	42b1      	cmp	r1, r6
 800bab2:	d334      	bcc.n	800bb1e <rshift+0x96>
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	1eea      	subs	r2, r5, #3
 800baba:	4296      	cmp	r6, r2
 800babc:	bf38      	it	cc
 800babe:	2300      	movcc	r3, #0
 800bac0:	4423      	add	r3, r4
 800bac2:	e015      	b.n	800baf0 <rshift+0x68>
 800bac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bac8:	f1c1 0820 	rsb	r8, r1, #32
 800bacc:	40cf      	lsrs	r7, r1
 800bace:	f105 0e04 	add.w	lr, r5, #4
 800bad2:	46a1      	mov	r9, r4
 800bad4:	4576      	cmp	r6, lr
 800bad6:	46f4      	mov	ip, lr
 800bad8:	d815      	bhi.n	800bb06 <rshift+0x7e>
 800bada:	1a9a      	subs	r2, r3, r2
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	3a04      	subs	r2, #4
 800bae0:	3501      	adds	r5, #1
 800bae2:	42ae      	cmp	r6, r5
 800bae4:	bf38      	it	cc
 800bae6:	2200      	movcc	r2, #0
 800bae8:	18a3      	adds	r3, r4, r2
 800baea:	50a7      	str	r7, [r4, r2]
 800baec:	b107      	cbz	r7, 800baf0 <rshift+0x68>
 800baee:	3304      	adds	r3, #4
 800baf0:	1b1a      	subs	r2, r3, r4
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800baf8:	bf08      	it	eq
 800bafa:	2300      	moveq	r3, #0
 800bafc:	6102      	str	r2, [r0, #16]
 800bafe:	bf08      	it	eq
 800bb00:	6143      	streq	r3, [r0, #20]
 800bb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb06:	f8dc c000 	ldr.w	ip, [ip]
 800bb0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb0e:	ea4c 0707 	orr.w	r7, ip, r7
 800bb12:	f849 7b04 	str.w	r7, [r9], #4
 800bb16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb1a:	40cf      	lsrs	r7, r1
 800bb1c:	e7da      	b.n	800bad4 <rshift+0x4c>
 800bb1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb22:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb26:	e7c3      	b.n	800bab0 <rshift+0x28>
 800bb28:	4623      	mov	r3, r4
 800bb2a:	e7e1      	b.n	800baf0 <rshift+0x68>

0800bb2c <__hexdig_fun>:
 800bb2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	d802      	bhi.n	800bb3a <__hexdig_fun+0xe>
 800bb34:	3820      	subs	r0, #32
 800bb36:	b2c0      	uxtb	r0, r0
 800bb38:	4770      	bx	lr
 800bb3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	d801      	bhi.n	800bb46 <__hexdig_fun+0x1a>
 800bb42:	3847      	subs	r0, #71	; 0x47
 800bb44:	e7f7      	b.n	800bb36 <__hexdig_fun+0xa>
 800bb46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb4a:	2b05      	cmp	r3, #5
 800bb4c:	d801      	bhi.n	800bb52 <__hexdig_fun+0x26>
 800bb4e:	3827      	subs	r0, #39	; 0x27
 800bb50:	e7f1      	b.n	800bb36 <__hexdig_fun+0xa>
 800bb52:	2000      	movs	r0, #0
 800bb54:	4770      	bx	lr
	...

0800bb58 <__gethex>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4617      	mov	r7, r2
 800bb5e:	680a      	ldr	r2, [r1, #0]
 800bb60:	b085      	sub	sp, #20
 800bb62:	f102 0b02 	add.w	fp, r2, #2
 800bb66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb6e:	4681      	mov	r9, r0
 800bb70:	468a      	mov	sl, r1
 800bb72:	9302      	str	r3, [sp, #8]
 800bb74:	32fe      	adds	r2, #254	; 0xfe
 800bb76:	eb02 030b 	add.w	r3, r2, fp
 800bb7a:	46d8      	mov	r8, fp
 800bb7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	2830      	cmp	r0, #48	; 0x30
 800bb84:	d0f7      	beq.n	800bb76 <__gethex+0x1e>
 800bb86:	f7ff ffd1 	bl	800bb2c <__hexdig_fun>
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d138      	bne.n	800bc02 <__gethex+0xaa>
 800bb90:	49a7      	ldr	r1, [pc, #668]	; (800be30 <__gethex+0x2d8>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7ff ff09 	bl	800b9ac <strncmp>
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d169      	bne.n	800bc74 <__gethex+0x11c>
 800bba0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bba4:	465d      	mov	r5, fp
 800bba6:	f7ff ffc1 	bl	800bb2c <__hexdig_fun>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d064      	beq.n	800bc78 <__gethex+0x120>
 800bbae:	465a      	mov	r2, fp
 800bbb0:	7810      	ldrb	r0, [r2, #0]
 800bbb2:	2830      	cmp	r0, #48	; 0x30
 800bbb4:	4690      	mov	r8, r2
 800bbb6:	f102 0201 	add.w	r2, r2, #1
 800bbba:	d0f9      	beq.n	800bbb0 <__gethex+0x58>
 800bbbc:	f7ff ffb6 	bl	800bb2c <__hexdig_fun>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	fab0 f480 	clz	r4, r0
 800bbc6:	0964      	lsrs	r4, r4, #5
 800bbc8:	465e      	mov	r6, fp
 800bbca:	9301      	str	r3, [sp, #4]
 800bbcc:	4642      	mov	r2, r8
 800bbce:	4615      	mov	r5, r2
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	7828      	ldrb	r0, [r5, #0]
 800bbd4:	f7ff ffaa 	bl	800bb2c <__hexdig_fun>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1f8      	bne.n	800bbce <__gethex+0x76>
 800bbdc:	4994      	ldr	r1, [pc, #592]	; (800be30 <__gethex+0x2d8>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f7ff fee3 	bl	800b9ac <strncmp>
 800bbe6:	b978      	cbnz	r0, 800bc08 <__gethex+0xb0>
 800bbe8:	b946      	cbnz	r6, 800bbfc <__gethex+0xa4>
 800bbea:	1c6e      	adds	r6, r5, #1
 800bbec:	4632      	mov	r2, r6
 800bbee:	4615      	mov	r5, r2
 800bbf0:	3201      	adds	r2, #1
 800bbf2:	7828      	ldrb	r0, [r5, #0]
 800bbf4:	f7ff ff9a 	bl	800bb2c <__hexdig_fun>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d1f8      	bne.n	800bbee <__gethex+0x96>
 800bbfc:	1b73      	subs	r3, r6, r5
 800bbfe:	009e      	lsls	r6, r3, #2
 800bc00:	e004      	b.n	800bc0c <__gethex+0xb4>
 800bc02:	2400      	movs	r4, #0
 800bc04:	4626      	mov	r6, r4
 800bc06:	e7e1      	b.n	800bbcc <__gethex+0x74>
 800bc08:	2e00      	cmp	r6, #0
 800bc0a:	d1f7      	bne.n	800bbfc <__gethex+0xa4>
 800bc0c:	782b      	ldrb	r3, [r5, #0]
 800bc0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc12:	2b50      	cmp	r3, #80	; 0x50
 800bc14:	d13d      	bne.n	800bc92 <__gethex+0x13a>
 800bc16:	786b      	ldrb	r3, [r5, #1]
 800bc18:	2b2b      	cmp	r3, #43	; 0x2b
 800bc1a:	d02f      	beq.n	800bc7c <__gethex+0x124>
 800bc1c:	2b2d      	cmp	r3, #45	; 0x2d
 800bc1e:	d031      	beq.n	800bc84 <__gethex+0x12c>
 800bc20:	1c69      	adds	r1, r5, #1
 800bc22:	f04f 0b00 	mov.w	fp, #0
 800bc26:	7808      	ldrb	r0, [r1, #0]
 800bc28:	f7ff ff80 	bl	800bb2c <__hexdig_fun>
 800bc2c:	1e42      	subs	r2, r0, #1
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	2a18      	cmp	r2, #24
 800bc32:	d82e      	bhi.n	800bc92 <__gethex+0x13a>
 800bc34:	f1a0 0210 	sub.w	r2, r0, #16
 800bc38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc3c:	f7ff ff76 	bl	800bb2c <__hexdig_fun>
 800bc40:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc44:	fa5f fc8c 	uxtb.w	ip, ip
 800bc48:	f1bc 0f18 	cmp.w	ip, #24
 800bc4c:	d91d      	bls.n	800bc8a <__gethex+0x132>
 800bc4e:	f1bb 0f00 	cmp.w	fp, #0
 800bc52:	d000      	beq.n	800bc56 <__gethex+0xfe>
 800bc54:	4252      	negs	r2, r2
 800bc56:	4416      	add	r6, r2
 800bc58:	f8ca 1000 	str.w	r1, [sl]
 800bc5c:	b1dc      	cbz	r4, 800bc96 <__gethex+0x13e>
 800bc5e:	9b01      	ldr	r3, [sp, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bf14      	ite	ne
 800bc64:	f04f 0800 	movne.w	r8, #0
 800bc68:	f04f 0806 	moveq.w	r8, #6
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	b005      	add	sp, #20
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	4645      	mov	r5, r8
 800bc76:	4626      	mov	r6, r4
 800bc78:	2401      	movs	r4, #1
 800bc7a:	e7c7      	b.n	800bc0c <__gethex+0xb4>
 800bc7c:	f04f 0b00 	mov.w	fp, #0
 800bc80:	1ca9      	adds	r1, r5, #2
 800bc82:	e7d0      	b.n	800bc26 <__gethex+0xce>
 800bc84:	f04f 0b01 	mov.w	fp, #1
 800bc88:	e7fa      	b.n	800bc80 <__gethex+0x128>
 800bc8a:	230a      	movs	r3, #10
 800bc8c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc90:	e7d0      	b.n	800bc34 <__gethex+0xdc>
 800bc92:	4629      	mov	r1, r5
 800bc94:	e7e0      	b.n	800bc58 <__gethex+0x100>
 800bc96:	eba5 0308 	sub.w	r3, r5, r8
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	2b07      	cmp	r3, #7
 800bca0:	dc0a      	bgt.n	800bcb8 <__gethex+0x160>
 800bca2:	4648      	mov	r0, r9
 800bca4:	f7fe f91e 	bl	8009ee4 <_Balloc>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	b940      	cbnz	r0, 800bcbe <__gethex+0x166>
 800bcac:	4b61      	ldr	r3, [pc, #388]	; (800be34 <__gethex+0x2dc>)
 800bcae:	4602      	mov	r2, r0
 800bcb0:	21e4      	movs	r1, #228	; 0xe4
 800bcb2:	4861      	ldr	r0, [pc, #388]	; (800be38 <__gethex+0x2e0>)
 800bcb4:	f7ff feb4 	bl	800ba20 <__assert_func>
 800bcb8:	3101      	adds	r1, #1
 800bcba:	105b      	asrs	r3, r3, #1
 800bcbc:	e7ef      	b.n	800bc9e <__gethex+0x146>
 800bcbe:	f100 0a14 	add.w	sl, r0, #20
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	495a      	ldr	r1, [pc, #360]	; (800be30 <__gethex+0x2d8>)
 800bcc6:	f8cd a004 	str.w	sl, [sp, #4]
 800bcca:	469b      	mov	fp, r3
 800bccc:	45a8      	cmp	r8, r5
 800bcce:	d342      	bcc.n	800bd56 <__gethex+0x1fe>
 800bcd0:	9801      	ldr	r0, [sp, #4]
 800bcd2:	f840 bb04 	str.w	fp, [r0], #4
 800bcd6:	eba0 000a 	sub.w	r0, r0, sl
 800bcda:	1080      	asrs	r0, r0, #2
 800bcdc:	6120      	str	r0, [r4, #16]
 800bcde:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bce2:	4658      	mov	r0, fp
 800bce4:	f7fe f9f0 	bl	800a0c8 <__hi0bits>
 800bce8:	683d      	ldr	r5, [r7, #0]
 800bcea:	eba8 0000 	sub.w	r0, r8, r0
 800bcee:	42a8      	cmp	r0, r5
 800bcf0:	dd59      	ble.n	800bda6 <__gethex+0x24e>
 800bcf2:	eba0 0805 	sub.w	r8, r0, r5
 800bcf6:	4641      	mov	r1, r8
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f7fe fd7f 	bl	800a7fc <__any_on>
 800bcfe:	4683      	mov	fp, r0
 800bd00:	b1b8      	cbz	r0, 800bd32 <__gethex+0x1da>
 800bd02:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd06:	1159      	asrs	r1, r3, #5
 800bd08:	f003 021f 	and.w	r2, r3, #31
 800bd0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd10:	f04f 0b01 	mov.w	fp, #1
 800bd14:	fa0b f202 	lsl.w	r2, fp, r2
 800bd18:	420a      	tst	r2, r1
 800bd1a:	d00a      	beq.n	800bd32 <__gethex+0x1da>
 800bd1c:	455b      	cmp	r3, fp
 800bd1e:	dd06      	ble.n	800bd2e <__gethex+0x1d6>
 800bd20:	f1a8 0102 	sub.w	r1, r8, #2
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7fe fd69 	bl	800a7fc <__any_on>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d138      	bne.n	800bda0 <__gethex+0x248>
 800bd2e:	f04f 0b02 	mov.w	fp, #2
 800bd32:	4641      	mov	r1, r8
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7ff fea7 	bl	800ba88 <rshift>
 800bd3a:	4446      	add	r6, r8
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	42b3      	cmp	r3, r6
 800bd40:	da41      	bge.n	800bdc6 <__gethex+0x26e>
 800bd42:	4621      	mov	r1, r4
 800bd44:	4648      	mov	r0, r9
 800bd46:	f7fe f90d 	bl	8009f64 <_Bfree>
 800bd4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bd54:	e78a      	b.n	800bc6c <__gethex+0x114>
 800bd56:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bd5a:	2a2e      	cmp	r2, #46	; 0x2e
 800bd5c:	d014      	beq.n	800bd88 <__gethex+0x230>
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d106      	bne.n	800bd70 <__gethex+0x218>
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	f843 bb04 	str.w	fp, [r3], #4
 800bd68:	f04f 0b00 	mov.w	fp, #0
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	465b      	mov	r3, fp
 800bd70:	7828      	ldrb	r0, [r5, #0]
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	f7ff feda 	bl	800bb2c <__hexdig_fun>
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	f000 000f 	and.w	r0, r0, #15
 800bd7e:	4098      	lsls	r0, r3
 800bd80:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd84:	3304      	adds	r3, #4
 800bd86:	e7a1      	b.n	800bccc <__gethex+0x174>
 800bd88:	45a8      	cmp	r8, r5
 800bd8a:	d8e8      	bhi.n	800bd5e <__gethex+0x206>
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	4628      	mov	r0, r5
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	f7ff fe0b 	bl	800b9ac <strncmp>
 800bd96:	4926      	ldr	r1, [pc, #152]	; (800be30 <__gethex+0x2d8>)
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d1df      	bne.n	800bd5e <__gethex+0x206>
 800bd9e:	e795      	b.n	800bccc <__gethex+0x174>
 800bda0:	f04f 0b03 	mov.w	fp, #3
 800bda4:	e7c5      	b.n	800bd32 <__gethex+0x1da>
 800bda6:	da0b      	bge.n	800bdc0 <__gethex+0x268>
 800bda8:	eba5 0800 	sub.w	r8, r5, r0
 800bdac:	4621      	mov	r1, r4
 800bdae:	4642      	mov	r2, r8
 800bdb0:	4648      	mov	r0, r9
 800bdb2:	f7fe faf1 	bl	800a398 <__lshift>
 800bdb6:	eba6 0608 	sub.w	r6, r6, r8
 800bdba:	4604      	mov	r4, r0
 800bdbc:	f100 0a14 	add.w	sl, r0, #20
 800bdc0:	f04f 0b00 	mov.w	fp, #0
 800bdc4:	e7ba      	b.n	800bd3c <__gethex+0x1e4>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	42b3      	cmp	r3, r6
 800bdca:	dd73      	ble.n	800beb4 <__gethex+0x35c>
 800bdcc:	1b9e      	subs	r6, r3, r6
 800bdce:	42b5      	cmp	r5, r6
 800bdd0:	dc34      	bgt.n	800be3c <__gethex+0x2e4>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d023      	beq.n	800be20 <__gethex+0x2c8>
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d025      	beq.n	800be28 <__gethex+0x2d0>
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d115      	bne.n	800be0c <__gethex+0x2b4>
 800bde0:	42b5      	cmp	r5, r6
 800bde2:	d113      	bne.n	800be0c <__gethex+0x2b4>
 800bde4:	2d01      	cmp	r5, #1
 800bde6:	d10b      	bne.n	800be00 <__gethex+0x2a8>
 800bde8:	9a02      	ldr	r2, [sp, #8]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	2301      	movs	r3, #1
 800bdf0:	6123      	str	r3, [r4, #16]
 800bdf2:	f8ca 3000 	str.w	r3, [sl]
 800bdf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdf8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bdfc:	601c      	str	r4, [r3, #0]
 800bdfe:	e735      	b.n	800bc6c <__gethex+0x114>
 800be00:	1e69      	subs	r1, r5, #1
 800be02:	4620      	mov	r0, r4
 800be04:	f7fe fcfa 	bl	800a7fc <__any_on>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d1ed      	bne.n	800bde8 <__gethex+0x290>
 800be0c:	4621      	mov	r1, r4
 800be0e:	4648      	mov	r0, r9
 800be10:	f7fe f8a8 	bl	8009f64 <_Bfree>
 800be14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be16:	2300      	movs	r3, #0
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800be1e:	e725      	b.n	800bc6c <__gethex+0x114>
 800be20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1f2      	bne.n	800be0c <__gethex+0x2b4>
 800be26:	e7df      	b.n	800bde8 <__gethex+0x290>
 800be28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1dc      	bne.n	800bde8 <__gethex+0x290>
 800be2e:	e7ed      	b.n	800be0c <__gethex+0x2b4>
 800be30:	0800ca0c 	.word	0x0800ca0c
 800be34:	0800c8a1 	.word	0x0800c8a1
 800be38:	0800cbb6 	.word	0x0800cbb6
 800be3c:	f106 38ff 	add.w	r8, r6, #4294967295
 800be40:	f1bb 0f00 	cmp.w	fp, #0
 800be44:	d133      	bne.n	800beae <__gethex+0x356>
 800be46:	f1b8 0f00 	cmp.w	r8, #0
 800be4a:	d004      	beq.n	800be56 <__gethex+0x2fe>
 800be4c:	4641      	mov	r1, r8
 800be4e:	4620      	mov	r0, r4
 800be50:	f7fe fcd4 	bl	800a7fc <__any_on>
 800be54:	4683      	mov	fp, r0
 800be56:	ea4f 1268 	mov.w	r2, r8, asr #5
 800be5a:	2301      	movs	r3, #1
 800be5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be60:	f008 081f 	and.w	r8, r8, #31
 800be64:	fa03 f308 	lsl.w	r3, r3, r8
 800be68:	4213      	tst	r3, r2
 800be6a:	4631      	mov	r1, r6
 800be6c:	4620      	mov	r0, r4
 800be6e:	bf18      	it	ne
 800be70:	f04b 0b02 	orrne.w	fp, fp, #2
 800be74:	1bad      	subs	r5, r5, r6
 800be76:	f7ff fe07 	bl	800ba88 <rshift>
 800be7a:	687e      	ldr	r6, [r7, #4]
 800be7c:	f04f 0802 	mov.w	r8, #2
 800be80:	f1bb 0f00 	cmp.w	fp, #0
 800be84:	d04a      	beq.n	800bf1c <__gethex+0x3c4>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d016      	beq.n	800beba <__gethex+0x362>
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d018      	beq.n	800bec2 <__gethex+0x36a>
 800be90:	2b01      	cmp	r3, #1
 800be92:	d109      	bne.n	800bea8 <__gethex+0x350>
 800be94:	f01b 0f02 	tst.w	fp, #2
 800be98:	d006      	beq.n	800bea8 <__gethex+0x350>
 800be9a:	f8da 3000 	ldr.w	r3, [sl]
 800be9e:	ea4b 0b03 	orr.w	fp, fp, r3
 800bea2:	f01b 0f01 	tst.w	fp, #1
 800bea6:	d10f      	bne.n	800bec8 <__gethex+0x370>
 800bea8:	f048 0810 	orr.w	r8, r8, #16
 800beac:	e036      	b.n	800bf1c <__gethex+0x3c4>
 800beae:	f04f 0b01 	mov.w	fp, #1
 800beb2:	e7d0      	b.n	800be56 <__gethex+0x2fe>
 800beb4:	f04f 0801 	mov.w	r8, #1
 800beb8:	e7e2      	b.n	800be80 <__gethex+0x328>
 800beba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bebc:	f1c3 0301 	rsb	r3, r3, #1
 800bec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d0ef      	beq.n	800bea8 <__gethex+0x350>
 800bec8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800becc:	f104 0214 	add.w	r2, r4, #20
 800bed0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800beda:	2300      	movs	r3, #0
 800bedc:	4694      	mov	ip, r2
 800bede:	f852 1b04 	ldr.w	r1, [r2], #4
 800bee2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bee6:	d01e      	beq.n	800bf26 <__gethex+0x3ce>
 800bee8:	3101      	adds	r1, #1
 800beea:	f8cc 1000 	str.w	r1, [ip]
 800beee:	f1b8 0f02 	cmp.w	r8, #2
 800bef2:	f104 0214 	add.w	r2, r4, #20
 800bef6:	d13d      	bne.n	800bf74 <__gethex+0x41c>
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	3b01      	subs	r3, #1
 800befc:	42ab      	cmp	r3, r5
 800befe:	d10b      	bne.n	800bf18 <__gethex+0x3c0>
 800bf00:	1169      	asrs	r1, r5, #5
 800bf02:	2301      	movs	r3, #1
 800bf04:	f005 051f 	and.w	r5, r5, #31
 800bf08:	fa03 f505 	lsl.w	r5, r3, r5
 800bf0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf10:	421d      	tst	r5, r3
 800bf12:	bf18      	it	ne
 800bf14:	f04f 0801 	movne.w	r8, #1
 800bf18:	f048 0820 	orr.w	r8, r8, #32
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf1e:	601c      	str	r4, [r3, #0]
 800bf20:	9b02      	ldr	r3, [sp, #8]
 800bf22:	601e      	str	r6, [r3, #0]
 800bf24:	e6a2      	b.n	800bc6c <__gethex+0x114>
 800bf26:	4290      	cmp	r0, r2
 800bf28:	f842 3c04 	str.w	r3, [r2, #-4]
 800bf2c:	d8d6      	bhi.n	800bedc <__gethex+0x384>
 800bf2e:	68a2      	ldr	r2, [r4, #8]
 800bf30:	4593      	cmp	fp, r2
 800bf32:	db17      	blt.n	800bf64 <__gethex+0x40c>
 800bf34:	6861      	ldr	r1, [r4, #4]
 800bf36:	4648      	mov	r0, r9
 800bf38:	3101      	adds	r1, #1
 800bf3a:	f7fd ffd3 	bl	8009ee4 <_Balloc>
 800bf3e:	4682      	mov	sl, r0
 800bf40:	b918      	cbnz	r0, 800bf4a <__gethex+0x3f2>
 800bf42:	4b1b      	ldr	r3, [pc, #108]	; (800bfb0 <__gethex+0x458>)
 800bf44:	4602      	mov	r2, r0
 800bf46:	2184      	movs	r1, #132	; 0x84
 800bf48:	e6b3      	b.n	800bcb2 <__gethex+0x15a>
 800bf4a:	6922      	ldr	r2, [r4, #16]
 800bf4c:	3202      	adds	r2, #2
 800bf4e:	f104 010c 	add.w	r1, r4, #12
 800bf52:	0092      	lsls	r2, r2, #2
 800bf54:	300c      	adds	r0, #12
 800bf56:	f7ff fd4b 	bl	800b9f0 <memcpy>
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f7fe f801 	bl	8009f64 <_Bfree>
 800bf62:	4654      	mov	r4, sl
 800bf64:	6922      	ldr	r2, [r4, #16]
 800bf66:	1c51      	adds	r1, r2, #1
 800bf68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf6c:	6121      	str	r1, [r4, #16]
 800bf6e:	2101      	movs	r1, #1
 800bf70:	6151      	str	r1, [r2, #20]
 800bf72:	e7bc      	b.n	800beee <__gethex+0x396>
 800bf74:	6921      	ldr	r1, [r4, #16]
 800bf76:	4559      	cmp	r1, fp
 800bf78:	dd0b      	ble.n	800bf92 <__gethex+0x43a>
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7ff fd83 	bl	800ba88 <rshift>
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	3601      	adds	r6, #1
 800bf86:	42b3      	cmp	r3, r6
 800bf88:	f6ff aedb 	blt.w	800bd42 <__gethex+0x1ea>
 800bf8c:	f04f 0801 	mov.w	r8, #1
 800bf90:	e7c2      	b.n	800bf18 <__gethex+0x3c0>
 800bf92:	f015 051f 	ands.w	r5, r5, #31
 800bf96:	d0f9      	beq.n	800bf8c <__gethex+0x434>
 800bf98:	9b01      	ldr	r3, [sp, #4]
 800bf9a:	441a      	add	r2, r3
 800bf9c:	f1c5 0520 	rsb	r5, r5, #32
 800bfa0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bfa4:	f7fe f890 	bl	800a0c8 <__hi0bits>
 800bfa8:	42a8      	cmp	r0, r5
 800bfaa:	dbe6      	blt.n	800bf7a <__gethex+0x422>
 800bfac:	e7ee      	b.n	800bf8c <__gethex+0x434>
 800bfae:	bf00      	nop
 800bfb0:	0800c8a1 	.word	0x0800c8a1

0800bfb4 <L_shift>:
 800bfb4:	f1c2 0208 	rsb	r2, r2, #8
 800bfb8:	0092      	lsls	r2, r2, #2
 800bfba:	b570      	push	{r4, r5, r6, lr}
 800bfbc:	f1c2 0620 	rsb	r6, r2, #32
 800bfc0:	6843      	ldr	r3, [r0, #4]
 800bfc2:	6804      	ldr	r4, [r0, #0]
 800bfc4:	fa03 f506 	lsl.w	r5, r3, r6
 800bfc8:	432c      	orrs	r4, r5
 800bfca:	40d3      	lsrs	r3, r2
 800bfcc:	6004      	str	r4, [r0, #0]
 800bfce:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfd2:	4288      	cmp	r0, r1
 800bfd4:	d3f4      	bcc.n	800bfc0 <L_shift+0xc>
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <__match>:
 800bfd8:	b530      	push	{r4, r5, lr}
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe2:	b914      	cbnz	r4, 800bfea <__match+0x12>
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	bd30      	pop	{r4, r5, pc}
 800bfea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bff2:	2d19      	cmp	r5, #25
 800bff4:	bf98      	it	ls
 800bff6:	3220      	addls	r2, #32
 800bff8:	42a2      	cmp	r2, r4
 800bffa:	d0f0      	beq.n	800bfde <__match+0x6>
 800bffc:	2000      	movs	r0, #0
 800bffe:	e7f3      	b.n	800bfe8 <__match+0x10>

0800c000 <__hexnan>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	680b      	ldr	r3, [r1, #0]
 800c006:	6801      	ldr	r1, [r0, #0]
 800c008:	115e      	asrs	r6, r3, #5
 800c00a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c00e:	f013 031f 	ands.w	r3, r3, #31
 800c012:	b087      	sub	sp, #28
 800c014:	bf18      	it	ne
 800c016:	3604      	addne	r6, #4
 800c018:	2500      	movs	r5, #0
 800c01a:	1f37      	subs	r7, r6, #4
 800c01c:	4682      	mov	sl, r0
 800c01e:	4690      	mov	r8, r2
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	f846 5c04 	str.w	r5, [r6, #-4]
 800c026:	46b9      	mov	r9, r7
 800c028:	463c      	mov	r4, r7
 800c02a:	9502      	str	r5, [sp, #8]
 800c02c:	46ab      	mov	fp, r5
 800c02e:	784a      	ldrb	r2, [r1, #1]
 800c030:	1c4b      	adds	r3, r1, #1
 800c032:	9303      	str	r3, [sp, #12]
 800c034:	b342      	cbz	r2, 800c088 <__hexnan+0x88>
 800c036:	4610      	mov	r0, r2
 800c038:	9105      	str	r1, [sp, #20]
 800c03a:	9204      	str	r2, [sp, #16]
 800c03c:	f7ff fd76 	bl	800bb2c <__hexdig_fun>
 800c040:	2800      	cmp	r0, #0
 800c042:	d14f      	bne.n	800c0e4 <__hexnan+0xe4>
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	9905      	ldr	r1, [sp, #20]
 800c048:	2a20      	cmp	r2, #32
 800c04a:	d818      	bhi.n	800c07e <__hexnan+0x7e>
 800c04c:	9b02      	ldr	r3, [sp, #8]
 800c04e:	459b      	cmp	fp, r3
 800c050:	dd13      	ble.n	800c07a <__hexnan+0x7a>
 800c052:	454c      	cmp	r4, r9
 800c054:	d206      	bcs.n	800c064 <__hexnan+0x64>
 800c056:	2d07      	cmp	r5, #7
 800c058:	dc04      	bgt.n	800c064 <__hexnan+0x64>
 800c05a:	462a      	mov	r2, r5
 800c05c:	4649      	mov	r1, r9
 800c05e:	4620      	mov	r0, r4
 800c060:	f7ff ffa8 	bl	800bfb4 <L_shift>
 800c064:	4544      	cmp	r4, r8
 800c066:	d950      	bls.n	800c10a <__hexnan+0x10a>
 800c068:	2300      	movs	r3, #0
 800c06a:	f1a4 0904 	sub.w	r9, r4, #4
 800c06e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c072:	f8cd b008 	str.w	fp, [sp, #8]
 800c076:	464c      	mov	r4, r9
 800c078:	461d      	mov	r5, r3
 800c07a:	9903      	ldr	r1, [sp, #12]
 800c07c:	e7d7      	b.n	800c02e <__hexnan+0x2e>
 800c07e:	2a29      	cmp	r2, #41	; 0x29
 800c080:	d155      	bne.n	800c12e <__hexnan+0x12e>
 800c082:	3102      	adds	r1, #2
 800c084:	f8ca 1000 	str.w	r1, [sl]
 800c088:	f1bb 0f00 	cmp.w	fp, #0
 800c08c:	d04f      	beq.n	800c12e <__hexnan+0x12e>
 800c08e:	454c      	cmp	r4, r9
 800c090:	d206      	bcs.n	800c0a0 <__hexnan+0xa0>
 800c092:	2d07      	cmp	r5, #7
 800c094:	dc04      	bgt.n	800c0a0 <__hexnan+0xa0>
 800c096:	462a      	mov	r2, r5
 800c098:	4649      	mov	r1, r9
 800c09a:	4620      	mov	r0, r4
 800c09c:	f7ff ff8a 	bl	800bfb4 <L_shift>
 800c0a0:	4544      	cmp	r4, r8
 800c0a2:	d934      	bls.n	800c10e <__hexnan+0x10e>
 800c0a4:	f1a8 0204 	sub.w	r2, r8, #4
 800c0a8:	4623      	mov	r3, r4
 800c0aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0b2:	429f      	cmp	r7, r3
 800c0b4:	d2f9      	bcs.n	800c0aa <__hexnan+0xaa>
 800c0b6:	1b3b      	subs	r3, r7, r4
 800c0b8:	f023 0303 	bic.w	r3, r3, #3
 800c0bc:	3304      	adds	r3, #4
 800c0be:	3e03      	subs	r6, #3
 800c0c0:	3401      	adds	r4, #1
 800c0c2:	42a6      	cmp	r6, r4
 800c0c4:	bf38      	it	cc
 800c0c6:	2304      	movcc	r3, #4
 800c0c8:	4443      	add	r3, r8
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f843 2b04 	str.w	r2, [r3], #4
 800c0d0:	429f      	cmp	r7, r3
 800c0d2:	d2fb      	bcs.n	800c0cc <__hexnan+0xcc>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	b91b      	cbnz	r3, 800c0e0 <__hexnan+0xe0>
 800c0d8:	4547      	cmp	r7, r8
 800c0da:	d126      	bne.n	800c12a <__hexnan+0x12a>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	2005      	movs	r0, #5
 800c0e2:	e025      	b.n	800c130 <__hexnan+0x130>
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	2d08      	cmp	r5, #8
 800c0e8:	f10b 0b01 	add.w	fp, fp, #1
 800c0ec:	dd06      	ble.n	800c0fc <__hexnan+0xfc>
 800c0ee:	4544      	cmp	r4, r8
 800c0f0:	d9c3      	bls.n	800c07a <__hexnan+0x7a>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0f8:	2501      	movs	r5, #1
 800c0fa:	3c04      	subs	r4, #4
 800c0fc:	6822      	ldr	r2, [r4, #0]
 800c0fe:	f000 000f 	and.w	r0, r0, #15
 800c102:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	e7b7      	b.n	800c07a <__hexnan+0x7a>
 800c10a:	2508      	movs	r5, #8
 800c10c:	e7b5      	b.n	800c07a <__hexnan+0x7a>
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0df      	beq.n	800c0d4 <__hexnan+0xd4>
 800c114:	f1c3 0320 	rsb	r3, r3, #32
 800c118:	f04f 32ff 	mov.w	r2, #4294967295
 800c11c:	40da      	lsrs	r2, r3
 800c11e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c122:	4013      	ands	r3, r2
 800c124:	f846 3c04 	str.w	r3, [r6, #-4]
 800c128:	e7d4      	b.n	800c0d4 <__hexnan+0xd4>
 800c12a:	3f04      	subs	r7, #4
 800c12c:	e7d2      	b.n	800c0d4 <__hexnan+0xd4>
 800c12e:	2004      	movs	r0, #4
 800c130:	b007      	add	sp, #28
 800c132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c136 <__ascii_mbtowc>:
 800c136:	b082      	sub	sp, #8
 800c138:	b901      	cbnz	r1, 800c13c <__ascii_mbtowc+0x6>
 800c13a:	a901      	add	r1, sp, #4
 800c13c:	b142      	cbz	r2, 800c150 <__ascii_mbtowc+0x1a>
 800c13e:	b14b      	cbz	r3, 800c154 <__ascii_mbtowc+0x1e>
 800c140:	7813      	ldrb	r3, [r2, #0]
 800c142:	600b      	str	r3, [r1, #0]
 800c144:	7812      	ldrb	r2, [r2, #0]
 800c146:	1e10      	subs	r0, r2, #0
 800c148:	bf18      	it	ne
 800c14a:	2001      	movne	r0, #1
 800c14c:	b002      	add	sp, #8
 800c14e:	4770      	bx	lr
 800c150:	4610      	mov	r0, r2
 800c152:	e7fb      	b.n	800c14c <__ascii_mbtowc+0x16>
 800c154:	f06f 0001 	mvn.w	r0, #1
 800c158:	e7f8      	b.n	800c14c <__ascii_mbtowc+0x16>

0800c15a <_realloc_r>:
 800c15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15e:	4680      	mov	r8, r0
 800c160:	4614      	mov	r4, r2
 800c162:	460e      	mov	r6, r1
 800c164:	b921      	cbnz	r1, 800c170 <_realloc_r+0x16>
 800c166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c16a:	4611      	mov	r1, r2
 800c16c:	f7fd be2e 	b.w	8009dcc <_malloc_r>
 800c170:	b92a      	cbnz	r2, 800c17e <_realloc_r+0x24>
 800c172:	f7fd fdb7 	bl	8009ce4 <_free_r>
 800c176:	4625      	mov	r5, r4
 800c178:	4628      	mov	r0, r5
 800c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17e:	f000 f842 	bl	800c206 <_malloc_usable_size_r>
 800c182:	4284      	cmp	r4, r0
 800c184:	4607      	mov	r7, r0
 800c186:	d802      	bhi.n	800c18e <_realloc_r+0x34>
 800c188:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c18c:	d812      	bhi.n	800c1b4 <_realloc_r+0x5a>
 800c18e:	4621      	mov	r1, r4
 800c190:	4640      	mov	r0, r8
 800c192:	f7fd fe1b 	bl	8009dcc <_malloc_r>
 800c196:	4605      	mov	r5, r0
 800c198:	2800      	cmp	r0, #0
 800c19a:	d0ed      	beq.n	800c178 <_realloc_r+0x1e>
 800c19c:	42bc      	cmp	r4, r7
 800c19e:	4622      	mov	r2, r4
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	bf28      	it	cs
 800c1a4:	463a      	movcs	r2, r7
 800c1a6:	f7ff fc23 	bl	800b9f0 <memcpy>
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	f7fd fd99 	bl	8009ce4 <_free_r>
 800c1b2:	e7e1      	b.n	800c178 <_realloc_r+0x1e>
 800c1b4:	4635      	mov	r5, r6
 800c1b6:	e7df      	b.n	800c178 <_realloc_r+0x1e>

0800c1b8 <__ascii_wctomb>:
 800c1b8:	b149      	cbz	r1, 800c1ce <__ascii_wctomb+0x16>
 800c1ba:	2aff      	cmp	r2, #255	; 0xff
 800c1bc:	bf85      	ittet	hi
 800c1be:	238a      	movhi	r3, #138	; 0x8a
 800c1c0:	6003      	strhi	r3, [r0, #0]
 800c1c2:	700a      	strbls	r2, [r1, #0]
 800c1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1c8:	bf98      	it	ls
 800c1ca:	2001      	movls	r0, #1
 800c1cc:	4770      	bx	lr
 800c1ce:	4608      	mov	r0, r1
 800c1d0:	4770      	bx	lr
	...

0800c1d4 <fiprintf>:
 800c1d4:	b40e      	push	{r1, r2, r3}
 800c1d6:	b503      	push	{r0, r1, lr}
 800c1d8:	4601      	mov	r1, r0
 800c1da:	ab03      	add	r3, sp, #12
 800c1dc:	4805      	ldr	r0, [pc, #20]	; (800c1f4 <fiprintf+0x20>)
 800c1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e2:	6800      	ldr	r0, [r0, #0]
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	f000 f83f 	bl	800c268 <_vfiprintf_r>
 800c1ea:	b002      	add	sp, #8
 800c1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f0:	b003      	add	sp, #12
 800c1f2:	4770      	bx	lr
 800c1f4:	20000064 	.word	0x20000064

0800c1f8 <abort>:
 800c1f8:	b508      	push	{r3, lr}
 800c1fa:	2006      	movs	r0, #6
 800c1fc:	f000 fa0c 	bl	800c618 <raise>
 800c200:	2001      	movs	r0, #1
 800c202:	f7f5 fa67 	bl	80016d4 <_exit>

0800c206 <_malloc_usable_size_r>:
 800c206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20a:	1f18      	subs	r0, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfbc      	itt	lt
 800c210:	580b      	ldrlt	r3, [r1, r0]
 800c212:	18c0      	addlt	r0, r0, r3
 800c214:	4770      	bx	lr

0800c216 <__sfputc_r>:
 800c216:	6893      	ldr	r3, [r2, #8]
 800c218:	3b01      	subs	r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	b410      	push	{r4}
 800c21e:	6093      	str	r3, [r2, #8]
 800c220:	da08      	bge.n	800c234 <__sfputc_r+0x1e>
 800c222:	6994      	ldr	r4, [r2, #24]
 800c224:	42a3      	cmp	r3, r4
 800c226:	db01      	blt.n	800c22c <__sfputc_r+0x16>
 800c228:	290a      	cmp	r1, #10
 800c22a:	d103      	bne.n	800c234 <__sfputc_r+0x1e>
 800c22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c230:	f000 b934 	b.w	800c49c <__swbuf_r>
 800c234:	6813      	ldr	r3, [r2, #0]
 800c236:	1c58      	adds	r0, r3, #1
 800c238:	6010      	str	r0, [r2, #0]
 800c23a:	7019      	strb	r1, [r3, #0]
 800c23c:	4608      	mov	r0, r1
 800c23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <__sfputs_r>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	4614      	mov	r4, r2
 800c24c:	18d5      	adds	r5, r2, r3
 800c24e:	42ac      	cmp	r4, r5
 800c250:	d101      	bne.n	800c256 <__sfputs_r+0x12>
 800c252:	2000      	movs	r0, #0
 800c254:	e007      	b.n	800c266 <__sfputs_r+0x22>
 800c256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25a:	463a      	mov	r2, r7
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffda 	bl	800c216 <__sfputc_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d1f3      	bne.n	800c24e <__sfputs_r+0xa>
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c268 <_vfiprintf_r>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	460d      	mov	r5, r1
 800c26e:	b09d      	sub	sp, #116	; 0x74
 800c270:	4614      	mov	r4, r2
 800c272:	4698      	mov	r8, r3
 800c274:	4606      	mov	r6, r0
 800c276:	b118      	cbz	r0, 800c280 <_vfiprintf_r+0x18>
 800c278:	6a03      	ldr	r3, [r0, #32]
 800c27a:	b90b      	cbnz	r3, 800c280 <_vfiprintf_r+0x18>
 800c27c:	f7fc fd98 	bl	8008db0 <__sinit>
 800c280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	d405      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	059a      	lsls	r2, r3, #22
 800c28a:	d402      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c28e:	f7fc fea6 	bl	8008fde <__retarget_lock_acquire_recursive>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	071b      	lsls	r3, r3, #28
 800c296:	d501      	bpl.n	800c29c <_vfiprintf_r+0x34>
 800c298:	692b      	ldr	r3, [r5, #16]
 800c29a:	b99b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x5c>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f93a 	bl	800c518 <__swsetup_r>
 800c2a4:	b170      	cbz	r0, 800c2c4 <_vfiprintf_r+0x5c>
 800c2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a8:	07dc      	lsls	r4, r3, #31
 800c2aa:	d504      	bpl.n	800c2b6 <_vfiprintf_r+0x4e>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	b01d      	add	sp, #116	; 0x74
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	89ab      	ldrh	r3, [r5, #12]
 800c2b8:	0598      	lsls	r0, r3, #22
 800c2ba:	d4f7      	bmi.n	800c2ac <_vfiprintf_r+0x44>
 800c2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2be:	f7fc fe8f 	bl	8008fe0 <__retarget_lock_release_recursive>
 800c2c2:	e7f3      	b.n	800c2ac <_vfiprintf_r+0x44>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d2:	2330      	movs	r3, #48	; 0x30
 800c2d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c488 <_vfiprintf_r+0x220>
 800c2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2dc:	f04f 0901 	mov.w	r9, #1
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	469a      	mov	sl, r3
 800c2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e8:	b10a      	cbz	r2, 800c2ee <_vfiprintf_r+0x86>
 800c2ea:	2a25      	cmp	r2, #37	; 0x25
 800c2ec:	d1f9      	bne.n	800c2e2 <_vfiprintf_r+0x7a>
 800c2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c2f2:	d00b      	beq.n	800c30c <_vfiprintf_r+0xa4>
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ffa2 	bl	800c244 <__sfputs_r>
 800c300:	3001      	adds	r0, #1
 800c302:	f000 80a9 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c308:	445a      	add	r2, fp
 800c30a:	9209      	str	r2, [sp, #36]	; 0x24
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80a1 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c316:	2300      	movs	r3, #0
 800c318:	f04f 32ff 	mov.w	r2, #4294967295
 800c31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c320:	f10a 0a01 	add.w	sl, sl, #1
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c32c:	931a      	str	r3, [sp, #104]	; 0x68
 800c32e:	4654      	mov	r4, sl
 800c330:	2205      	movs	r2, #5
 800c332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c336:	4854      	ldr	r0, [pc, #336]	; (800c488 <_vfiprintf_r+0x220>)
 800c338:	f7f3 ff4a 	bl	80001d0 <memchr>
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	b9d8      	cbnz	r0, 800c378 <_vfiprintf_r+0x110>
 800c340:	06d1      	lsls	r1, r2, #27
 800c342:	bf44      	itt	mi
 800c344:	2320      	movmi	r3, #32
 800c346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c34a:	0713      	lsls	r3, r2, #28
 800c34c:	bf44      	itt	mi
 800c34e:	232b      	movmi	r3, #43	; 0x2b
 800c350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c354:	f89a 3000 	ldrb.w	r3, [sl]
 800c358:	2b2a      	cmp	r3, #42	; 0x2a
 800c35a:	d015      	beq.n	800c388 <_vfiprintf_r+0x120>
 800c35c:	9a07      	ldr	r2, [sp, #28]
 800c35e:	4654      	mov	r4, sl
 800c360:	2000      	movs	r0, #0
 800c362:	f04f 0c0a 	mov.w	ip, #10
 800c366:	4621      	mov	r1, r4
 800c368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c36c:	3b30      	subs	r3, #48	; 0x30
 800c36e:	2b09      	cmp	r3, #9
 800c370:	d94d      	bls.n	800c40e <_vfiprintf_r+0x1a6>
 800c372:	b1b0      	cbz	r0, 800c3a2 <_vfiprintf_r+0x13a>
 800c374:	9207      	str	r2, [sp, #28]
 800c376:	e014      	b.n	800c3a2 <_vfiprintf_r+0x13a>
 800c378:	eba0 0308 	sub.w	r3, r0, r8
 800c37c:	fa09 f303 	lsl.w	r3, r9, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	46a2      	mov	sl, r4
 800c386:	e7d2      	b.n	800c32e <_vfiprintf_r+0xc6>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	1d19      	adds	r1, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	9103      	str	r1, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfbb      	ittet	lt
 800c394:	425b      	neglt	r3, r3
 800c396:	f042 0202 	orrlt.w	r2, r2, #2
 800c39a:	9307      	strge	r3, [sp, #28]
 800c39c:	9307      	strlt	r3, [sp, #28]
 800c39e:	bfb8      	it	lt
 800c3a0:	9204      	strlt	r2, [sp, #16]
 800c3a2:	7823      	ldrb	r3, [r4, #0]
 800c3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a6:	d10c      	bne.n	800c3c2 <_vfiprintf_r+0x15a>
 800c3a8:	7863      	ldrb	r3, [r4, #1]
 800c3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ac:	d134      	bne.n	800c418 <_vfiprintf_r+0x1b0>
 800c3ae:	9b03      	ldr	r3, [sp, #12]
 800c3b0:	1d1a      	adds	r2, r3, #4
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	9203      	str	r2, [sp, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3be:	3402      	adds	r4, #2
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c498 <_vfiprintf_r+0x230>
 800c3c6:	7821      	ldrb	r1, [r4, #0]
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	4650      	mov	r0, sl
 800c3cc:	f7f3 ff00 	bl	80001d0 <memchr>
 800c3d0:	b138      	cbz	r0, 800c3e2 <_vfiprintf_r+0x17a>
 800c3d2:	9b04      	ldr	r3, [sp, #16]
 800c3d4:	eba0 000a 	sub.w	r0, r0, sl
 800c3d8:	2240      	movs	r2, #64	; 0x40
 800c3da:	4082      	lsls	r2, r0
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e6:	4829      	ldr	r0, [pc, #164]	; (800c48c <_vfiprintf_r+0x224>)
 800c3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	f7f3 feef 	bl	80001d0 <memchr>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d03f      	beq.n	800c476 <_vfiprintf_r+0x20e>
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <_vfiprintf_r+0x228>)
 800c3f8:	bb1b      	cbnz	r3, 800c442 <_vfiprintf_r+0x1da>
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	3308      	adds	r3, #8
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	443b      	add	r3, r7
 800c40a:	9309      	str	r3, [sp, #36]	; 0x24
 800c40c:	e768      	b.n	800c2e0 <_vfiprintf_r+0x78>
 800c40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c412:	460c      	mov	r4, r1
 800c414:	2001      	movs	r0, #1
 800c416:	e7a6      	b.n	800c366 <_vfiprintf_r+0xfe>
 800c418:	2300      	movs	r3, #0
 800c41a:	3401      	adds	r4, #1
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	4619      	mov	r1, r3
 800c420:	f04f 0c0a 	mov.w	ip, #10
 800c424:	4620      	mov	r0, r4
 800c426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c42a:	3a30      	subs	r2, #48	; 0x30
 800c42c:	2a09      	cmp	r2, #9
 800c42e:	d903      	bls.n	800c438 <_vfiprintf_r+0x1d0>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d0c6      	beq.n	800c3c2 <_vfiprintf_r+0x15a>
 800c434:	9105      	str	r1, [sp, #20]
 800c436:	e7c4      	b.n	800c3c2 <_vfiprintf_r+0x15a>
 800c438:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43c:	4604      	mov	r4, r0
 800c43e:	2301      	movs	r3, #1
 800c440:	e7f0      	b.n	800c424 <_vfiprintf_r+0x1bc>
 800c442:	ab03      	add	r3, sp, #12
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	462a      	mov	r2, r5
 800c448:	4b12      	ldr	r3, [pc, #72]	; (800c494 <_vfiprintf_r+0x22c>)
 800c44a:	a904      	add	r1, sp, #16
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7fb fe4d 	bl	80080ec <_printf_float>
 800c452:	4607      	mov	r7, r0
 800c454:	1c78      	adds	r0, r7, #1
 800c456:	d1d6      	bne.n	800c406 <_vfiprintf_r+0x19e>
 800c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c466:	f7fc fdbb 	bl	8008fe0 <__retarget_lock_release_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	065b      	lsls	r3, r3, #25
 800c46e:	f53f af1d 	bmi.w	800c2ac <_vfiprintf_r+0x44>
 800c472:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c474:	e71c      	b.n	800c2b0 <_vfiprintf_r+0x48>
 800c476:	ab03      	add	r3, sp, #12
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	462a      	mov	r2, r5
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_vfiprintf_r+0x22c>)
 800c47e:	a904      	add	r1, sp, #16
 800c480:	4630      	mov	r0, r6
 800c482:	f7fc f8d7 	bl	8008634 <_printf_i>
 800c486:	e7e4      	b.n	800c452 <_vfiprintf_r+0x1ea>
 800c488:	0800cb61 	.word	0x0800cb61
 800c48c:	0800cb6b 	.word	0x0800cb6b
 800c490:	080080ed 	.word	0x080080ed
 800c494:	0800c245 	.word	0x0800c245
 800c498:	0800cb67 	.word	0x0800cb67

0800c49c <__swbuf_r>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	460e      	mov	r6, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	b118      	cbz	r0, 800c4ae <__swbuf_r+0x12>
 800c4a6:	6a03      	ldr	r3, [r0, #32]
 800c4a8:	b90b      	cbnz	r3, 800c4ae <__swbuf_r+0x12>
 800c4aa:	f7fc fc81 	bl	8008db0 <__sinit>
 800c4ae:	69a3      	ldr	r3, [r4, #24]
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	071a      	lsls	r2, r3, #28
 800c4b6:	d525      	bpl.n	800c504 <__swbuf_r+0x68>
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	b31b      	cbz	r3, 800c504 <__swbuf_r+0x68>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	6922      	ldr	r2, [r4, #16]
 800c4c0:	1a98      	subs	r0, r3, r2
 800c4c2:	6963      	ldr	r3, [r4, #20]
 800c4c4:	b2f6      	uxtb	r6, r6
 800c4c6:	4283      	cmp	r3, r0
 800c4c8:	4637      	mov	r7, r6
 800c4ca:	dc04      	bgt.n	800c4d6 <__swbuf_r+0x3a>
 800c4cc:	4621      	mov	r1, r4
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff fa2a 	bl	800b928 <_fflush_r>
 800c4d4:	b9e0      	cbnz	r0, 800c510 <__swbuf_r+0x74>
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	60a3      	str	r3, [r4, #8]
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	6022      	str	r2, [r4, #0]
 800c4e2:	701e      	strb	r6, [r3, #0]
 800c4e4:	6962      	ldr	r2, [r4, #20]
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d004      	beq.n	800c4f6 <__swbuf_r+0x5a>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	07db      	lsls	r3, r3, #31
 800c4f0:	d506      	bpl.n	800c500 <__swbuf_r+0x64>
 800c4f2:	2e0a      	cmp	r6, #10
 800c4f4:	d104      	bne.n	800c500 <__swbuf_r+0x64>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f7ff fa15 	bl	800b928 <_fflush_r>
 800c4fe:	b938      	cbnz	r0, 800c510 <__swbuf_r+0x74>
 800c500:	4638      	mov	r0, r7
 800c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c504:	4621      	mov	r1, r4
 800c506:	4628      	mov	r0, r5
 800c508:	f000 f806 	bl	800c518 <__swsetup_r>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d0d5      	beq.n	800c4bc <__swbuf_r+0x20>
 800c510:	f04f 37ff 	mov.w	r7, #4294967295
 800c514:	e7f4      	b.n	800c500 <__swbuf_r+0x64>
	...

0800c518 <__swsetup_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <__swsetup_r+0xac>)
 800c51c:	4605      	mov	r5, r0
 800c51e:	6818      	ldr	r0, [r3, #0]
 800c520:	460c      	mov	r4, r1
 800c522:	b118      	cbz	r0, 800c52c <__swsetup_r+0x14>
 800c524:	6a03      	ldr	r3, [r0, #32]
 800c526:	b90b      	cbnz	r3, 800c52c <__swsetup_r+0x14>
 800c528:	f7fc fc42 	bl	8008db0 <__sinit>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c532:	0718      	lsls	r0, r3, #28
 800c534:	d422      	bmi.n	800c57c <__swsetup_r+0x64>
 800c536:	06d9      	lsls	r1, r3, #27
 800c538:	d407      	bmi.n	800c54a <__swsetup_r+0x32>
 800c53a:	2309      	movs	r3, #9
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	e034      	b.n	800c5b4 <__swsetup_r+0x9c>
 800c54a:	0758      	lsls	r0, r3, #29
 800c54c:	d512      	bpl.n	800c574 <__swsetup_r+0x5c>
 800c54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c550:	b141      	cbz	r1, 800c564 <__swsetup_r+0x4c>
 800c552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c556:	4299      	cmp	r1, r3
 800c558:	d002      	beq.n	800c560 <__swsetup_r+0x48>
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7fd fbc2 	bl	8009ce4 <_free_r>
 800c560:	2300      	movs	r3, #0
 800c562:	6363      	str	r3, [r4, #52]	; 0x34
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c56a:	81a3      	strh	r3, [r4, #12]
 800c56c:	2300      	movs	r3, #0
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f043 0308 	orr.w	r3, r3, #8
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	b94b      	cbnz	r3, 800c594 <__swsetup_r+0x7c>
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58a:	d003      	beq.n	800c594 <__swsetup_r+0x7c>
 800c58c:	4621      	mov	r1, r4
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 f884 	bl	800c69c <__smakebuf_r>
 800c594:	89a0      	ldrh	r0, [r4, #12]
 800c596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c59a:	f010 0301 	ands.w	r3, r0, #1
 800c59e:	d00a      	beq.n	800c5b6 <__swsetup_r+0x9e>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60a3      	str	r3, [r4, #8]
 800c5a4:	6963      	ldr	r3, [r4, #20]
 800c5a6:	425b      	negs	r3, r3
 800c5a8:	61a3      	str	r3, [r4, #24]
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	b943      	cbnz	r3, 800c5c0 <__swsetup_r+0xa8>
 800c5ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5b2:	d1c4      	bne.n	800c53e <__swsetup_r+0x26>
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	0781      	lsls	r1, r0, #30
 800c5b8:	bf58      	it	pl
 800c5ba:	6963      	ldrpl	r3, [r4, #20]
 800c5bc:	60a3      	str	r3, [r4, #8]
 800c5be:	e7f4      	b.n	800c5aa <__swsetup_r+0x92>
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	e7f7      	b.n	800c5b4 <__swsetup_r+0x9c>
 800c5c4:	20000064 	.word	0x20000064

0800c5c8 <_raise_r>:
 800c5c8:	291f      	cmp	r1, #31
 800c5ca:	b538      	push	{r3, r4, r5, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	d904      	bls.n	800c5dc <_raise_r+0x14>
 800c5d2:	2316      	movs	r3, #22
 800c5d4:	6003      	str	r3, [r0, #0]
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5de:	b112      	cbz	r2, 800c5e6 <_raise_r+0x1e>
 800c5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5e4:	b94b      	cbnz	r3, 800c5fa <_raise_r+0x32>
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 f830 	bl	800c64c <_getpid_r>
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f6:	f000 b817 	b.w	800c628 <_kill_r>
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d00a      	beq.n	800c614 <_raise_r+0x4c>
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	d103      	bne.n	800c60a <_raise_r+0x42>
 800c602:	2316      	movs	r3, #22
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	2001      	movs	r0, #1
 800c608:	e7e7      	b.n	800c5da <_raise_r+0x12>
 800c60a:	2400      	movs	r4, #0
 800c60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c610:	4628      	mov	r0, r5
 800c612:	4798      	blx	r3
 800c614:	2000      	movs	r0, #0
 800c616:	e7e0      	b.n	800c5da <_raise_r+0x12>

0800c618 <raise>:
 800c618:	4b02      	ldr	r3, [pc, #8]	; (800c624 <raise+0xc>)
 800c61a:	4601      	mov	r1, r0
 800c61c:	6818      	ldr	r0, [r3, #0]
 800c61e:	f7ff bfd3 	b.w	800c5c8 <_raise_r>
 800c622:	bf00      	nop
 800c624:	20000064 	.word	0x20000064

0800c628 <_kill_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d07      	ldr	r5, [pc, #28]	; (800c648 <_kill_r+0x20>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	4611      	mov	r1, r2
 800c634:	602b      	str	r3, [r5, #0]
 800c636:	f7f5 f83d 	bl	80016b4 <_kill>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d102      	bne.n	800c644 <_kill_r+0x1c>
 800c63e:	682b      	ldr	r3, [r5, #0]
 800c640:	b103      	cbz	r3, 800c644 <_kill_r+0x1c>
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	bd38      	pop	{r3, r4, r5, pc}
 800c646:	bf00      	nop
 800c648:	20000554 	.word	0x20000554

0800c64c <_getpid_r>:
 800c64c:	f7f5 b82a 	b.w	80016a4 <_getpid>

0800c650 <__swhatbuf_r>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c658:	2900      	cmp	r1, #0
 800c65a:	b096      	sub	sp, #88	; 0x58
 800c65c:	4615      	mov	r5, r2
 800c65e:	461e      	mov	r6, r3
 800c660:	da0d      	bge.n	800c67e <__swhatbuf_r+0x2e>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c668:	f04f 0100 	mov.w	r1, #0
 800c66c:	bf0c      	ite	eq
 800c66e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c672:	2340      	movne	r3, #64	; 0x40
 800c674:	2000      	movs	r0, #0
 800c676:	6031      	str	r1, [r6, #0]
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	b016      	add	sp, #88	; 0x58
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	466a      	mov	r2, sp
 800c680:	f000 f848 	bl	800c714 <_fstat_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	dbec      	blt.n	800c662 <__swhatbuf_r+0x12>
 800c688:	9901      	ldr	r1, [sp, #4]
 800c68a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c68e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c692:	4259      	negs	r1, r3
 800c694:	4159      	adcs	r1, r3
 800c696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69a:	e7eb      	b.n	800c674 <__swhatbuf_r+0x24>

0800c69c <__smakebuf_r>:
 800c69c:	898b      	ldrh	r3, [r1, #12]
 800c69e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6a0:	079d      	lsls	r5, r3, #30
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	d507      	bpl.n	800c6b8 <__smakebuf_r+0x1c>
 800c6a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	6123      	str	r3, [r4, #16]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	6163      	str	r3, [r4, #20]
 800c6b4:	b002      	add	sp, #8
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	ab01      	add	r3, sp, #4
 800c6ba:	466a      	mov	r2, sp
 800c6bc:	f7ff ffc8 	bl	800c650 <__swhatbuf_r>
 800c6c0:	9900      	ldr	r1, [sp, #0]
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7fd fb81 	bl	8009dcc <_malloc_r>
 800c6ca:	b948      	cbnz	r0, 800c6e0 <__smakebuf_r+0x44>
 800c6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d0:	059a      	lsls	r2, r3, #22
 800c6d2:	d4ef      	bmi.n	800c6b4 <__smakebuf_r+0x18>
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	f043 0302 	orr.w	r3, r3, #2
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	e7e3      	b.n	800c6a8 <__smakebuf_r+0xc>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	6163      	str	r3, [r4, #20]
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	6120      	str	r0, [r4, #16]
 800c6f2:	b15b      	cbz	r3, 800c70c <__smakebuf_r+0x70>
 800c6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 f81d 	bl	800c738 <_isatty_r>
 800c6fe:	b128      	cbz	r0, 800c70c <__smakebuf_r+0x70>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	431d      	orrs	r5, r3
 800c710:	81a5      	strh	r5, [r4, #12]
 800c712:	e7cf      	b.n	800c6b4 <__smakebuf_r+0x18>

0800c714 <_fstat_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d07      	ldr	r5, [pc, #28]	; (800c734 <_fstat_r+0x20>)
 800c718:	2300      	movs	r3, #0
 800c71a:	4604      	mov	r4, r0
 800c71c:	4608      	mov	r0, r1
 800c71e:	4611      	mov	r1, r2
 800c720:	602b      	str	r3, [r5, #0]
 800c722:	f7f5 f826 	bl	8001772 <_fstat>
 800c726:	1c43      	adds	r3, r0, #1
 800c728:	d102      	bne.n	800c730 <_fstat_r+0x1c>
 800c72a:	682b      	ldr	r3, [r5, #0]
 800c72c:	b103      	cbz	r3, 800c730 <_fstat_r+0x1c>
 800c72e:	6023      	str	r3, [r4, #0]
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop
 800c734:	20000554 	.word	0x20000554

0800c738 <_isatty_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d06      	ldr	r5, [pc, #24]	; (800c754 <_isatty_r+0x1c>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	602b      	str	r3, [r5, #0]
 800c744:	f7f5 f825 	bl	8001792 <_isatty>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d102      	bne.n	800c752 <_isatty_r+0x1a>
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	b103      	cbz	r3, 800c752 <_isatty_r+0x1a>
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	20000554 	.word	0x20000554

0800c758 <_init>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr

0800c764 <_fini>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr
